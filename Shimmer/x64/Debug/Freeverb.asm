; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	??_L@YAXPEAX_K1P6AX0@Z2@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
PUBLIC	?processAudio@Freeverb@@QEAAXPEAM0@Z		; Freeverb::processAudio
PUBLIC	?updateReverbParameters@Freeverb@@QEAAXXZ	; Freeverb::updateReverbParameters
PUBLIC	?setAllPassFiltersDelay@Freeverb@@QEAAXXZ	; Freeverb::setAllPassFiltersDelay
PUBLIC	?setCombFiltersDelay@Freeverb@@QEAAXXZ		; Freeverb::setCombFiltersDelay
PUBLIC	?mapValueIntoRange@Freeverb@@QEAAMMMM@Z		; Freeverb::mapValueIntoRange
PUBLIC	?setReverbSpread@Freeverb@@QEAAXM@Z		; Freeverb::setReverbSpread
PUBLIC	?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z ; Freeverb::setReverbPreDelayInMilliseconds
PUBLIC	?setReverbDampingFrequency@Freeverb@@QEAAXM@Z	; Freeverb::setReverbDampingFrequency
PUBLIC	?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z	; Freeverb::setReverbDecayInSeconds
PUBLIC	?setReverbSmearing@Freeverb@@QEAAXM@Z		; Freeverb::setReverbSmearing
PUBLIC	?setReverbWet@Freeverb@@QEAAXM@Z		; Freeverb::setReverbWet
PUBLIC	?setSampleRate@Freeverb@@QEAAXH@Z		; Freeverb::setSampleRate
PUBLIC	?init@Freeverb@@QEAAXHMMMMMM@Z			; Freeverb::init
PUBLIC	??_GAllPassFilter@@QEAAPEAXI@Z			; AllPassFilter::`scalar deleting destructor'
PUBLIC	??_GLPCombFilter@@QEAAPEAXI@Z			; LPCombFilter::`scalar deleting destructor'
PUBLIC	??_GCombFilter@@QEAAPEAXI@Z			; CombFilter::`scalar deleting destructor'
PUBLIC	??1Freeverb@@QEAA@XZ				; Freeverb::~Freeverb
PUBLIC	??0Freeverb@@QEAA@XZ				; Freeverb::Freeverb
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@Freeverb@@QEAAXPEAM0@Z DD imagerel $LN25@processAud
	DD	imagerel $LN25@processAud+476
	DD	imagerel $unwind$?processAudio@Freeverb@@QEAAXPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ DD imagerel $LN34@setAllPass
	DD	imagerel $LN34@setAllPass+305
	DD	imagerel $unwind$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setCombFiltersDelay@Freeverb@@QEAAXXZ DD imagerel $LN19@setCombFil
	DD	imagerel $LN19@setCombFil+161
	DD	imagerel $unwind$?setCombFiltersDelay@Freeverb@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z DD imagerel $LN19@setReverbD
	DD	imagerel $LN19@setReverbD+104
	DD	imagerel $unwind$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z DD imagerel $LN11@setReverbD
	DD	imagerel $LN11@setReverbD+88
	DD	imagerel $unwind$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSampleRate@Freeverb@@QEAAXH@Z DD imagerel $LN25@setSampleR
	DD	imagerel $LN25@setSampleR+266
	DD	imagerel $unwind$?setSampleRate@Freeverb@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@Freeverb@@QEAAXHMMMMMM@Z DD imagerel $LN114
	DD	imagerel $LN114+1044
	DD	imagerel $unwind$?init@Freeverb@@QEAAXHMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAllPassFilter@@QEAAPEAXI@Z DD imagerel $LN9@scalar
	DD	imagerel $LN9@scalar+33
	DD	imagerel $unwind$??_GAllPassFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GLPCombFilter@@QEAAPEAXI@Z DD imagerel $LN15@scalar
	DD	imagerel $LN15@scalar+50
	DD	imagerel $unwind$??_GLPCombFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCombFilter@@QEAAPEAXI@Z DD imagerel $LN9@scalar
	DD	imagerel $LN9@scalar+33
	DD	imagerel $unwind$??_GCombFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Freeverb@@QEAA@XZ DD imagerel $LN80@Freeverb
	DD	imagerel $LN80@Freeverb+248
	DD	imagerel $unwind$??1Freeverb@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Freeverb@@QEAA@XZ DD imagerel $LN30@Freeverb
	DD	imagerel $LN30@Freeverb+588
	DD	imagerel $unwind$??0Freeverb@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA DQ 05002320600020601r ; 2.6336e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Freeverb@@QEAA@XZ DQ 022006002a000521ar ; 6.55684e-145
	DQ	0280068062a004204r		; 5.20479e-116
	DQ	028003a0a28003a08r		; 5.14781e-116
	DW	03a0cH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Freeverb@@QEAA@XZ DW 0e0cH
	DD	imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
	DB	036H
	DD	imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
	DB	05eH
	DD	imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
	DB	086H
	DD	imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0Freeverb@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0Freeverb@@QEAA@XZ
	DD	imagerel $ip2state$??0Freeverb@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Freeverb@@QEAA@XZ DQ 0000e5416000a1611r ; 1.99262e-308
	DQ	0f0125216000d3416r		; -7.11078e+231
	DQ	0600b700cc00ee010r		; 4.59849e+154
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0Freeverb@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Freeverb@@QEAA@XZ DQ 000097419000a1901r ; 1.31467e-308
	DQ	00007541900086419r		; 1.01915e-308
	DQ	0e015321900063419r		; -7.10469e+154
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCombFilter@@QEAAPEAXI@Z DQ 03002320600020601r ; 1.96423e-77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GLPCombFilter@@QEAAPEAXI@Z DQ 03002320600020601r ; 1.96423e-77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAllPassFilter@@QEAAPEAXI@Z DQ 03002320600020601r ; 1.96423e-77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@Freeverb@@QEAAXHMMMMMM@Z DD 0103a01H
	DD	02883aH
	DD	037835H
	DD	04682eH
	DD	0106418H
	DD	0f5418H
	DD	0e3418H
	DD	0f0149218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSampleRate@Freeverb@@QEAAXH@Z DQ 0000b741d000c1d01r ; 1.59281e-308
	DQ	00009541d000a641dr		; 1.2973e-308
	DQ	0f019321d0008341dr		; -9.77922e+231
	DD	0c015e017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z DQ 00007640f00060f01r ; 1.02782e-308
	DQ	0700b320f0006340fr		; 5.2777e+231
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z DQ 00006340a00040a01r ; 8.62672e-309
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setCombFiltersDelay@Freeverb@@QEAAXXZ DQ 00008641400081401r ; 1.1669e-308
	DQ	00006341400075414r		; 8.62693e-309
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ DQ 0000a6418000a1801r ; 1.44505e-308
	DQ	00008341800095418r		; 1.14084e-308
	DQ	07010e012f0143218r		; 6.5498e+231
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@Freeverb@@QEAAXPEAM0@Z DQ 00002b85100185101r ; 3.78261e-309
	DQ	0000498420003a847r		; 6.3898e-309
	DQ	0000678320005883ar		; 8.99697e-309
	DQ	00017742000076824r		; 3.26163e-308
	DQ	00015542000166420r		; 2.96611e-308
	DQ	0f019f22000143420r		; -1.00703e+232
	DD	0c015e017H
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\CombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\CombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?init@Freeverb@@QEAAXHMMMMMM@Z
_TEXT	SEGMENT
this$ = 112
sampleRate$ = 120
rwet$dead$ = 128
rdecay$ = 136
rdamping$ = 144
rsmearing$dead$ = 152
rspread$ = 160
rpredelay$dead$ = 168
?init@Freeverb@@QEAAXHMMMMMM@Z PROC			; Freeverb::init, COMDAT

; 94   : {    

$LN114:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 97   :     preDelayModule->init(MAX_PREDELAY_VALUE_IN_MS, sampleRate);

	movss	xmm1, DWORD PTR __real@43960000
	mov	rbx, rcx
	mov	rcx, QWORD PTR [rcx+40]
	mov	r8d, edx
	movaps	XMMWORD PTR [rax-40], xmm6
	mov	r15d, edx
	movaps	XMMWORD PTR [rax-56], xmm7
	movaps	XMMWORD PTR [rax-72], xmm8
	movaps	xmm8, xmm3
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
; File E:\FoxSuite\fox-suite-blocks\src\CombFilter.cpp

; 18   : 	cf_feedbackGain = g;

	mov	rax, QWORD PTR [rbx+40]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 97   :     preDelayModule->init(MAX_PREDELAY_VALUE_IN_MS, sampleRate);

	xor	esi, esi
	movss	xmm6, DWORD PTR __real@42c80000
	xor	edi, edi
; File E:\FoxSuite\fox-suite-blocks\src\CombFilter.cpp

; 18   : 	cf_feedbackGain = g;

	and	DWORD PTR [rax+56], 0
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 97   :     preDelayModule->init(MAX_PREDELAY_VALUE_IN_MS, sampleRate);

	lea	r14d, QWORD PTR [rsi+8]
	xor	ebp, ebp
$LL4@init:

; 102  :         combFiltersL[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+48]
	mov	r8d, r15d
	movaps	xmm1, xmm6
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rbp]
	call	QWORD PTR [rdx]

; 103  :         combFiltersL[i].setMakeUpGaindB(-12.0);

	mov	rcx, QWORD PTR [rbx+48]
	add	rcx, rdi
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 140  : 	dly_makeUpGaindB = gaindB;

	mov	DWORD PTR [rcx+48], -1052770304		; c1400000H

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 105  :         combFiltersR[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+56]
	mov	r8d, r15d
	movaps	xmm1, xmm6
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rbp]
	call	QWORD PTR [rdx]

; 106  :         combFiltersR[i].setMakeUpGaindB(-12.0);

	mov	rcx, QWORD PTR [rbx+56]
	add	rcx, rdi
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 140  : 	dly_makeUpGaindB = gaindB;

	mov	DWORD PTR [rcx+48], -1052770304		; c1400000H

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 109  :         if (i > 0) {

	test	esi, esi
	je	SHORT $LN2@init

; 110  :             combFiltersL[i].setFeedbackToNegative();

	mov	rax, QWORD PTR [rbx+48]
	or	DWORD PTR [rax+rdi+64], -1

; 111  :             combFiltersR[i].setFeedbackToNegative();

	mov	rax, QWORD PTR [rbx+56]
	or	DWORD PTR [rdi+rax+64], -1
$LN2@init:

; 98   :     preDelayModule->setFeedback(0.0);
; 99   : 
; 100  :     // init comb filters
; 101  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	inc	esi
	add	rbp, 88					; 00000058H
	add	rdi, 88					; 00000058H
	cmp	esi, r14d
	jl	SHORT $LL4@init

; 267  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	movss	xmm6, DWORD PTR __real@3f800000
	lea	rdi, QWORD PTR [rbx+64]
	xor	esi, esi
$LL22@init:

; 268  :         combFilterDlymsRight[i] = combFilterDlymsLeft[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+32]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 269  :         combFiltersL[i].setDelayInmsec(combFilterDlymsLeft[i]);

	mov	rcx, QWORD PTR [rbx+48]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN99@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN99@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 270  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	mov	rcx, QWORD PTR [rbx+56]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 270  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN100@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN100@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 267  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	add	rdi, 4
	add	rsi, 88					; 00000058H
	sub	r14, 1
	jne	SHORT $LL22@init
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	xmm7, DWORD PTR __real@42480000
	xor	edi, edi
	xor	esi, esi
	lea	ebp, QWORD PTR [rdi+3]
	mov	r14d, ebp
$LL7@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 120  :         apFiltersL_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+128]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]

; 121  :         apFiltersR_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+136]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]
	lea	rsi, QWORD PTR [rsi+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r14, 1
	jne	SHORT $LL7@init
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	edi, edi
	mov	r14, rbp
	xor	esi, esi
$LL10@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 125  :         apFiltersL_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+144]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]

; 126  :         apFiltersR_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+152]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]
	lea	rsi, QWORD PTR [rsi+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r14, 1
	jne	SHORT $LL10@init
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	esi, esi
	lea	rdi, QWORD PTR [rbx+160]
	mov	r14, rbp
$LL33@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 281  :         allPassDlymsRight_input[i] = allPassDlymsLeft_input[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+12]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 282  :         apFiltersL_input[i].setDelayInmsec(allPassDlymsLeft_input[i]);

	mov	rcx, QWORD PTR [rbx+128]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN101@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN101@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 283  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	mov	rcx, QWORD PTR [rbx+136]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 283  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN102@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN102@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 280  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	add	rdi, 4
	add	rsi, 64					; 00000040H
	sub	r14, 1
	jne	SHORT $LL33@init
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	esi, esi
	lea	rdi, QWORD PTR [rbx+184]
$LL36@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 287  :         allPassDlymsRight_output[i] = allPassDlymsLeft_output[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+12]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 288  :         apFiltersL_output[i].setDelayInmsec(allPassDlymsLeft_output[i]);

	mov	rcx, QWORD PTR [rbx+144]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN103@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN103@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 289  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	mov	rcx, QWORD PTR [rbx+152]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 289  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN104@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN104@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 286  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	add	rdi, 4
	add	rsi, 64					; 00000040H
	sub	rbp, 1
	jne	SHORT $LL36@init

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm1, DWORD PTR [rbx+20]

; 127  :     }
; 128  : 
; 129  :     // set all pass filters delays
; 130  :     setAllPassFiltersDelay();
; 131  : 
; 132  :     /*.......................................*/
; 133  :     // initialize reverb plug-in parameters
; 134  :     setReverbWet(rwet);
; 135  :     setReverbDecayInSeconds(rdecay);

	mov	rcx, rbx

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movss	xmm7, DWORD PTR __real@3f000000

; 250  :     return minvalue + value * (maxValue - minvalue);

	addss	xmm1, xmm1

; 300  :     dry = (1.0 - freeverb_wet);

	and	DWORD PTR [rbx+32], ebp

; 170  :     freeverb_wet = wet;

	mov	DWORD PTR [rbx], 1065353216		; 3f800000H

; 250  :     return minvalue + value * (maxValue - minvalue);

	subss	xmm1, xmm6

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+24], xmm0

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm6
	subss	xmm0, xmm1

; 127  :     }
; 128  : 
; 129  :     // set all pass filters delays
; 130  :     setAllPassFiltersDelay();
; 131  : 
; 132  :     /*.......................................*/
; 133  :     // initialize reverb plug-in parameters
; 134  :     setReverbWet(rwet);
; 135  :     setReverbDecayInSeconds(rdecay);

	movaps	xmm1, xmm8

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+28], xmm0

; 127  :     }
; 128  : 
; 129  :     // set all pass filters delays
; 130  :     setAllPassFiltersDelay();
; 131  : 
; 132  :     /*.......................................*/
; 133  :     // initialize reverb plug-in parameters
; 134  :     setReverbWet(rwet);
; 135  :     setReverbDecayInSeconds(rdecay);

	call	?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDecayInSeconds

; 136  :     setReverbDampingFrequency(rdamping);

	movss	xmm1, DWORD PTR rdamping$[rsp]
	mov	rcx, rbx
	call	?setReverbDampingFrequency@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDampingFrequency

; 297  :     float width = mapValueIntoRange(freeverb_spread, -1.0, 1.0);

	xor	edx, edx

; 176  :     freeverb_smearing = smearing * MAX_SMEARING_VALUE;

	mov	DWORD PTR [rbx+4], 1059967729		; 3f2dd2f1H

; 297  :     float width = mapValueIntoRange(freeverb_spread, -1.0, 1.0);

	mov	r8d, 192				; 000000c0H
$LL59@init:

; 178  :         apFiltersL_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+128]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rcx+rdx+56], eax

; 179  :         apFiltersR_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+136]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax
	add	rdx, 64					; 00000040H
	cmp	rdx, r8
	jl	SHORT $LL59@init
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	edx, edx
$LL62@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 183  :         apFiltersL_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+144]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax

; 184  :         apFiltersR_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+152]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax
	add	rdx, 64					; 00000040H
	cmp	rdx, r8
	jl	SHORT $LL62@init

; 214  :     freeverb_spread = spread;

	movss	xmm2, DWORD PTR rspread$[rsp]

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm1, xmm6

; 208  :     freeverb_preDelayMilliSeconds = predelay;

	and	DWORD PTR [rbx+16], 0

; 209  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	rcx, QWORD PTR [rbx+40]

; 214  :     freeverb_spread = spread;

	movss	DWORD PTR [rbx+20], xmm2

; 250  :     return minvalue + value * (maxValue - minvalue);

	addss	xmm2, xmm2
	subss	xmm2, xmm6

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm2

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	subss	xmm1, xmm2
	addss	xmm0, xmm6

; 300  :     dry = (1.0 - freeverb_wet);

	subss	xmm6, DWORD PTR [rbx]
	mulss	xmm1, DWORD PTR [rbx]
	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+32], xmm6
	mulss	xmm1, xmm7
	mulss	xmm0, DWORD PTR [rbx]
	movss	DWORD PTR [rbx+28], xmm1
	movss	DWORD PTR [rbx+24], xmm0
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	and	DWORD PTR [rcx+24], 0

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN73@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN73@init:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 140  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?init@Freeverb@@QEAAXHMMMMMM@Z ENDP			; Freeverb::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbWet@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
wet$dead$ = 16
?setReverbWet@Freeverb@@QEAAXM@Z PROC			; Freeverb::setReverbWet, COMDAT

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm3, DWORD PTR [rcx+20]

; 300  :     dry = (1.0 - freeverb_wet);

	and	DWORD PTR [rcx+32], 0

; 250  :     return minvalue + value * (maxValue - minvalue);

	addss	xmm3, xmm3

; 170  :     freeverb_wet = wet;

	mov	DWORD PTR [rcx], 1065353216		; 3f800000H

; 250  :     return minvalue + value * (maxValue - minvalue);

	subss	xmm3, xmm2

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm3
	addss	xmm0, xmm2

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	subss	xmm2, xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rcx+24], xmm0
	movss	DWORD PTR [rcx+28], xmm2

; 171  :     updateReverbParameters();
; 172  : }

	ret	0
?setReverbWet@Freeverb@@QEAAXM@Z ENDP			; Freeverb::setReverbWet
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbSmearing@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
smearing$dead$ = 16
?setReverbSmearing@Freeverb@@QEAAXM@Z PROC		; Freeverb::setReverbSmearing, COMDAT

; 176  :     freeverb_smearing = smearing * MAX_SMEARING_VALUE;

	xor	r9d, r9d
	mov	DWORD PTR [rcx+4], 1059967729		; 3f2dd2f1H
	mov	r10d, r9d
	mov	r8, rcx
	mov	r11d, 192				; 000000c0H
$LL4@setReverbS:

; 177  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {
; 178  :         apFiltersL_input[i].setFeedback(freeverb_smearing);

	mov	eax, DWORD PTR [r8+4]
	mov	rdx, QWORD PTR [r8+128]
	mov	DWORD PTR [r10+rdx+56], eax

; 179  :         apFiltersR_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+136]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+r10+56], eax
	add	r10, 64					; 00000040H
	cmp	r10, r11
	jl	SHORT $LL4@setReverbS
$LL7@setReverbS:

; 180  :     }
; 181  : 
; 182  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {
; 183  :         apFiltersL_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+144]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+rcx+56], eax

; 184  :         apFiltersR_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+152]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+r9+56], eax
	add	r9, 64					; 00000040H
	cmp	r9, r11
	jl	SHORT $LL7@setReverbS

; 185  :     }
; 186  : }

	ret	0
?setReverbSmearing@Freeverb@@QEAAXM@Z ENDP		; Freeverb::setReverbSmearing
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
predelay$dead$ = 16
?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z PROC ; Freeverb::setReverbPreDelayInMilliseconds, COMDAT

; 208  :     freeverb_preDelayMilliSeconds = predelay;

	and	DWORD PTR [rcx+16], 0

; 209  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	rcx, QWORD PTR [rcx+40]
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	and	DWORD PTR [rcx+24], 0

; 129  : 
; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@setReverbP

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN4@setReverbP:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z ENDP ; Freeverb::setReverbPreDelayInMilliseconds
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?mapValueIntoRange@Freeverb@@QEAAMMMM@Z
_TEXT	SEGMENT
this$dead$ = 8
value$ = 16
minvalue$dead$ = 24
maxValue$dead$ = 32
?mapValueIntoRange@Freeverb@@QEAAMMMM@Z PROC		; Freeverb::mapValueIntoRange, COMDAT

; 250  :     return minvalue + value * (maxValue - minvalue);

	addss	xmm1, xmm1
	subss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1

; 251  : }

	ret	0
?mapValueIntoRange@Freeverb@@QEAAMMMM@Z ENDP		; Freeverb::mapValueIntoRange
_TEXT	ENDS
END
