; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_07MCAEODGB@Default@			; `string'
PUBLIC	??_C@_06PIIHCPLG@Dreamy@			; `string'
PUBLIC	??_C@_05BCAGPPBA@Short@				; `string'
PUBLIC	??_C@_08FBELJDCF@Metallic@			; `string'
PUBLIC	??_C@_06LAKOKBGJ@Wobbly@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_02INCPGIJG@dB@				; `string'
PUBLIC	??_C@_02KLOHGLOJ@Hz@				; `string'
PUBLIC	??_C@_02EEKDFEKL@ms@				; `string'
PUBLIC	??_C@_01FGNFDNOH@?$CF@				; `string'
PUBLIC	??_C@_03INCOKCMB@Wet@				; `string'
PUBLIC	??_C@_05BFFNNFFO@Decay@				; `string'
PUBLIC	??_C@_05PNGBCKKL@Smear@				; `string'
PUBLIC	??_C@_04HIAEEHII@Damp@				; `string'
PUBLIC	??_C@_08DKLMCJHD@LPF?5Freq@			; `string'
PUBLIC	??_C@_08GHFAHIHP@HPF?5Freq@			; `string'
PUBLIC	??_C@_08FPFMMENM@PreDelay@			; `string'
PUBLIC	??_C@_07EMOFNFEJ@ModRate@			; `string'
PUBLIC	??_C@_08BAOBOEBI@ModDepth@			; `string'
PUBLIC	??_C@_06LMOCGFEA@Spread@			; `string'
PUBLIC	??_C@_06PEDEOBLD@Reverb@			; `string'
PUBLIC	??_C@_09KHHOPKD@Fox?5Suite@			; `string'
PUBLIC	??_R2MisEfx@@8					; MisEfx::`RTTI Base Class Array'
PUBLIC	??_R0?AVMisEfx@@@8				; MisEfx `RTTI Type Descriptor'
PUBLIC	??_7MisEfx@@6B@					; MisEfx::`vftable'
PUBLIC	??_R4MisEfx@@6B@				; MisEfx::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@MisEfx@@8				; MisEfx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3MisEfx@@8					; MisEfx::`RTTI Class Hierarchy Descriptor'
EXTRN	__imp_exp:PROC
EXTRN	__imp_log:PROC
EXTRN	__imp_strcpy:PROC
;	COMDAT ??_R3MisEfx@@8
rdata$r	SEGMENT
??_R3MisEfx@@8 DD 00H					; MisEfx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2MisEfx@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MisEfx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MisEfx@@8 DD imagerel ??_R0?AVMisEfx@@@8	; MisEfx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3MisEfx@@8
rdata$r	ENDS
;	COMDAT ??_R4MisEfx@@6B@
rdata$r	SEGMENT
??_R4MisEfx@@6B@ DD 01H					; MisEfx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVMisEfx@@@8
	DD	imagerel ??_R3MisEfx@@8
	DD	imagerel ??_R4MisEfx@@6B@
rdata$r	ENDS
;	COMDAT ??_7MisEfx@@6B@
CONST	SEGMENT
??_7MisEfx@@6B@ DQ FLAT:??_R4MisEfx@@6B@		; MisEfx::`vftable'
	DQ	FLAT:??_EMisEfx@@UEAAPEAXI@Z
	DQ	FLAT:?dispatcher@AudioEffectX@@UEAA_JHH_JPEAXM@Z
	DQ	FLAT:?open@AudioEffect@@UEAAXXZ
	DQ	FLAT:?close@AudioEffect@@UEAAXXZ
	DQ	FLAT:?suspend@AudioEffect@@UEAAXXZ
	DQ	FLAT:?resume@AudioEffectX@@UEAAXXZ
	DQ	FLAT:?setSampleRate@MisEfx@@UEAAXM@Z
	DQ	FLAT:?setBlockSize@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z
	DQ	FLAT:?processDoubleReplacing@AudioEffect@@UEAAXPEAPEAN0H@Z
	DQ	FLAT:?setParameter@MisEfx@@UEAAXHM@Z
	DQ	FLAT:?getParameter@MisEfx@@UEAAMH@Z
	DQ	FLAT:?setParameterAutomated@AudioEffect@@UEAAXHM@Z
	DQ	FLAT:?getProgram@AudioEffect@@UEAAHXZ
	DQ	FLAT:?setProgram@MisEfx@@UEAAXH@Z
	DQ	FLAT:?setProgramName@AudioEffect@@UEAAXPEAD@Z
	DQ	FLAT:?getProgramName@MisEfx@@UEAAXPEAD@Z
	DQ	FLAT:?getParameterLabel@MisEfx@@UEAAXHPEAD@Z
	DQ	FLAT:?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z
	DQ	FLAT:?getParameterName@MisEfx@@UEAAXHPEAD@Z
	DQ	FLAT:?getChunk@AudioEffect@@UEAAHPEAPEAX_N@Z
	DQ	FLAT:?setChunk@AudioEffect@@UEAAHPEAXH_N@Z
	DQ	FLAT:?setUniqueID@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?setNumInputs@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?setNumOutputs@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?canProcessReplacing@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?canDoubleReplacing@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?programsAreChunks@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?setInitialDelay@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?getEditor@AudioEffect@@UEAAPEAVAEffEditor@@XZ
	DQ	FLAT:?getAeffect@AudioEffect@@UEAAPEAUAEffect@@XZ
	DQ	FLAT:?getSampleRate@AudioEffect@@UEAAMXZ
	DQ	FLAT:?getBlockSize@AudioEffect@@UEAAHXZ
	DQ	FLAT:?getMasterVersion@AudioEffect@@UEAAHXZ
	DQ	FLAT:?getCurrentUniqueId@AudioEffect@@UEAAHXZ
	DQ	FLAT:?masterIdle@AudioEffect@@UEAAXXZ
	DQ	FLAT:?dB2string@AudioEffect@@UEAAXMPEADH@Z
	DQ	FLAT:?Hz2string@AudioEffect@@UEAAXMPEADH@Z
	DQ	FLAT:?ms2string@AudioEffect@@UEAAXMPEADH@Z
	DQ	FLAT:?float2string@AudioEffect@@UEAAXMPEADH@Z
	DQ	FLAT:?int2string@AudioEffect@@UEAAXHPEADH@Z
	DQ	FLAT:?__processDeprecated@AudioEffect@@UEAAXPEAPEAM0H@Z
	DQ	FLAT:?__getVuDeprecated@AudioEffect@@UEAAMXZ
	DQ	FLAT:?__hasVuDeprecated@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?__hasClipDeprecated@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?__canMonoDeprecated@AudioEffect@@UEAAX_N@Z
	DQ	FLAT:?__setRealtimeQualitiesDeprecated@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?__setOfflineQualitiesDeprecated@AudioEffect@@UEAAXH@Z
	DQ	FLAT:?__isInputConnectedDeprecated@AudioEffect@@UEAA_NH@Z
	DQ	FLAT:?__isOutputConnectedDeprecated@AudioEffect@@UEAA_NH@Z
	DQ	FLAT:?canParameterBeAutomated@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?string2parameter@AudioEffectX@@UEAA_NHPEAD@Z
	DQ	FLAT:?getParameterProperties@AudioEffectX@@UEAA_NHPEAUVstParameterProperties@@@Z
	DQ	FLAT:?beginEdit@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?endEdit@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z
	DQ	FLAT:?beginSetProgram@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?endSetProgram@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?beginLoadBank@AudioEffectX@@UEAAHPEAUVstPatchChunkInfo@@@Z
	DQ	FLAT:?beginLoadProgram@AudioEffectX@@UEAAHPEAUVstPatchChunkInfo@@@Z
	DQ	FLAT:?ioChanged@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?updateSampleRate@AudioEffectX@@UEAANXZ
	DQ	FLAT:?updateBlockSize@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getInputLatency@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getOutputLatency@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getInputProperties@AudioEffectX@@UEAA_NHPEAUVstPinProperties@@@Z
	DQ	FLAT:?getOutputProperties@AudioEffectX@@UEAA_NHPEAUVstPinProperties@@@Z
	DQ	FLAT:?setSpeakerArrangement@AudioEffectX@@UEAA_NPEAUVstSpeakerArrangement@@0@Z
	DQ	FLAT:?getSpeakerArrangement@AudioEffectX@@UEAA_NPEAPEAUVstSpeakerArrangement@@0@Z
	DQ	FLAT:?setBypass@AudioEffectX@@UEAA_N_N@Z
	DQ	FLAT:?setPanLaw@AudioEffectX@@UEAA_NHM@Z
	DQ	FLAT:?setProcessPrecision@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?getNumMidiInputChannels@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getNumMidiOutputChannels@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getTimeInfo@AudioEffectX@@UEAAPEAUVstTimeInfo@@H@Z
	DQ	FLAT:?getCurrentProcessLevel@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getAutomationState@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?processEvents@AudioEffectX@@UEAAHPEAUVstEvents@@@Z
	DQ	FLAT:?startProcess@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?stopProcess@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?processVariableIo@AudioEffectX@@UEAA_NPEAUVstVariableIo@@@Z
	DQ	FLAT:?setTotalSampleToProcess@AudioEffectX@@UEAAHH@Z
	DQ	FLAT:?getHostVendorString@AudioEffectX@@UEAA_NPEAD@Z
	DQ	FLAT:?getHostProductString@AudioEffectX@@UEAA_NPEAD@Z
	DQ	FLAT:?getHostVendorVersion@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?hostVendorSpecific@AudioEffectX@@UEAA_JH_JPEAXM@Z
	DQ	FLAT:?canHostDo@AudioEffectX@@UEAAHPEAD@Z
	DQ	FLAT:?getHostLanguage@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?isSynth@AudioEffectX@@UEAAX_N@Z
	DQ	FLAT:?noTail@AudioEffectX@@UEAAX_N@Z
	DQ	FLAT:?getGetTailSize@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getDirectory@AudioEffectX@@UEAAPEAXXZ
	DQ	FLAT:?getEffectName@MisEfx@@UEAA_NPEAD@Z
	DQ	FLAT:?getVendorString@MisEfx@@UEAA_NPEAD@Z
	DQ	FLAT:?getProductString@AudioEffectX@@UEAA_NPEAD@Z
	DQ	FLAT:?getVendorVersion@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?vendorSpecific@AudioEffectX@@UEAA_JH_JPEAXM@Z
	DQ	FLAT:?canDo@AudioEffectX@@UEAAHPEAD@Z
	DQ	FLAT:?getVstVersion@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?getPlugCategory@AudioEffectX@@UEAA?AW4VstPlugCategory@@XZ
	DQ	FLAT:?getMidiProgramName@AudioEffectX@@UEAAHHPEAUMidiProgramName@@@Z
	DQ	FLAT:?getCurrentMidiProgram@AudioEffectX@@UEAAHHPEAUMidiProgramName@@@Z
	DQ	FLAT:?getMidiProgramCategory@AudioEffectX@@UEAAHHPEAUMidiProgramCategory@@@Z
	DQ	FLAT:?hasMidiProgramsChanged@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?getMidiKeyName@AudioEffectX@@UEAA_NHPEAUMidiKeyName@@@Z
	DQ	FLAT:?updateDisplay@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?sizeWindow@AudioEffectX@@UEAA_NHH@Z
	DQ	FLAT:?openFileSelector@AudioEffectX@@UEAA_NPEAUVstFileSelect@@@Z
	DQ	FLAT:?closeFileSelector@AudioEffectX@@UEAA_NPEAUVstFileSelect@@@Z
	DQ	FLAT:?getNextShellPlugin@AudioEffectX@@UEAAHPEAD@Z
	DQ	FLAT:?allocateArrangement@AudioEffectX@@UEAA_NPEAPEAUVstSpeakerArrangement@@H@Z
	DQ	FLAT:?deallocateArrangement@AudioEffectX@@UEAA_NPEAPEAUVstSpeakerArrangement@@@Z
	DQ	FLAT:?copySpeaker@AudioEffectX@@UEAA_NPEAUVstSpeakerProperties@@0@Z
	DQ	FLAT:?matchArrangement@AudioEffectX@@UEAA_NPEAPEAUVstSpeakerArrangement@@PEAU2@@Z
	DQ	FLAT:?offlineRead@AudioEffectX@@UEAA_NPEAUVstOfflineTask@@W4VstOfflineOption@@_N@Z
	DQ	FLAT:?offlineWrite@AudioEffectX@@UEAA_NPEAUVstOfflineTask@@W4VstOfflineOption@@@Z
	DQ	FLAT:?offlineStart@AudioEffectX@@UEAA_NPEAUVstAudioFile@@HH@Z
	DQ	FLAT:?offlineGetCurrentPass@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?offlineGetCurrentMetaPass@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?offlineNotify@AudioEffectX@@UEAA_NPEAUVstAudioFile@@H_N@Z
	DQ	FLAT:?offlinePrepare@AudioEffectX@@UEAA_NPEAUVstOfflineTask@@H@Z
	DQ	FLAT:?offlineRun@AudioEffectX@@UEAA_NPEAUVstOfflineTask@@H@Z
	DQ	FLAT:?offlineGetNumPasses@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?offlineGetNumMetaPasses@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__wantEventsDeprecated@AudioEffectX@@UEAAXH@Z
	DQ	FLAT:?__tempoAtDeprecated@AudioEffectX@@UEAAHH@Z
	DQ	FLAT:?__getNumAutomatableParametersDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__getParameterQuantizationDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__getNumCategoriesDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__copyProgramDeprecated@AudioEffectX@@UEAA_NH@Z
	DQ	FLAT:?__needIdleDeprecated@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?__getPreviousPlugDeprecated@AudioEffectX@@UEAAPEAUAEffect@@H@Z
	DQ	FLAT:?__getNextPlugDeprecated@AudioEffectX@@UEAAPEAUAEffect@@H@Z
	DQ	FLAT:?__inputConnectedDeprecated@AudioEffectX@@UEAAXH_N@Z
	DQ	FLAT:?__outputConnectedDeprecated@AudioEffectX@@UEAAXH_N@Z
	DQ	FLAT:?__willProcessReplacingDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__wantAsyncOperationDeprecated@AudioEffectX@@UEAAX_N@Z
	DQ	FLAT:?__hasExternalBufferDeprecated@AudioEffectX@@UEAAX_N@Z
	DQ	FLAT:?__reportCurrentPositionDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__reportDestinationBufferDeprecated@AudioEffectX@@UEAAPEAMXZ
	DQ	FLAT:?__setOutputSamplerateDeprecated@AudioEffectX@@UEAAXM@Z
	DQ	FLAT:?__getInputSpeakerArrangementDeprecated@AudioEffectX@@UEAAPEAUVstSpeakerArrangement@@XZ
	DQ	FLAT:?__getOutputSpeakerArrangementDeprecated@AudioEffectX@@UEAAPEAUVstSpeakerArrangement@@XZ
	DQ	FLAT:?__openWindowDeprecated@AudioEffectX@@UEAAPEAXPEAU__VstWindowDeprecated@@@Z
	DQ	FLAT:?__closeWindowDeprecated@AudioEffectX@@UEAA_NPEAU__VstWindowDeprecated@@@Z
	DQ	FLAT:?__setBlockSizeAndSampleRateDeprecated@AudioEffectX@@UEAAXHM@Z
	DQ	FLAT:?__getErrorTextDeprecated@AudioEffectX@@UEAA_NPEAD@Z
	DQ	FLAT:?__getIconDeprecated@AudioEffectX@@UEAAPEAXXZ
	DQ	FLAT:?__setViewPositionDeprecated@AudioEffectX@@UEAA_NHH@Z
	DQ	FLAT:?__fxIdleDeprecated@AudioEffectX@@UEAAHXZ
	DQ	FLAT:?__keysRequiredDeprecated@AudioEffectX@@UEAA_NXZ
	DQ	FLAT:?__getChunkFileDeprecated@AudioEffectX@@UEAA_NPEAX@Z
CONST	ENDS
;	COMDAT ??_R0?AVMisEfx@@@8
data$rs	SEGMENT
??_R0?AVMisEfx@@@8 DQ FLAT:??_7type_info@@6B@		; MisEfx `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVMisEfx@@', 00H
data$rs	ENDS
;	COMDAT ??_R2MisEfx@@8
rdata$r	SEGMENT
??_R2MisEfx@@8 DD imagerel ??_R1A@?0A@EA@MisEfx@@8	; MisEfx::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AudioEffectX@@8
	DD	imagerel ??_R1A@?0A@EA@AudioEffect@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_C@_09KHHOPKD@Fox?5Suite@
CONST	SEGMENT
??_C@_09KHHOPKD@Fox?5Suite@ DB 'Fox Suite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEDEOBLD@Reverb@
CONST	SEGMENT
??_C@_06PEDEOBLD@Reverb@ DB 'Reverb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMOCGFEA@Spread@
CONST	SEGMENT
??_C@_06LMOCGFEA@Spread@ DB 'Spread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BAOBOEBI@ModDepth@
CONST	SEGMENT
??_C@_08BAOBOEBI@ModDepth@ DB 'ModDepth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMOFNFEJ@ModRate@
CONST	SEGMENT
??_C@_07EMOFNFEJ@ModRate@ DB 'ModRate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FPFMMENM@PreDelay@
CONST	SEGMENT
??_C@_08FPFMMENM@PreDelay@ DB 'PreDelay', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHFAHIHP@HPF?5Freq@
CONST	SEGMENT
??_C@_08GHFAHIHP@HPF?5Freq@ DB 'HPF Freq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKLMCJHD@LPF?5Freq@
CONST	SEGMENT
??_C@_08DKLMCJHD@LPF?5Freq@ DB 'LPF Freq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIAEEHII@Damp@
CONST	SEGMENT
??_C@_04HIAEEHII@Damp@ DB 'Damp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNGBCKKL@Smear@
CONST	SEGMENT
??_C@_05PNGBCKKL@Smear@ DB 'Smear', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFFNNFFO@Decay@
CONST	SEGMENT
??_C@_05BFFNNFFO@Decay@ DB 'Decay', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03INCOKCMB@Wet@
CONST	SEGMENT
??_C@_03INCOKCMB@Wet@ DB 'Wet', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FGNFDNOH@?$CF@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDFEKL@ms@
CONST	SEGMENT
??_C@_02EEKDFEKL@ms@ DB 'ms', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KLOHGLOJ@Hz@
CONST	SEGMENT
??_C@_02KLOHGLOJ@Hz@ DB 'Hz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02INCPGIJG@dB@
CONST	SEGMENT
??_C@_02INCPGIJG@dB@ DB 'dB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAKOKBGJ@Wobbly@
CONST	SEGMENT
??_C@_06LAKOKBGJ@Wobbly@ DB 'Wobbly', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBELJDCF@Metallic@
CONST	SEGMENT
??_C@_08FBELJDCF@Metallic@ DB 'Metallic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BCAGPPBA@Short@
CONST	SEGMENT
??_C@_05BCAGPPBA@Short@ DB 'Short', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIIHCPLG@Dreamy@
CONST	SEGMENT
??_C@_06PIIHCPLG@Dreamy@ DB 'Dreamy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCAEODGB@Default@
CONST	SEGMENT
??_C@_07MCAEODGB@Default@ DB 'Default', 00H		; `string'
PUBLIC	??_GTremolo@@QEAAPEAXI@Z			; Tremolo::`scalar deleting destructor'
PUBLIC	??_GHPFButterworth@@QEAAPEAXI@Z			; HPFButterworth::`scalar deleting destructor'
PUBLIC	??_GFreeverb@@QEAAPEAXI@Z			; Freeverb::`scalar deleting destructor'
PUBLIC	??1MisEfx@@UEAA@XZ				; MisEfx::~MisEfx
PUBLIC	?getVendorString@MisEfx@@UEAA_NPEAD@Z		; MisEfx::getVendorString
PUBLIC	?getEffectName@MisEfx@@UEAA_NPEAD@Z		; MisEfx::getEffectName
PUBLIC	?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z	; MisEfx::getProgramNameIndexed
PUBLIC	?getProgramName@MisEfx@@UEAAXPEAD@Z		; MisEfx::getProgramName
PUBLIC	?setProgram@MisEfx@@UEAAXH@Z			; MisEfx::setProgram
PUBLIC	?getParameterName@MisEfx@@UEAAXHPEAD@Z		; MisEfx::getParameterName
PUBLIC	?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z	; MisEfx::getParameterDisplay
PUBLIC	?getParameterLabel@MisEfx@@UEAAXHPEAD@Z		; MisEfx::getParameterLabel
PUBLIC	?getParameter@MisEfx@@UEAAMH@Z			; MisEfx::getParameter
PUBLIC	?setParameter@MisEfx@@UEAAXHM@Z			; MisEfx::setParameter
PUBLIC	?mapValueOutsideRange@MisEfx@@AEAAMMMM@Z	; MisEfx::mapValueOutsideRange
PUBLIC	?mapValueIntoRange@MisEfx@@AEAAMMMM@Z		; MisEfx::mapValueIntoRange
PUBLIC	?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z	; MisEfx::processReplacing
PUBLIC	?InitPresets@MisEfx@@AEAAXXZ			; MisEfx::InitPresets
PUBLIC	?setSampleRate@MisEfx@@UEAAXM@Z			; MisEfx::setSampleRate
PUBLIC	?InitPlugin@MisEfx@@AEAAXXZ			; MisEfx::InitPlugin
PUBLIC	??_GMisEfx@@UEAAPEAXI@Z				; MisEfx::`scalar deleting destructor'
PUBLIC	??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z	; MisEfx::MisEfx
PUBLIC	?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z ; createEffectInstance
EXTRN	??_EMisEfx@@UEAAPEAXI@Z:PROC			; MisEfx::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GTremolo@@QEAAPEAXI@Z DD imagerel $LN11
	DD	imagerel $LN11+37
	DD	imagerel $unwind$??_GTremolo@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GFreeverb@@QEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+23
	DD	imagerel $unwind$??_GFreeverb@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1MisEfx@@UEAA@XZ DD imagerel $LN25
	DD	imagerel $LN25+104
	DD	imagerel $unwind$??1MisEfx@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getVendorString@MisEfx@@UEAA_NPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+43
	DD	imagerel $unwind$?getVendorString@MisEfx@@UEAA_NPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getEffectName@MisEfx@@UEAA_NPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+43
	DD	imagerel $unwind$?getEffectName@MisEfx@@UEAA_NPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setProgram@MisEfx@@UEAAXH@Z DD imagerel $LN10
	DD	imagerel $LN10+364
	DD	imagerel $unwind$?setProgram@MisEfx@@UEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getParameterName@MisEfx@@UEAAXHPEAD@Z DD imagerel $LN39
	DD	imagerel $LN39+173
	DD	imagerel $unwind$?getParameterName@MisEfx@@UEAAXHPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z DD imagerel $LN20
	DD	imagerel $LN20+193
	DD	imagerel $unwind$?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getParameterLabel@MisEfx@@UEAAXHPEAD@Z DD imagerel $LN39
	DD	imagerel $LN39+154
	DD	imagerel $unwind$?getParameterLabel@MisEfx@@UEAAXHPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getParameter@MisEfx@@UEAAMH@Z DD imagerel $LN25
	DD	imagerel $LN25+292
	DD	imagerel $unwind$?getParameter@MisEfx@@UEAAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setParameter@MisEfx@@UEAAXHM@Z DD imagerel $LN55
	DD	imagerel $LN55+739
	DD	imagerel $unwind$?setParameter@MisEfx@@UEAAXHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z DD imagerel $LN12
	DD	imagerel $LN12+288
	DD	imagerel $unwind$?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InitPresets@MisEfx@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+1022
	DD	imagerel $unwind$?InitPresets@MisEfx@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSampleRate@MisEfx@@UEAAXM@Z DD imagerel $LN31
	DD	imagerel $LN31+325
	DD	imagerel $unwind$?setSampleRate@MisEfx@@UEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InitPlugin@MisEfx@@AEAAXXZ DD imagerel $LN34
	DD	imagerel $LN34+576
	DD	imagerel $unwind$?InitPlugin@MisEfx@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA DD imagerel ?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA+32
	DD	imagerel $unwind$?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA DD imagerel ?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
	DD	imagerel ?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA+32
	DD	imagerel $unwind$?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GMisEfx@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+52
	DD	imagerel $unwind$??_GMisEfx@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DD imagerel $LN14
	DD	imagerel $LN14+396
	DD	imagerel $unwind$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DD imagerel $LN8
	DD	imagerel $LN8+42
	DD	imagerel $unwind$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA DD imagerel ?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA
	DD	imagerel ?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 04H
	DB	01cH
	DB	00H
	DB	' '
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 028H
	DD	imagerel $stateUnwindMap$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
	DD	imagerel $ip2state$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DD 020611H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 02H
	DB	0e1H, 05H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 02H
	DB	0cH
	DD	imagerel ??1AudioEffectX@@UEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DB 028H
	DD	imagerel $stateUnwindMap$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
	DD	imagerel $ip2state$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GMisEfx@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?InitPlugin@MisEfx@@AEAAXXZ DB 0aH
	DB	'>'
	DB	00H
	DB	'N'
	DB	02H
	DB	012H
	DB	00H
	DB	091H, 04H
	DB	04H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?InitPlugin@MisEfx@@AEAAXXZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
	DB	036H
	DD	imagerel ?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?InitPlugin@MisEfx@@AEAAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?InitPlugin@MisEfx@@AEAAXXZ
	DD	imagerel $ip2state$?InitPlugin@MisEfx@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InitPlugin@MisEfx@@AEAAXXZ DD 0c1c11H
	DD	04781cH
	DD	056818H
	DD	0126414H
	DD	0113414H
	DD	0f010b214H
	DD	0700ce00eH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?InitPlugin@MisEfx@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSampleRate@MisEfx@@UEAAXM@Z DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InitPresets@MisEfx@@AEAAXXZ DD 040a01H
	DD	06340aH
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z DD 0c3d01H
	DD	02783dH
	DD	036835H
	DD	0e3419H
	DD	0f0157219H
	DD	07011e013H
	DD	0500f6010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setParameter@MisEfx@@UEAAXHM@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getParameter@MisEfx@@UEAAMH@Z DD 051101H
	DD	027811H
	DD	036809H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getParameterLabel@MisEfx@@UEAAXHPEAD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getParameterName@MisEfx@@UEAAXHPEAD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setProgram@MisEfx@@UEAAXH@Z DD 082d01H
	DD	02782dH
	DD	036828H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getEffectName@MisEfx@@UEAA_NPEAD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getVendorString@MisEfx@@UEAA_NPEAD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1MisEfx@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GFreeverb@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GTremolo@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
_TEXT	SEGMENT
audioMaster$ = 48
$T1 = 56
?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z PROC ; createEffectInstance, COMDAT

; 43   : {

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 44   :     return new MisEfx(audioMaster);

	mov	ecx, 344				; 00000158H
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rdx, rbx
	mov	rcx, rax
	call	??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z ; MisEfx::MisEfx
	npad	1

; 45   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z ENDP ; createEffectInstance
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
audioMaster$ = 48
$T1 = 56
?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA PROC ; `createEffectInstance'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 344				; 00000158H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA ENDP ; `createEffectInstance'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
audioMaster$ = 48
$T1 = 56
?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA PROC ; `createEffectInstance'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 344				; 00000158H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??createEffectInstance@@YAPEAVAudioEffect@@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA ENDP ; `createEffectInstance'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z
_TEXT	SEGMENT
this$ = 48
audioMaster$ = 56
??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z PROC	; MisEfx::MisEfx, COMDAT

; 33   : {

$LN14:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp

; 107  : {

	lea	rax, OFFSET FLAT:??_7AudioEffect@@6B@
	mov	QWORD PTR [rcx], rax

; 100  : : audioMaster (audioMaster)

	mov	QWORD PTR [rcx+8], rdx

; 101  : , editor (0)

	and	QWORD PTR [rcx+16], 0

; 102  : , sampleRate (44100.f)

	mov	DWORD PTR [rcx+24], 1194083328		; 472c4400H

; 103  : , blockSize (1024)

	mov	DWORD PTR [rcx+28], 1024		; 00000400H

; 104  : , numPrograms (numPrograms)

	mov	DWORD PTR [rcx+32], 5

; 105  : , numParams (numParams)

	mov	DWORD PTR [rcx+36], 10

; 106  : , curProgram (0)

	and	DWORD PTR [rcx+40], 0

; 108  : 	memset (&cEffect, 0, sizeof (cEffect));

	xor	edx, edx
	mov	r8d, 192				; 000000c0H
	add	rcx, 48					; 00000030H
	call	QWORD PTR __imp_memset

; 109  : 
; 110  : 	cEffect.magic = kEffectMagic;

	mov	DWORD PTR [rdi+48], 1450406992		; 56737450H

; 111  : 	cEffect.dispatcher = dispatchEffectClass;

	lea	rax, OFFSET FLAT:?dispatchEffectClass@AudioEffect@@KA_JPEAUAEffect@@HH_JPEAXM@Z ; AudioEffect::dispatchEffectClass
	mov	QWORD PTR [rdi+56], rax

; 112  : 	cEffect.DECLARE_VST_DEPRECATED (process) = DECLARE_VST_DEPRECATED (processClass);

	lea	rax, OFFSET FLAT:?__processClassDeprecated@AudioEffect@@KAXPEAUAEffect@@PEAPEAM1H@Z ; AudioEffect::__processClassDeprecated
	mov	QWORD PTR [rdi+64], rax

; 113  : 	cEffect.setParameter = setParameterClass;

	lea	rax, OFFSET FLAT:?setParameterClass@AudioEffect@@KAXPEAUAEffect@@HM@Z ; AudioEffect::setParameterClass
	mov	QWORD PTR [rdi+72], rax

; 114  : 	cEffect.getParameter = getParameterClass;

	lea	rax, OFFSET FLAT:?getParameterClass@AudioEffect@@KAMPEAUAEffect@@H@Z ; AudioEffect::getParameterClass
	mov	QWORD PTR [rdi+80], rax

; 115  : 	cEffect.numPrograms  = numPrograms;

	mov	DWORD PTR [rdi+88], 5

; 116  : 	cEffect.numParams    = numParams;

	mov	DWORD PTR [rdi+92], 10

; 117  : 	cEffect.numInputs  = 1;		// mono input

	mov	eax, 1
	mov	DWORD PTR [rdi+96], eax

; 118  : 	cEffect.numOutputs = 2;		// stereo output

	lea	ebx, QWORD PTR [rax+1]
	mov	DWORD PTR [rdi+100], ebx

; 119  : 	cEffect.DECLARE_VST_DEPRECATED (ioRatio) = 1.f;

	mov	DWORD PTR [rdi+140], 1065353216		; 3f800000H

; 120  : 	cEffect.object = this;

	mov	QWORD PTR [rdi+144], rdi

; 121  : 	cEffect.uniqueID = CCONST ('N', 'o', 'E', 'f');

	mov	DWORD PTR [rdi+160], 1315915110		; 4e6f4566H

; 122  : 	cEffect.version  = 1;

	mov	DWORD PTR [rdi+164], eax

; 123  : 	cEffect.processReplacing = processClassReplacing;

	lea	rax, OFFSET FLAT:?processClassReplacing@AudioEffect@@KAXPEAUAEffect@@PEAPEAM1H@Z ; AudioEffect::processClassReplacing
	mov	QWORD PTR [rdi+168], rax

; 309  : 		cEffect.flags |= effFlagsCanReplacing;

	or	DWORD PTR [rdi+104], 16

; 127  : 	cEffect.processDoubleReplacing = processClassDoubleReplacing;

	lea	rax, OFFSET FLAT:?processClassDoubleReplacing@AudioEffect@@KAXPEAUAEffect@@PEAPEAN1H@Z ; AudioEffect::processClassDoubleReplacing
	mov	QWORD PTR [rdi+176], rax
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 33   : {

	lea	rax, OFFSET FLAT:??_7MisEfx@@6B@
	mov	QWORD PTR [rdi], rax
; File E:\FoxSuite\misefx\MisEfx\MisEfx.h

; 61   : 	const float MAX_LPF_FREQUENCY_LOG = log(MAX_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d28e0000000000
	call	QWORD PTR __imp_log
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rdi+240], xmm1

; 62   : 	const float MIN_LPF_FREQUENCY_LOG = log(MIN_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	call	QWORD PTR __imp_log
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rdi+244], xmm1

; 63   : 	const float MAX_HPF_FREQUENCY_LOG = log(MAX_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d09a0000000000
	call	QWORD PTR __imp_log
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rdi+248], xmm1

; 64   : 	const float MIN_HPF_FREQUENCY_LOG = log(MIN_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	call	QWORD PTR __imp_log
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rdi+252], xmm1
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 34   :     setNumInputs(2);		// stereo in

	mov	DWORD PTR [rdi+96], ebx

; 35   :     setNumOutputs(2);		// stereo out

	mov	DWORD PTR [rdi+100], ebx

; 36   :     setUniqueID('vMis');	// identify    

	mov	DWORD PTR [rdi+160], 1984784755		; 764d6973H

; 37   :     InitPlugin();

	mov	rcx, rdi
	call	?InitPlugin@MisEfx@@AEAAXXZ		; MisEfx::InitPlugin
	npad	1

; 38   : }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z ENDP	; MisEfx::MisEfx
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
audioMaster$ = 56
?dtor$0@?0???0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA PROC ; `MisEfx::MisEfx'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1AudioEffectX@@UEAA@XZ
?dtor$0@?0???0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA ENDP ; `MisEfx::MisEfx'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
audioMaster$ = 56
?dtor$0@?0???0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA PROC ; `MisEfx::MisEfx'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1AudioEffectX@@UEAA@XZ
?dtor$0@?0???0MisEfx@@QEAA@P6A_JPEAUAEffect@@HH_JPEAXM@Z@Z@4HA ENDP ; `MisEfx::MisEfx'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_GMisEfx@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GMisEfx@@UEAAPEAXI@Z PROC				; MisEfx::`scalar deleting destructor', COMDAT
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, rcx
	call	??1MisEfx@@UEAA@XZ			; MisEfx::~MisEfx
	test	bl, 1
	je	SHORT $LN2@scalar
	mov	edx, 344				; 00000158H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GMisEfx@@UEAAPEAXI@Z ENDP				; MisEfx::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?InitPlugin@MisEfx@@AEAAXXZ
_TEXT	SEGMENT
$T8 = 128
$T7 = 128
$T5 = 128
$T3 = 128
$T1 = 128
this$ = 128
?InitPlugin@MisEfx@@AEAAXXZ PROC			; MisEfx::InitPlugin, COMDAT

; 51   : {

$LN34:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H
	movaps	XMMWORD PTR [rax-40], xmm6
	movaps	XMMWORD PTR [rax-56], xmm7
	mov	r14, rcx

; 52   :     /*.......................................*/
; 53   :     // initialize reverb plug-in parameters
; 54   :     InitPresets();

	call	?InitPresets@MisEfx@@AEAAXXZ		; MisEfx::InitPresets

; 55   : 
; 56   :     // get current sample rate
; 57   :     int currSampleRate = getSampleRate();

	mov	rax, QWORD PTR [r14]
	mov	rcx, r14
	call	QWORD PTR [rax+248]
	cvttss2si esi, xmm0

; 58   : 
; 59   :     /*.......................................*/
; 60   :     // init Reverb
; 61   :     Reverb = new Freeverb();

	mov	ecx, 208				; 000000d0H
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, rax
	call	??0Freeverb@@QEAA@XZ			; Freeverb::Freeverb
	npad	1
	mov	QWORD PTR [r14+304], rax

; 62   :     Reverb->init(currSampleRate, rev_wet, rev_decay, rev_damping, rev_smearing, rev_spread, rev_preDelay);

	movss	xmm0, DWORD PTR [r14+288]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm1, DWORD PTR [r14+300]
	movss	DWORD PTR [rsp+48], xmm1
	movss	xmm0, DWORD PTR [r14+268]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm1, DWORD PTR [r14+276]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR [r14+272]
	movss	xmm2, DWORD PTR [r14+264]
	mov	edx, esi
	mov	rcx, rax
	call	?init@Freeverb@@QEAAXHMMMMMM@Z		; Freeverb::init

; 66   :     outputLPF = new LPFButterworth;

	mov	ebx, 56					; 00000038H
	mov	ecx, ebx
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T3[rsp], rax
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp

; 6    : LPFButterworth::LPFButterworth() {

	lea	rcx, OFFSET FLAT:??_7LPFButterworth@@6B@
	mov	QWORD PTR [rax], rcx

; 7    : 	lpf_a0 = 0.0;

	xor	r15d, r15d
	mov	QWORD PTR [rax+16], r15

; 8    : 	lpf_a1 = 0.0;
; 9    : 	lpf_a2 = 0.0;

	mov	QWORD PTR [rax+24], r15

; 10   : 	lpf_b1 = 0.0;
; 11   : 	lpf_b2 = 0.0;

	mov	QWORD PTR [rax+32], r15

; 12   : 	lpf_cutoffFreq = 0.0;

	mov	DWORD PTR [rax+8], r15d

; 13   : 	lpf_xn_1 = 0.0;
; 14   : 	lpf_xn_2 = 0.0;

	mov	QWORD PTR [rax+40], r15

; 15   : 	lpf_yn_1 = 0.0;
; 16   : 	lpf_yn_2 = 0.0;

	mov	DWORD PTR [rax+48], r15d
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 66   :     outputLPF = new LPFButterworth;

	mov	QWORD PTR [r14+320], rax

; 67   :     outputLPF->init(currSampleRate);

	mov	DWORD PTR [rax+12], esi

; 68   :     outputLPF->setCutoffFrequency(rev_lpfFreq);

	movss	xmm0, DWORD PTR [r14+280]
	mov	rcx, QWORD PTR [r14+320]
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp

; 40   : 	lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm0

; 41   : 
; 42   : 	// update lpf gains
; 43   : 	updateGains();

	call	?updateGains@LPFButterworth@@QEAAXXZ	; LPFButterworth::updateGains
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 72   :     outputHPF = new HPFButterworth;

	mov	ecx, ebx
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T5[rsp], rax
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 6    : HPFButterworth::HPFButterworth() {

	lea	rcx, OFFSET FLAT:??_7HPFButterworth@@6B@
	mov	QWORD PTR [rax], rcx

; 7    : 	hpf_a0 = 0.0;

	mov	QWORD PTR [rax+16], r15

; 8    : 	hpf_a1 = 0.0;
; 9    : 	hpf_a2 = 0.0;

	mov	QWORD PTR [rax+24], r15

; 10   : 	hpf_b1 = 0.0;
; 11   : 	hpf_b2 = 0.0;

	mov	QWORD PTR [rax+32], r15

; 12   : 	hpf_cutoffFreq = 0.0;

	mov	DWORD PTR [rax+8], r15d

; 13   : 	hpf_xn_1 = 0.0;
; 14   : 	hpf_xn_2 = 0.0;

	mov	QWORD PTR [rax+40], r15

; 15   : 	hpf_yn_1 = 0.0;
; 16   : 	hpf_yn_2 = 0.0;

	mov	DWORD PTR [rax+48], r15d
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 72   :     outputHPF = new HPFButterworth;

	mov	QWORD PTR [r14+328], rax

; 73   :     outputHPF->init(currSampleRate);

	mov	DWORD PTR [rax+12], esi

; 74   :     outputHPF->setCutoffFrequency(rev_hpfFreq);

	movss	xmm0, DWORD PTR [r14+284]
	mov	rcx, QWORD PTR [r14+328]
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 40   : 	hpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm0

; 41   : 
; 42   : 	// update hpf gains
; 43   : 	updateGains();

	call	?updateGains@HPFButterworth@@QEAAXXZ	; HPFButterworth::updateGains
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 84   :     tremolo = new Tremolo;

	lea	ecx, QWORD PTR [rbx-24]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax
	mov	QWORD PTR $T7[rsp], rax
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 4    : Tremolo::Tremolo() {	

	lea	rax, OFFSET FLAT:??_7Tremolo@@6B@
	mov	QWORD PTR [rdi], rax

; 7    : 	trem_LFOOscillator = new LFO();

	lea	ecx, QWORD PTR [rbx+16]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T8[rsp], rax
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp

; 9    : {

	lea	rax, OFFSET FLAT:??_7LFO@@6B@
	mov	QWORD PTR [rbx], rax

; 10   : 	lfo_counter = 0;

	mov	QWORD PTR [rbx+24], r15

; 11   : 	lfo_sampleRate = 44100;	

	mov	DWORD PTR [rbx+12], 44100		; 0000ac44H

; 12   : 	lfo_frequency = 0.0;

	mov	DWORD PTR [rbx+8], r15d

; 13   : 	lfo_amplitude = 1.0;

	mov	DWORD PTR [rbx+16], 1065353216		; 3f800000H

; 14   : 	lfo_inc = 0.0;
; 15   : 	lfo_waveform = OscillatorType::Sine;

	mov	DWORD PTR [rbx+20], 1

; 16   : 	lfo_unipolar = false;

	mov	BYTE PTR [rbx+64], r15b

; 17   : 	createWavetables();

	mov	rcx, rbx
	call	?createWavetables@LFO@@QEAAXXZ		; LFO::createWavetables
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 7    : 	trem_LFOOscillator = new LFO();

	mov	QWORD PTR [rdi+24], rbx
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 84   :     tremolo = new Tremolo;

	mov	QWORD PTR [r14+336], rdi

; 85   :     modWaveform = OscillatorType::Sine;

	mov	DWORD PTR [r14+312], 1

; 86   :     tremolo->init(currSampleRate, modWaveform, rev_modRate, rev_modDepth);

	movss	xmm6, DWORD PTR [r14+296]
	movss	xmm7, DWORD PTR [r14+292]
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 18   : 	trem_LFOOscillator->init(waveform, LFOFrequency, sampleRate);

	mov	rcx, QWORD PTR [rdi+24]
	mov	rax, QWORD PTR [rcx]
	mov	r9d, esi
	movaps	xmm2, xmm7
	lea	edx, QWORD PTR [r15+1]
	call	QWORD PTR [rax]

; 19   : 	
; 20   : 	// Set LFO amplitude	
; 21   : 	trem_LFOOscillator->setLFOAmplitude(LFOAmplitude);

	mov	rax, QWORD PTR [rdi+24]
	movss	DWORD PTR [rax+16], xmm6

; 22   : 
; 23   : 	// Set LFO unipolar
; 24   : 	trem_LFOOscillator->setLFOunipolar(true);

	mov	rax, QWORD PTR [rdi+24]
	mov	BYTE PTR [rax+64], 1

; 25   : 
; 26   : 	// update tremolo parameters
; 27   : 	trem_modDepth = LFOAmplitude;

	movss	DWORD PTR [rdi+12], xmm6

; 28   : 	trem_modRateHz = LFOFrequency;

	movss	DWORD PTR [rdi+8], xmm7

; 29   : 	trem_modWave = waveform;

	mov	DWORD PTR [rdi+16], 1
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 87   : }

	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm6, XMMWORD PTR [rsp+80]
	movaps	xmm7, XMMWORD PTR [rsp+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?InitPlugin@MisEfx@@AEAAXXZ ENDP			; MisEfx::InitPlugin
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T8 = 128
$T7 = 128
$T5 = 128
$T3 = 128
$T1 = 128
this$ = 128
?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA PROC		; `MisEfx::InitPlugin'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 208				; 000000d0H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA ENDP		; `MisEfx::InitPlugin'::`1'::dtor$0
$T8 = 128
$T7 = 128
$T5 = 128
$T3 = 128
$T1 = 128
this$ = 128
?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA PROC		; `MisEfx::InitPlugin'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA ENDP		; `MisEfx::InitPlugin'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 128
$T7 = 128
$T5 = 128
$T3 = 128
$T1 = 128
this$ = 128
?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA PROC		; `MisEfx::InitPlugin'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 208				; 000000d0H
	mov	rcx, QWORD PTR $T1[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA ENDP		; `MisEfx::InitPlugin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T8 = 128
$T7 = 128
$T5 = 128
$T3 = 128
$T1 = 128
this$ = 128
?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA PROC		; `MisEfx::InitPlugin'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0??InitPlugin@MisEfx@@AEAAXXZ@4HA ENDP		; `MisEfx::InitPlugin'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?setSampleRate@MisEfx@@UEAAXM@Z
_TEXT	SEGMENT
this$ = 80
sampleRate$ = 88
?setSampleRate@MisEfx@@UEAAXM@Z PROC			; MisEfx::setSampleRate, COMDAT

; 93   : {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 96   : 
; 97   :     // Call setSampleRate on every needed module
; 98   :     Reverb->setSampleRate(sampleRate);

	mov	rbp, QWORD PTR [rcx+304]
	mov	rsi, rcx
	movss	DWORD PTR [rcx+24], xmm1
	cvttss2si ebx, xmm1
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 148  :     preDelayModule->setSampleRate(sampleRate);

	mov	rcx, QWORD PTR [rbp+40]
	mov	rax, QWORD PTR [rcx]
	mov	edx, ebx
	call	QWORD PTR [rax+8]
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 95   :     AudioEffect::setSampleRate(sampleRate);

	xor	edi, edi
	mov	r14d, edi
	mov	r15d, edi
	lea	r12d, QWORD PTR [rdi+8]
$LL6@setSampleR:
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 151  :         combFiltersL[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+48]
	mov	edx, ebx
	mov	r8, QWORD PTR [r14+rax]
	lea	rcx, QWORD PTR [r15+rax]
	call	QWORD PTR [r8+8]

; 152  :         combFiltersR[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+56]
	mov	edx, ebx
	mov	r8, QWORD PTR [r14+rax]
	lea	rcx, QWORD PTR [r15+rax]
	call	QWORD PTR [r8+8]
	lea	r15, QWORD PTR [r15+88]
	lea	r14, QWORD PTR [r14+88]
	sub	r12, 1
	jne	SHORT $LL6@setSampleR

; 153  :     }
; 154  : 
; 155  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	r15d, 3
	mov	r14, rdi
	mov	r13d, r15d
	mov	r12, rdi
$LL9@setSampleR:

; 156  :         apFiltersL_input[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+128]
	mov	edx, ebx
	mov	r8, QWORD PTR [r14+rax]
	lea	rcx, QWORD PTR [r12+rax]
	call	QWORD PTR [r8+8]

; 157  :         apFiltersR_input[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+136]
	mov	edx, ebx
	mov	r8, QWORD PTR [r14+rax]
	lea	rcx, QWORD PTR [r12+rax]
	call	QWORD PTR [r8+8]
	lea	r12, QWORD PTR [r12+64]
	lea	r14, QWORD PTR [r14+64]
	sub	r13, 1
	jne	SHORT $LL9@setSampleR

; 158  :     }
; 159  : 
; 160  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	r14, rdi
$LL12@setSampleR:

; 161  :         apFiltersL_output[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+144]
	mov	edx, ebx
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [r8+8]

; 162  :         apFiltersR_output[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+152]
	mov	edx, ebx
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [r8+8]
	lea	r14, QWORD PTR [r14+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r15, 1
	jne	SHORT $LL12@setSampleR
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 99   :     tremolo->setSampleRate(sampleRate);

	mov	rcx, QWORD PTR [rsi+336]
	mov	edx, ebx
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]

; 100  :     outputLPF->setSampleRate(sampleRate);

	mov	rcx, QWORD PTR [rsi+320]
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp

; 30   : 	lpf_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], ebx

; 31   : 
; 32   : 	// update lpf gains
; 33   : 	updateGains();

	call	?updateGains@LPFButterworth@@QEAAXXZ	; LPFButterworth::updateGains
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 101  :     outputHPF->setSampleRate(sampleRate);

	mov	rcx, QWORD PTR [rsi+328]
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 30   : 	hpf_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], ebx
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 102  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 33   : 	updateGains();

	jmp	?updateGains@HPFButterworth@@QEAAXXZ	; HPFButterworth::updateGains
?setSampleRate@MisEfx@@UEAAXM@Z ENDP			; MisEfx::setSampleRate
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?InitPresets@MisEfx@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?InitPresets@MisEfx@@AEAAXXZ PROC			; MisEfx::InitPresets, COMDAT

; 108  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 109  :     rev_presets = new ReverbPresets[NUM_PRESETS];

	mov	ecx, 320				; 00000140H
	call	??_U@YAPEAX_K@Z				; operator new[]

; 110  : 
; 111  :     /*----------------------------------------------------*/
; 112  :     // "Default" preset
; 113  :     strcpy(rev_presets[0].name, "Default");

	lea	rdx, OFFSET FLAT:??_C@_07MCAEODGB@Default@
	mov	QWORD PTR [rbx+256], rax
	lea	rcx, QWORD PTR [rax+40]
	call	QWORD PTR __imp_strcpy

; 114  :     rev_presets[0].rev_wet = 0.2;                        // given as a number between 0 and 1

	mov	rax, QWORD PTR [rbx+256]

; 115  :     rev_presets[0].rev_decay = 1.0;                      // given in seconds
; 116  :     rev_presets[0].rev_smearing = 0.7;                   // given as a number between 0 and 1
; 117  :     rev_presets[0].rev_damping = 0.5;                    // given as a number between 0 and 1
; 118  :     rev_presets[0].rev_lpfFreq = MAX_LPF_FREQUENCY;      // given as a frequency
; 119  :     rev_presets[0].rev_hpfFreq = MIN_HPF_FREQUENCY;      // given as a frequency
; 120  :     rev_presets[0].rev_preDelay = 10;                    // given in milliseconds
; 121  :     rev_presets[0].rev_modRate = 1.0;                    // given in hz
; 122  :     rev_presets[0].rev_modDepth = 0.3;                   // given as a number between 0 and 1
; 123  :     rev_presets[0].rev_spread = 0.3;                     // given as a number between 0 and 1
; 124  : 
; 125  :     /*----------------------------------------------------*/
; 126  :     // "Dreamy" preset
; 127  :     strcpy(rev_presets[1].name, "Dreamy");

	lea	rdx, OFFSET FLAT:??_C@_06PIIHCPLG@Dreamy@
	mov	ebp, 1065353216				; 3f800000H
	mov	DWORD PTR [rax], 1045220557		; 3e4ccccdH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+8], ebp
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+4], 1060320051		; 3f333333H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+12], 1056964608		; 3f000000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+16], 1184133120		; 46947000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+20], 1092616192		; 41200000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+24], 1092616192		; 41200000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+28], ebp
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+32], 1050253722		; 3e99999aH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+36], 1050253722		; 3e99999aH
	mov	rcx, QWORD PTR [rbx+256]
	add	rcx, 104				; 00000068H
	call	QWORD PTR __imp_strcpy

; 128  :     rev_presets[1].rev_wet = 0.5;

	mov	rax, QWORD PTR [rbx+256]

; 129  :     rev_presets[1].rev_decay = 3.3;
; 130  :     rev_presets[1].rev_smearing = 0.8;
; 131  :     rev_presets[1].rev_damping = 0.6;
; 132  :     rev_presets[1].rev_lpfFreq = 17000.0;
; 133  :     rev_presets[1].rev_hpfFreq = 200.0;
; 134  :     rev_presets[1].rev_preDelay = 80;
; 135  :     rev_presets[1].rev_modRate = 1.0;
; 136  :     rev_presets[1].rev_modDepth = 0.6;
; 137  :     rev_presets[1].rev_spread = 1.0;
; 138  : 
; 139  :     /*----------------------------------------------------*/
; 140  :     // "Short" preset
; 141  :     strcpy(rev_presets[2].name, "Short");

	lea	rdx, OFFSET FLAT:??_C@_05BCAGPPBA@Short@
	mov	ecx, 1058642330				; 3f19999aH
	mov	DWORD PTR [rax+64], 1056964608		; 3f000000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+72], 1079194419		; 40533333H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+68], 1061997773		; 3f4ccccdH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+76], ecx
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+80], 1183109120		; 4684d000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+84], 1128792064		; 43480000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+88], 1117782016		; 42a00000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+92], ebp
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+96], ecx
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+100], ebp
	mov	rcx, QWORD PTR [rbx+256]
	add	rcx, 168				; 000000a8H
	call	QWORD PTR __imp_strcpy

; 142  :     rev_presets[2].rev_wet = 0.2;

	mov	rax, QWORD PTR [rbx+256]

; 143  :     rev_presets[2].rev_decay = 2;
; 144  :     rev_presets[2].rev_smearing = 0.5;
; 145  :     rev_presets[2].rev_damping = 0.4;
; 146  :     rev_presets[2].rev_lpfFreq = MAX_LPF_FREQUENCY;
; 147  :     rev_presets[2].rev_hpfFreq = MIN_HPF_FREQUENCY;
; 148  :     rev_presets[2].rev_preDelay = 20;
; 149  :     rev_presets[2].rev_modRate = 1.0;
; 150  :     rev_presets[2].rev_modDepth = 0.1;
; 151  :     rev_presets[2].rev_spread = 0.2;
; 152  : 
; 153  :     /*----------------------------------------------------*/
; 154  :     // "Metallic" preset
; 155  :     strcpy(rev_presets[3].name, "Metallic");

	lea	rdx, OFFSET FLAT:??_C@_08FBELJDCF@Metallic@
	mov	ebp, 1101004800				; 41a00000H
	mov	DWORD PTR [rax+128], 1045220557		; 3e4ccccdH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+136], 1073741824		; 40000000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+132], 1056964608		; 3f000000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+140], 1053609165		; 3ecccccdH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+144], 1184133120		; 46947000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+148], 1092616192		; 41200000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+152], ebp
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+156], 1065353216		; 3f800000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+160], 1036831949		; 3dcccccdH
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+164], 1045220557		; 3e4ccccdH
	mov	rcx, QWORD PTR [rbx+256]
	add	rcx, 232				; 000000e8H
	call	QWORD PTR __imp_strcpy

; 156  :     rev_presets[3].rev_wet = 0.5;

	mov	rax, QWORD PTR [rbx+256]

; 157  :     rev_presets[3].rev_decay = 2.2;
; 158  :     rev_presets[3].rev_smearing = 0.0;
; 159  :     rev_presets[3].rev_damping = 0.0;
; 160  :     rev_presets[3].rev_lpfFreq = MAX_LPF_FREQUENCY;
; 161  :     rev_presets[3].rev_hpfFreq = 650.0;
; 162  :     rev_presets[3].rev_preDelay = 20;
; 163  :     rev_presets[3].rev_modRate = 0.1;
; 164  :     rev_presets[3].rev_modDepth = 0.0;
; 165  :     rev_presets[3].rev_spread = 1.0;
; 166  : 
; 167  :     /*----------------------------------------------------*/
; 168  :     // "Wobbly" preset
; 169  :     strcpy(rev_presets[4].name, "Wobbly");

	lea	rdx, OFFSET FLAT:??_C@_06LAKOKBGJ@Wobbly@
	mov	DWORD PTR [rax+192], 1056964608		; 3f000000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+200], 1074580685		; 400ccccdH
	mov	rax, QWORD PTR [rbx+256]
	and	DWORD PTR [rax+196], 0
	mov	rax, QWORD PTR [rbx+256]
	and	DWORD PTR [rax+204], 0
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+208], 1184133120		; 46947000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+212], 1143111680		; 44228000H
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+216], ebp
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+220], 1036831949		; 3dcccccdH
	mov	rax, QWORD PTR [rbx+256]
	and	DWORD PTR [rax+224], 0
	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+228], 1065353216		; 3f800000H
	mov	rcx, QWORD PTR [rbx+256]
	add	rcx, 296				; 00000128H
	call	QWORD PTR __imp_strcpy

; 170  :     rev_presets[4].rev_wet = 0.65;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+256], 1059481190		; 3f266666H

; 171  :     rev_presets[4].rev_decay = 2.0;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+264], 1073741824		; 40000000H

; 172  :     rev_presets[4].rev_smearing = 0.7;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+260], 1060320051		; 3f333333H

; 173  :     rev_presets[4].rev_damping = 0.3;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+268], 1050253722		; 3e99999aH

; 174  :     rev_presets[4].rev_lpfFreq = 15000.0;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+272], 1181376512		; 466a6000H

; 175  :     rev_presets[4].rev_hpfFreq = 500.0;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+276], 1140457472		; 43fa0000H

; 176  :     rev_presets[4].rev_preDelay = 20;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+280], ebp

; 177  :     rev_presets[4].rev_modRate = 3.0;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+284], 1077936128		; 40400000H

; 178  :     rev_presets[4].rev_modDepth = 1.0;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+288], 1065353216		; 3f800000H

; 179  :     rev_presets[4].rev_spread = 0.3;

	mov	rax, QWORD PTR [rbx+256]
	mov	DWORD PTR [rax+292], 1050253722		; 3e99999aH

; 180  : 
; 181  :     // Set the program when creating a new plugin instance
; 182  :     int initIdx = 0;
; 183  :     AudioEffect::setProgram(initIdx);
; 184  :     rev_wet = rev_presets[initIdx].rev_wet;

	mov	rcx, QWORD PTR [rbx+256]
	and	DWORD PTR [rbx+40], 0
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rbx+264], eax

; 185  :     rev_decay = rev_presets[initIdx].rev_decay;

	mov	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR [rbx+272], eax

; 186  :     rev_smearing = rev_presets[initIdx].rev_smearing;

	mov	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR [rbx+268], eax

; 187  :     rev_damping = rev_presets[initIdx].rev_damping;

	mov	eax, DWORD PTR [rcx+12]
	mov	DWORD PTR [rbx+276], eax

; 188  :     rev_lpfFreq = rev_presets[initIdx].rev_lpfFreq;

	mov	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR [rbx+280], eax

; 189  :     rev_hpfFreq = rev_presets[initIdx].rev_hpfFreq;

	mov	eax, DWORD PTR [rcx+20]
	mov	DWORD PTR [rbx+284], eax

; 190  :     rev_preDelay = rev_presets[initIdx].rev_preDelay;

	mov	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR [rbx+288], eax

; 191  :     rev_modRate = rev_presets[initIdx].rev_modRate;

	mov	eax, DWORD PTR [rcx+28]
	mov	DWORD PTR [rbx+292], eax

; 192  :     rev_modDepth = rev_presets[initIdx].rev_modDepth;

	mov	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR [rbx+296], eax

; 193  :     rev_spread = rev_presets[initIdx].rev_spread;

	mov	eax, DWORD PTR [rcx+36]
	mov	DWORD PTR [rbx+300], eax

; 194  : 
; 195  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?InitPresets@MisEfx@@AEAAXXZ ENDP			; MisEfx::InitPresets
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z
_TEXT	SEGMENT
this$ = 112
rev_outputs$1 = 120
inputs$ = 120
rev_inputs$2 = 128
outputs$ = 128
sampleFrames$ = 136
?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z PROC		; MisEfx::processReplacing, COMDAT

; 202  : {

$LN12:

; 209  : 
; 210  :     // Cycle over the sample frames number
; 211  :     for (int i = 0; i < sampleFrames; i++) {

	test	r9d, r9d
	jle	$LN10@processRep
	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 203  :     // Extract input and output buffers
; 204  :     float* inL = inputs[0]; // buffer input left
; 205  :     float* inR = inputs[1]; // buffer input right

	mov	rbx, QWORD PTR [rdx+8]
	mov	r15, rcx
	mov	rdi, QWORD PTR [rdx]

; 206  : 
; 207  :     float* outL = outputs[0]; // buffer output left

	mov	rsi, QWORD PTR [r8]
	sub	rdi, rbx

; 208  :     float* outR = outputs[1]; // buffer output right

	mov	rbp, QWORD PTR [r8+8]

; 212  : 
; 213  :         // Create arrays for Reverb processing
; 214  :         float rev_inputs[2] = { inL[i],  inR[i] };

	sub	rsi, rbx
	movaps	XMMWORD PTR [rsp+48], xmm6
	sub	rbp, rbx
	movaps	XMMWORD PTR [rsp+32], xmm7
	movsxd	r14, r9d
$LL4@processRep:
	movss	xmm0, DWORD PTR [rdi+rbx]

; 215  :         float rev_outputs[2] = { 0.0, 0.0 };
; 216  : 
; 217  :         // Process Reverb
; 218  :         Reverb->processAudio(rev_inputs, rev_outputs);

	lea	r8, QWORD PTR rev_outputs$1[rsp]
	movss	xmm1, DWORD PTR [rbx]
	lea	rdx, QWORD PTR rev_inputs$2[rsp]
	mov	rcx, QWORD PTR [r15+304]
	and	DWORD PTR rev_outputs$1[rsp], 0
	and	DWORD PTR rev_outputs$1[rsp+4], 0
	movss	DWORD PTR rev_inputs$2[rsp], xmm0
	movss	DWORD PTR rev_inputs$2[rsp+4], xmm1
	call	?processAudio@Freeverb@@QEAAXPEAM0@Z	; Freeverb::processAudio

; 219  : 
; 220  :         // Unpack output array
; 221  :         float outputL = rev_outputs[0];
; 222  :         float outputR = rev_outputs[1];
; 223  : 
; 224  :         // Chorus 
; 225  :         //outputL = chorus->processAudio(outputL);
; 226  :         //outputR = chorus->processAudio(outputR);        
; 227  : 
; 228  :         // Output LPF processing
; 229  :         outputL = outputLPF->processAudio(outputL);

	mov	rcx, QWORD PTR [r15+320]
	movss	xmm1, DWORD PTR rev_outputs$1[rsp]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r15+320]
	movaps	xmm6, xmm0

; 230  :         outputR = outputLPF->processAudio(outputR);

	movss	xmm1, DWORD PTR rev_outputs$1[rsp+4]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 231  : 
; 232  :         // Output HPF processing
; 233  :         outputL = outputHPF->processAudio(outputL);

	mov	rcx, QWORD PTR [r15+328]
	movaps	xmm1, xmm6
	movaps	xmm7, xmm0
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r15+328]

; 234  :         outputR = outputHPF->processAudio(outputR);

	movaps	xmm1, xmm7
	movaps	xmm6, xmm0
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 235  : 
; 236  :         //// Tremolo processing
; 237  :         outputL = tremolo->processAudio(outputL);

	mov	rcx, QWORD PTR [r15+336]
	movaps	xmm1, xmm6
	movaps	xmm7, xmm0
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r15+336]

; 238  :         outputR = tremolo->processAudio(outputR);

	movaps	xmm1, xmm7
	movaps	xmm6, xmm0
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 239  : 
; 240  :         // Stereo spread processing + output allocation
; 241  :         outL[i] = outputL;

	movss	DWORD PTR [rsi+rbx], xmm6

; 242  :         outR[i] = outputR;

	movss	DWORD PTR [rbx+rbp], xmm0
	lea	rbx, QWORD PTR [rbx+4]
	sub	r14, 1
	jne	$LL4@processRep

; 243  :     }
; 244  : }

	mov	rbx, QWORD PTR [rsp+112]
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
$LN10@processRep:
	ret	0
?processReplacing@MisEfx@@UEAAXPEAPEAM0H@Z ENDP		; MisEfx::processReplacing
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?mapValueIntoRange@MisEfx@@AEAAMMMM@Z
_TEXT	SEGMENT
this$dead$ = 8
value$ = 16
minvalue$ = 24
maxValue$ = 32
?mapValueIntoRange@MisEfx@@AEAAMMMM@Z PROC		; MisEfx::mapValueIntoRange, COMDAT

; 251  :     return minvalue + value * (maxValue - minvalue);

	subss	xmm3, xmm2
	mulss	xmm3, xmm1
	addss	xmm3, xmm2
	movaps	xmm0, xmm3

; 252  : }

	ret	0
?mapValueIntoRange@MisEfx@@AEAAMMMM@Z ENDP		; MisEfx::mapValueIntoRange
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?mapValueOutsideRange@MisEfx@@AEAAMMMM@Z
_TEXT	SEGMENT
this$dead$ = 8
value$ = 16
minValue$ = 24
maxValue$ = 32
?mapValueOutsideRange@MisEfx@@AEAAMMMM@Z PROC		; MisEfx::mapValueOutsideRange, COMDAT

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm1, xmm2
	subss	xmm3, xmm2
	divss	xmm1, xmm3
	movaps	xmm0, xmm1

; 260  : }

	ret	0
?mapValueOutsideRange@MisEfx@@AEAAMMMM@Z ENDP		; MisEfx::mapValueOutsideRange
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?setParameter@MisEfx@@UEAAXHM@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
value$ = 64
?setParameter@MisEfx@@UEAAXHM@Z PROC			; MisEfx::setParameter, COMDAT

; 268  : {

$LN55:
	push	rbx
	sub	rsp, 32					; 00000020H
	movaps	xmm4, xmm2
	mov	rbx, rcx

; 269  :     switch (index) {

	cmp	edx, 5
	jg	$LN16@setParamet
	je	$LN6@setParamet
	test	edx, edx
	je	$LN4@setParamet
	sub	edx, 1
	je	$LN5@setParamet
	sub	edx, 1
	je	$LN10@setParamet
	sub	edx, 1
	je	SHORT $LN7@setParamet
	cmp	edx, 1
	jne	$LN14@setParamet

; 346  :         Reverb->setReverbSpread(rev_spread);

	mov	rax, QWORD PTR [rcx+304]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm2, DWORD PTR __real@3f800000
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 345  :         rev_spread = value;

	movss	DWORD PTR [rcx+300], xmm4
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 214  :     freeverb_spread = spread;

	movss	DWORD PTR [rax+20], xmm4

; 250  :     return minvalue + value * (maxValue - minvalue);

	addss	xmm4, xmm4
	subss	xmm4, xmm2

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm4
	addss	xmm0, xmm2
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rax+24], xmm0

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm2

; 300  :     dry = (1.0 - freeverb_wet);

	subss	xmm2, DWORD PTR [rax]
	subss	xmm0, xmm4
	movss	DWORD PTR [rax+32], xmm2
	mulss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rax+28], xmm0
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN7@setParamet:

; 286  :         break;
; 287  :     }
; 288  :     case Param_damping:
; 289  :     {
; 290  :         rev_damping = value;
; 291  :         float dampingFrequency = mapValueIntoRange(1.0 - rev_damping, MIN_LPF_FREQUENCY, MAX_LPF_FREQUENCY);

	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm4
	movss	DWORD PTR [rcx+276], xmm4

; 292  :         Reverb->setReverbDampingFrequency(dampingFrequency);

	mov	rcx, QWORD PTR [rcx+304]

; 251  :     return minvalue + value * (maxValue - minvalue);

	mulss	xmm1, DWORD PTR __real@46944800
	addss	xmm1, DWORD PTR __real@41a00000

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 292  :         Reverb->setReverbDampingFrequency(dampingFrequency);

	jmp	?setReverbDampingFrequency@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDampingFrequency
$LN10@setParamet:

; 305  :         break;
; 306  :     }
; 307  :     case Param_preDelay:
; 308  :     {
; 309  :         rev_preDelay = value * MAX_PREDELAY_VALUE_IN_MS;

	mulss	xmm4, DWORD PTR __real@43960000

; 310  :         Reverb->setReverbPreDelayInMilliseconds(rev_preDelay);

	mov	rax, QWORD PTR [rcx+304]
	movss	DWORD PTR [rcx+288], xmm4
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 209  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	rcx, QWORD PTR [rax+40]
	movss	DWORD PTR [rax+16], xmm4
	movd	xmm0, DWORD PTR [rcx+16]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm4
	comiss	xmm4, xmm0
	jbe	SHORT $LN36@setParamet

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN36@setParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
$LN5@setParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 278  :         rev_decay = value * MAX_REVERB_DECAY_IN_SECONDS;

	mulss	xmm4, DWORD PTR __real@40a00000
	movss	DWORD PTR [rcx+272], xmm4

; 279  :         Reverb->setReverbDecayInSeconds(rev_decay);

	movaps	xmm1, xmm4
	mov	rcx, QWORD PTR [rcx+304]

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 279  :         Reverb->setReverbDecayInSeconds(rev_decay);

	jmp	?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDecayInSeconds
$LN4@setParamet:

; 273  :         Reverb->setReverbWet(rev_wet);

	mov	rax, QWORD PTR [rcx+304]
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm3, DWORD PTR __real@3f800000
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 272  :         rev_wet = value;

	movss	DWORD PTR [rcx+264], xmm4
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm2, DWORD PTR [rax+20]
	addss	xmm2, xmm2

; 170  :     freeverb_wet = wet;

	movss	DWORD PTR [rax], xmm4

; 250  :     return minvalue + value * (maxValue - minvalue);

	subss	xmm2, xmm3

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, xmm4
	movss	DWORD PTR [rax+24], xmm0

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm3
	subss	xmm0, xmm2

; 300  :     dry = (1.0 - freeverb_wet);

	subss	xmm3, xmm4
	mulss	xmm0, xmm4
	movss	DWORD PTR [rax+32], xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rax+28], xmm0
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN6@setParamet:

; 280  :         break;
; 281  :     }
; 282  :     case Param_smearing:
; 283  :     {
; 284  :         rev_smearing = value;

	movss	DWORD PTR [rcx+268], xmm4

; 285  :         Reverb->setReverbSmearing(rev_smearing);

	movaps	xmm1, xmm4
	mov	rcx, QWORD PTR [rcx+304]

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 285  :         Reverb->setReverbSmearing(rev_smearing);

	jmp	?setReverbSmearing@Freeverb@@QEAAXM@Z	; Freeverb::setReverbSmearing
$LN16@setParamet:

; 269  :     switch (index) {

	sub	edx, 6
	je	$LN8@setParamet
	sub	edx, 1
	je	SHORT $LN9@setParamet
	sub	edx, 1
	je	SHORT $LN11@setParamet
	cmp	edx, 1
	jne	$LN14@setParamet

; 318  :         /*for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {
; 319  :             apFiltersL_input[i].setModRate(rev_modRate);
; 320  :             apFiltersR_input[i].setModRate(rev_modRate);
; 321  :         }*/
; 322  :         /*for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {
; 323  :             apFiltersL_output[i].setModRate(rev_modRate);
; 324  :             apFiltersR_output[i].setModRate(rev_modRate);
; 325  :         }*/
; 326  :         break;
; 327  :     }
; 328  :     case Param_ModDepth:
; 329  :     {
; 330  :         rev_modDepth = value;
; 331  :         //chorus->setModDepth(rev_modDepth);
; 332  :         tremolo->setModDepth(rev_modDepth);

	mov	rax, QWORD PTR [rcx+336]
	movss	DWORD PTR [rcx+296], xmm4
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 34   : 	trem_modDepth = modDepth;

	movss	DWORD PTR [rax+12], xmm4

; 35   : 	trem_LFOOscillator->setLFOAmplitude(trem_modDepth);

	mov	rax, QWORD PTR [rax+24]
	movss	DWORD PTR [rax+16], xmm4
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN11@setParamet:

; 316  :         //chorus->setModRate(rev_modRate);
; 317  :         tremolo->setModRate(rev_modRate);

	mov	rax, QWORD PTR [rcx+336]

; 251  :     return minvalue + value * (maxValue - minvalue);

	mulss	xmm4, DWORD PTR __real@411e6666
	addss	xmm4, DWORD PTR __real@3dcccccd

; 311  :         break;
; 312  :     }
; 313  :     case Param_ModRate:
; 314  :     {
; 315  :         rev_modRate = mapValueIntoRange(value, MIN_MOD_RATE_IN_HZ, MAX_MOD_RATE_IN_HZ);

	movss	DWORD PTR [rcx+292], xmm4
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 42   : 	trem_LFOOscillator->setLFOfrequency(trem_modRateHz);

	mov	rcx, QWORD PTR [rax+24]
	movss	DWORD PTR [rax+8], xmm4
	movd	xmm0, DWORD PTR [rcx+12]
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp

; 48   : 	lfo_frequency = frequency;

	movss	DWORD PTR [rcx+8], xmm4

; 74   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	mulss	xmm4, DWORD PTR __real@45000000
	cvtdq2ps xmm0, xmm0
	divss	xmm4, xmm0
	movss	DWORD PTR [rcx+28], xmm4
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN9@setParamet:

; 299  :         break;
; 300  :     }
; 301  :     case Param_hpfFreq:
; 302  :     {
; 303  :         rev_hpfFreq = exp(mapValueIntoRange(value, MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG));

	movss	xmm0, DWORD PTR [rcx+252]

; 251  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm1, DWORD PTR [rcx+248]
	subss	xmm1, xmm0
	mulss	xmm1, xmm4
	addss	xmm1, xmm0

; 299  :         break;
; 300  :     }
; 301  :     case Param_hpfFreq:
; 302  :     {
; 303  :         rev_hpfFreq = exp(mapValueIntoRange(value, MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG));

	cvtps2pd xmm0, xmm1
	call	QWORD PTR __imp_exp

; 304  :         outputHPF->setCutoffFrequency(rev_hpfFreq);

	mov	rcx, QWORD PTR [rbx+328]
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rbx+284], xmm1
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 40   : 	hpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm1
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp

; 43   : 	updateGains();

	jmp	?updateGains@HPFButterworth@@QEAAXXZ	; HPFButterworth::updateGains
$LN8@setParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 297  :         rev_lpfFreq = exp(mapValueIntoRange(value, MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG));

	movss	xmm0, DWORD PTR [rcx+244]

; 251  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm1, DWORD PTR [rcx+240]
	subss	xmm1, xmm0
	mulss	xmm1, xmm4
	addss	xmm1, xmm0

; 297  :         rev_lpfFreq = exp(mapValueIntoRange(value, MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG));

	cvtps2pd xmm0, xmm1
	call	QWORD PTR __imp_exp

; 298  :         outputLPF->setCutoffFrequency(rev_lpfFreq);

	mov	rcx, QWORD PTR [rbx+320]
	xorps	xmm1, xmm1
	cvtsd2ss xmm1, xmm0
	movss	DWORD PTR [rbx+280], xmm1
; File E:\FoxSuite\fox-suite-blocks\src\LPFButterworth.cpp

; 40   : 	lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm1

; 41   : 
; 42   : 	// update lpf gains
; 43   : 	updateGains();

	call	?updateGains@LPFButterworth@@QEAAXXZ	; LPFButterworth::updateGains
$LN14@setParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 352  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?setParameter@MisEfx@@UEAAXHM@Z ENDP			; MisEfx::setParameter
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getParameter@MisEfx@@UEAAMH@Z
_TEXT	SEGMENT
this$ = 80
index$ = 88
?getParameter@MisEfx@@UEAAMH@Z PROC			; MisEfx::getParameter, COMDAT

; 358  : {

$LN25:
	sub	rsp, 72					; 00000048H
	movaps	XMMWORD PTR [rsp+48], xmm6
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR [rsp+32], xmm7

; 359  :     float param = 0;
; 360  :     switch (index) {

	cmp	edx, 5
	jg	SHORT $LN16@getParamet
	je	SHORT $LN6@getParamet
	test	edx, edx
	je	SHORT $LN4@getParamet
	sub	edx, 1
	je	SHORT $LN5@getParamet
	sub	edx, 1
	je	SHORT $LN10@getParamet
	sub	edx, 1
	je	SHORT $LN7@getParamet
	cmp	edx, 1
	jne	$LN14@getParamet

; 405  :     }
; 406  :     case Param_spread:
; 407  :     {
; 408  :         param = rev_spread;

	movss	xmm0, DWORD PTR [rcx+300]

; 409  :         break;

	jmp	$LN14@getParamet
$LN7@getParamet:

; 375  :     }
; 376  :     case Param_damping:
; 377  :     {
; 378  :         param = rev_damping;

	movss	xmm0, DWORD PTR [rcx+276]

; 379  :         break;

	jmp	$LN14@getParamet
$LN10@getParamet:

; 390  :     }
; 391  :     case Param_preDelay:
; 392  :     {
; 393  :         param = rev_preDelay / MAX_PREDELAY_VALUE_IN_MS;

	movss	xmm0, DWORD PTR [rcx+288]
	mulss	xmm0, DWORD PTR __real@3b5a740e

; 394  :         break;

	jmp	$LN14@getParamet
$LN5@getParamet:

; 365  :     }
; 366  :     case Param_decay:
; 367  :     {
; 368  :         param = rev_decay / MAX_REVERB_DECAY_IN_SECONDS;

	movss	xmm0, DWORD PTR [rcx+272]
	mulss	xmm0, DWORD PTR __real@3e4ccccd

; 369  :         break;

	jmp	$LN14@getParamet
$LN4@getParamet:

; 361  :     case Param_wet:
; 362  :     {
; 363  :         param = rev_wet;

	movss	xmm0, DWORD PTR [rcx+264]

; 364  :         break;

	jmp	$LN14@getParamet
$LN6@getParamet:

; 370  :     }
; 371  :     case Param_smearing:
; 372  :     {
; 373  :         param = rev_smearing;

	movss	xmm0, DWORD PTR [rcx+268]

; 374  :         break;

	jmp	$LN14@getParamet
$LN16@getParamet:

; 359  :     float param = 0;
; 360  :     switch (index) {

	sub	edx, 6
	je	SHORT $LN8@getParamet
	sub	edx, 1
	je	SHORT $LN9@getParamet
	sub	edx, 1
	je	SHORT $LN11@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet

; 400  :     }
; 401  :     case Param_ModDepth:
; 402  :     {
; 403  :         param = rev_modDepth;

	movss	xmm0, DWORD PTR [rcx+296]

; 404  :         break;

	jmp	SHORT $LN14@getParamet
$LN11@getParamet:

; 259  :     return (value - minValue) / (maxValue - minValue);

	movss	xmm0, DWORD PTR [rcx+292]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR __real@3dcede63

; 395  :     }
; 396  :     case Param_ModRate:
; 397  :     {
; 398  :         param = mapValueOutsideRange(rev_modRate, MIN_MOD_RATE_IN_HZ, MAX_MOD_RATE_IN_HZ);
; 399  :         break;

	jmp	SHORT $LN14@getParamet
$LN9@getParamet:

; 384  :         break;
; 385  :     }
; 386  :     case Param_hpfFreq:
; 387  :     {
; 388  :         param = mapValueOutsideRange(log(rev_hpfFreq), MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG);

	movss	xmm7, DWORD PTR [rcx+248]
	movss	xmm6, DWORD PTR [rcx+252]
	movss	xmm0, DWORD PTR [rcx+284]

; 389  :         break;

	jmp	SHORT $LN23@getParamet
$LN8@getParamet:

; 380  :     }
; 381  :     case Param_lpfFreq:
; 382  :     {
; 383  :         param = mapValueOutsideRange(log(rev_lpfFreq), MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG);

	movss	xmm7, DWORD PTR [rcx+240]
	movss	xmm6, DWORD PTR [rcx+244]
	movss	xmm0, DWORD PTR [rcx+280]
$LN23@getParamet:

; 410  :     }
; 411  :     default:
; 412  :         break;
; 413  :     }
; 414  :     return param;
; 415  : }

	cvtps2pd xmm0, xmm0
	call	QWORD PTR __imp_log
	cvtsd2ss xmm0, xmm0
	subss	xmm7, xmm6
	subss	xmm0, xmm6
	divss	xmm0, xmm7
$LN14@getParamet:
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 72					; 00000048H
	ret	0
?getParameter@MisEfx@@UEAAMH@Z ENDP			; MisEfx::getParameter
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getParameterLabel@MisEfx@@UEAAXHPEAD@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
label$ = 64
?getParameterLabel@MisEfx@@UEAAXHPEAD@Z PROC		; MisEfx::getParameterLabel, COMDAT

; 421  : {

$LN39:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8

; 422  :     switch (index) {

	cmp	edx, 5
	jg	SHORT $LN16@getParamet
	je	SHORT $LN6@getParamet
	test	edx, edx
	je	SHORT $LN4@getParamet
	sub	edx, 1
	je	SHORT $LN5@getParamet
	sub	edx, 1
	je	SHORT $LN10@getParamet
	sub	edx, 1
	je	SHORT $LN4@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet
$LN4@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 425  :         break;

	jmp	SHORT $LN37@getParamet
$LN10@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 442  :         break;

	jmp	SHORT $LN37@getParamet
$LN5@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	mov	r8d, 8
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s@
	mov	rcx, rbx
	call	QWORD PTR __imp_strncpy

; 297  : 	dst[maxLen] = 0;

	mov	BYTE PTR [rbx+8], 0
$LN6@getParamet:

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_02INCPGIJG@dB@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 430  :         break;

	jmp	SHORT $LN37@getParamet
$LN16@getParamet:

; 422  :     switch (index) {

	sub	edx, 6
	je	SHORT $LN8@getParamet
	sub	edx, 1
	je	SHORT $LN8@getParamet
	sub	edx, 1
	je	SHORT $LN8@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_01FGNFDNOH@?$CF@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 448  :         break;

	jmp	SHORT $LN37@getParamet
$LN8@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_02KLOHGLOJ@Hz@
$LN37@getParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 455  : }

	mov	r8d, 8
	mov	rcx, rbx
	call	QWORD PTR __imp_strncpy
	mov	BYTE PTR [rbx+8], 0
$LN14@getParamet:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getParameterLabel@MisEfx@@UEAAXHPEAD@Z ENDP		; MisEfx::getParameterLabel
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
text$ = 64
?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z PROC		; MisEfx::getParameterDisplay, COMDAT

; 461  : {

$LN20:
	sub	rsp, 40					; 00000028H

; 462  :     switch (index) {

	cmp	edx, 5
	jg	SHORT $LN16@getParamet
	je	SHORT $LN6@getParamet
	test	edx, edx
	je	SHORT $LN4@getParamet
	sub	edx, 1
	je	SHORT $LN5@getParamet
	sub	edx, 1
	je	SHORT $LN10@getParamet
	sub	edx, 1
	je	SHORT $LN7@getParamet
	cmp	edx, 1
	jne	$LN14@getParamet

; 490  :     case Param_spread:
; 491  :         float2string(rev_spread * 10, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+300]
$LN18@getParamet:

; 492  :         break;
; 493  :     default:
; 494  :         break;
; 495  :     }
; 496  : }

	mulss	xmm1, DWORD PTR __real@41200000
	jmp	SHORT $LN17@getParamet
$LN7@getParamet:

; 472  :     case Param_damping:
; 473  :         float2string(rev_damping * 10, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+276]

; 474  :         break;

	jmp	SHORT $LN18@getParamet
$LN10@getParamet:

; 481  :     case Param_preDelay:
; 482  :         float2string(rev_preDelay, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+288]

; 483  :         break;

	jmp	SHORT $LN17@getParamet
$LN5@getParamet:

; 466  :     case Param_decay:
; 467  :         float2string(rev_decay, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+272]

; 468  :         break;

	jmp	SHORT $LN17@getParamet
$LN4@getParamet:

; 463  :     case Param_wet:
; 464  :         float2string(rev_wet * 10, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+264]

; 465  :         break;

	jmp	SHORT $LN18@getParamet
$LN6@getParamet:

; 469  :     case Param_smearing:
; 470  :         float2string(rev_smearing * 10, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+268]

; 471  :         break;

	jmp	SHORT $LN18@getParamet
$LN16@getParamet:

; 462  :     switch (index) {

	sub	edx, 6
	je	SHORT $LN8@getParamet
	sub	edx, 1
	je	SHORT $LN9@getParamet
	sub	edx, 1
	je	SHORT $LN11@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet

; 487  :     case Param_ModDepth:
; 488  :         float2string(rev_modDepth * 100, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+296]
	mulss	xmm1, DWORD PTR __real@42c80000

; 489  :         break;

	jmp	SHORT $LN17@getParamet
$LN11@getParamet:

; 484  :     case Param_ModRate:
; 485  :         float2string(rev_modRate, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+292]

; 486  :         break;

	jmp	SHORT $LN17@getParamet
$LN9@getParamet:

; 477  :         break;
; 478  :     case Param_hpfFreq:
; 479  :         float2string(rev_hpfFreq, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+284]

; 480  :         break;

	jmp	SHORT $LN17@getParamet
$LN8@getParamet:

; 475  :     case Param_lpfFreq:
; 476  :         float2string(rev_lpfFreq, text, kVstMaxParamStrLen);

	movss	xmm1, DWORD PTR [rcx+280]
$LN17@getParamet:

; 492  :         break;
; 493  :     default:
; 494  :         break;
; 495  :     }
; 496  : }

	mov	rax, QWORD PTR [rcx]
	mov	r9d, 8
	call	QWORD PTR [rax+312]
$LN14@getParamet:
	add	rsp, 40					; 00000028H
	ret	0
?getParameterDisplay@MisEfx@@UEAAXHPEAD@Z ENDP		; MisEfx::getParameterDisplay
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getParameterName@MisEfx@@UEAAXHPEAD@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
text$ = 64
?getParameterName@MisEfx@@UEAAXHPEAD@Z PROC		; MisEfx::getParameterName, COMDAT

; 502  : {

$LN39:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8

; 503  :     switch (index) {

	cmp	edx, 5
	jg	SHORT $LN16@getParamet
	je	SHORT $LN6@getParamet
	test	edx, edx
	je	SHORT $LN4@getParamet
	sub	edx, 1
	je	SHORT $LN5@getParamet
	sub	edx, 1
	je	SHORT $LN10@getParamet
	sub	edx, 1
	je	SHORT $LN7@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_06LMOCGFEA@Spread@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 533  :         break;

	jmp	SHORT $LN37@getParamet
$LN7@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_04HIAEEHII@Damp@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 515  :         break;

	jmp	SHORT $LN37@getParamet
$LN10@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_08FPFMMENM@PreDelay@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 524  :         break;

	jmp	SHORT $LN37@getParamet
$LN5@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_05BFFNNFFO@Decay@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 509  :         break;

	jmp	SHORT $LN37@getParamet
$LN4@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_03INCOKCMB@Wet@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 506  :         break;

	jmp	SHORT $LN37@getParamet
$LN6@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_05PNGBCKKL@Smear@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 512  :         break;

	jmp	SHORT $LN37@getParamet
$LN16@getParamet:

; 503  :     switch (index) {

	sub	edx, 6
	je	SHORT $LN8@getParamet
	sub	edx, 1
	je	SHORT $LN9@getParamet
	sub	edx, 1
	je	SHORT $LN11@getParamet
	cmp	edx, 1
	jne	SHORT $LN14@getParamet
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_08BAOBOEBI@ModDepth@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 530  :         break;

	jmp	SHORT $LN37@getParamet
$LN11@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_07EMOFNFEJ@ModRate@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 527  :         break;

	jmp	SHORT $LN37@getParamet
$LN9@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_08GHFAHIHP@HPF?5Freq@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 521  :         break;

	jmp	SHORT $LN37@getParamet
$LN8@getParamet:
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	lea	rdx, OFFSET FLAT:??_C@_08DKLMCJHD@LPF?5Freq@
$LN37@getParamet:
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 537  : }

	mov	r8d, 8
	mov	rcx, rbx
	call	QWORD PTR __imp_strncpy
	mov	BYTE PTR [rbx+8], 0
$LN14@getParamet:
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getParameterName@MisEfx@@UEAAXHPEAD@Z ENDP		; MisEfx::getParameterName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?setProgram@MisEfx@@UEAAXH@Z
_TEXT	SEGMENT
this$ = 80
program$ = 88
?setProgram@MisEfx@@UEAAXH@Z PROC			; MisEfx::setProgram, COMDAT

; 545  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 546  :     // Call the current implementation of "setProgram"
; 547  :     AudioEffect::setProgram(program);
; 548  : 
; 549  :     // Create an instante of ReverbPresets with current preset
; 550  :     ReverbPresets* cp = &rev_presets[curProgram];
; 551  : 
; 552  :     // Set each parameter
; 553  :     setParameter(Param_wet, cp->rev_wet);

	mov	rax, QWORD PTR [rcx]
	mov	rdi, rcx
	movsxd	rbx, edx
	mov	DWORD PTR [rcx+40], edx
	xor	edx, edx
	shl	rbx, 6
	add	rbx, QWORD PTR [rcx+256]
	movaps	XMMWORD PTR [rsp+48], xmm6
	movaps	XMMWORD PTR [rsp+32], xmm7
	movss	xmm2, DWORD PTR [rbx]
	call	QWORD PTR [rax+80]

; 554  :     setParameter(Param_decay, cp->rev_decay / MAX_REVERB_DECAY_IN_SECONDS);

	movss	xmm2, DWORD PTR [rbx+8]
	mov	edx, 1
	mulss	xmm2, DWORD PTR __real@3e4ccccd
	mov	rcx, rdi
	mov	rax, QWORD PTR [rdi]
	call	QWORD PTR [rax+80]

; 555  :     setParameter(Param_damping, cp->rev_damping);

	mov	rax, QWORD PTR [rdi]
	mov	edx, 3
	movss	xmm2, DWORD PTR [rbx+12]
	mov	rcx, rdi
	call	QWORD PTR [rax+80]

; 556  :     setParameter(Param_smearing, cp->rev_smearing);

	mov	rax, QWORD PTR [rdi]
	mov	edx, 5
	movss	xmm2, DWORD PTR [rbx+4]
	mov	rcx, rdi
	call	QWORD PTR [rax+80]

; 557  :     setParameter(Param_spread, cp->rev_spread);

	mov	rax, QWORD PTR [rdi]
	mov	edx, 4
	movss	xmm2, DWORD PTR [rbx+36]
	mov	rcx, rdi
	call	QWORD PTR [rax+80]

; 558  :     setParameter(Param_ModDepth, cp->rev_modDepth);

	mov	rax, QWORD PTR [rdi]
	mov	edx, 9
	movss	xmm2, DWORD PTR [rbx+32]
	mov	rcx, rdi
	call	QWORD PTR [rax+80]

; 559  :     setParameter(Param_preDelay, cp->rev_preDelay / MAX_PREDELAY_VALUE_IN_MS);

	movss	xmm2, DWORD PTR [rbx+24]
	mov	edx, 2
	mulss	xmm2, DWORD PTR __real@3b5a740e
	mov	rcx, rdi
	mov	rax, QWORD PTR [rdi]
	call	QWORD PTR [rax+80]
	movss	xmm0, DWORD PTR [rbx+16]

; 560  :     setParameter(Param_lpfFreq, mapValueOutsideRange(log(cp->rev_lpfFreq), MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG));

	movss	xmm7, DWORD PTR [rdi+240]
	movss	xmm6, DWORD PTR [rdi+244]
	cvtps2pd xmm0, xmm0
	call	QWORD PTR __imp_log
	mov	rax, QWORD PTR [rdi]

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm7, xmm6

; 560  :     setParameter(Param_lpfFreq, mapValueOutsideRange(log(cp->rev_lpfFreq), MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG));

	xorps	xmm2, xmm2
	mov	edx, 6
	cvtsd2ss xmm2, xmm0
	mov	rcx, rdi

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm2, xmm6
	divss	xmm2, xmm7

; 560  :     setParameter(Param_lpfFreq, mapValueOutsideRange(log(cp->rev_lpfFreq), MIN_LPF_FREQUENCY_LOG, MAX_LPF_FREQUENCY_LOG));

	call	QWORD PTR [rax+80]
	movss	xmm0, DWORD PTR [rbx+20]

; 561  :     setParameter(Param_hpfFreq, mapValueOutsideRange(log(cp->rev_hpfFreq), MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG));

	movss	xmm7, DWORD PTR [rdi+248]
	movss	xmm6, DWORD PTR [rdi+252]
	cvtps2pd xmm0, xmm0
	call	QWORD PTR __imp_log
	mov	rax, QWORD PTR [rdi]

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm7, xmm6

; 561  :     setParameter(Param_hpfFreq, mapValueOutsideRange(log(cp->rev_hpfFreq), MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG));

	xorps	xmm2, xmm2
	mov	edx, 7
	cvtsd2ss xmm2, xmm0
	mov	rcx, rdi

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm2, xmm6
	divss	xmm2, xmm7

; 561  :     setParameter(Param_hpfFreq, mapValueOutsideRange(log(cp->rev_hpfFreq), MIN_HPF_FREQUENCY_LOG, MAX_HPF_FREQUENCY_LOG));

	call	QWORD PTR [rax+80]

; 259  :     return (value - minValue) / (maxValue - minValue);

	movss	xmm2, DWORD PTR [rbx+28]

; 562  :     setParameter(Param_ModRate, mapValueOutsideRange(cp->rev_modRate, MIN_MOD_RATE_IN_HZ, MAX_MOD_RATE_IN_HZ));

	mov	edx, 8

; 259  :     return (value - minValue) / (maxValue - minValue);

	subss	xmm2, DWORD PTR __real@3dcccccd

; 562  :     setParameter(Param_ModRate, mapValueOutsideRange(cp->rev_modRate, MIN_MOD_RATE_IN_HZ, MAX_MOD_RATE_IN_HZ));

	mov	rax, QWORD PTR [rdi]
	mov	rcx, rdi

; 259  :     return (value - minValue) / (maxValue - minValue);

	mulss	xmm2, DWORD PTR __real@3dcede63

; 563  : }

	mov	rbx, QWORD PTR [rsp+80]
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 64					; 00000040H
	pop	rdi

; 562  :     setParameter(Param_ModRate, mapValueOutsideRange(cp->rev_modRate, MIN_MOD_RATE_IN_HZ, MAX_MOD_RATE_IN_HZ));

	rex_jmp	QWORD PTR [rax+80]
?setProgram@MisEfx@@UEAAXH@Z ENDP			; MisEfx::setProgram
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getProgramName@MisEfx@@UEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 8
name$ = 16
?getProgramName@MisEfx@@UEAAXPEAD@Z PROC		; MisEfx::getProgramName, COMDAT

; 570  :     strcpy(name, rev_presets[curProgram].name);

	movsxd	r8, DWORD PTR [rcx+40]
	mov	r9, rdx
	mov	rdx, QWORD PTR [rcx+256]
	mov	rcx, r9
	add	rdx, 40					; 00000028H
	shl	r8, 6
	add	rdx, r8
	rex_jmp	QWORD PTR __imp_strcpy
?getProgramName@MisEfx@@UEAAXPEAD@Z ENDP		; MisEfx::getProgramName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z
_TEXT	SEGMENT
this$ = 48
category$ = 56
index$ = 64
text$ = 72
?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z PROC	; MisEfx::getProgramNameIndexed, COMDAT

; 577  : {

$LN5:
	sub	rsp, 40					; 00000028H

; 578  :     if (index < NUM_PRESETS)

	cmp	r8d, 5
	jge	SHORT $LN2@getProgram

; 579  :     {
; 580  :         strcpy(text, rev_presets[index].name);

	mov	rax, QWORD PTR [rcx+256]
	mov	rcx, r9
	movsxd	rdx, r8d
	add	rax, 40					; 00000028H
	shl	rdx, 6
	add	rdx, rax
	call	QWORD PTR __imp_strcpy

; 581  :         return true;

	mov	al, 1
	jmp	SHORT $LN1@getProgram
$LN2@getProgram:

; 582  :     }
; 583  :     return false;

	xor	al, al
$LN1@getProgram:

; 584  : }

	add	rsp, 40					; 00000028H
	ret	0
?getProgramNameIndexed@MisEfx@@UEAA_NHHPEAD@Z ENDP	; MisEfx::getProgramNameIndexed
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getEffectName@MisEfx@@UEAA_NPEAD@Z
_TEXT	SEGMENT
this$ = 48
name$ = 56
?getEffectName@MisEfx@@UEAA_NPEAD@Z PROC		; MisEfx::getEffectName, COMDAT

; 594  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	mov	r8d, 32					; 00000020H
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_06PEDEOBLD@Reverb@
	call	QWORD PTR __imp_strncpy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 596  :     return true;

	mov	al, 1
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 297  : 	dst[maxLen] = 0;

	mov	BYTE PTR [rbx+32], 0
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 597  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getEffectName@MisEfx@@UEAA_NPEAD@Z ENDP		; MisEfx::getEffectName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ?getVendorString@MisEfx@@UEAA_NPEAD@Z
_TEXT	SEGMENT
this$ = 48
name$ = 56
?getVendorString@MisEfx@@UEAA_NPEAD@Z PROC		; MisEfx::getVendorString, COMDAT

; 602  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 296  : 	char* result = strncpy (dst, src, maxLen);

	mov	r8d, 64					; 00000040H
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_09KHHOPKD@Fox?5Suite@
	call	QWORD PTR __imp_strncpy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 604  :     return true;

	mov	al, 1
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h

; 297  : 	dst[maxLen] = 0;

	mov	BYTE PTR [rbx+64], 0
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 605  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?getVendorString@MisEfx@@UEAA_NPEAD@Z ENDP		; MisEfx::getVendorString
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp
;	COMDAT ??1MisEfx@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1MisEfx@@UEAA@XZ PROC					; MisEfx::~MisEfx, COMDAT

; 612  : {

$LN25:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7MisEfx@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rcx, QWORD PTR [rcx+304]
	call	??1Freeverb@@QEAA@XZ			; Freeverb::~Freeverb

; 613  :     //Free Reverb
; 614  :     Reverb->~Freeverb();
; 615  : 
; 616  :     // destroy chorus
; 617  :     //chorus->~ModDelay();
; 618  : 
; 619  :     // destroy lpf
; 620  :     outputLPF->~LPFButterworth();

	mov	rax, QWORD PTR [rbx+320]
	lea	rcx, OFFSET FLAT:??_7LPFButterworth@@6B@
	mov	QWORD PTR [rax], rcx
	lea	rcx, OFFSET FLAT:??_7HPFButterworth@@6B@

; 621  : 
; 622  :     // destroy hpf
; 623  :     outputHPF->~HPFButterworth();

	mov	rax, QWORD PTR [rbx+328]
	mov	QWORD PTR [rax], rcx
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 11   : Tremolo::~Tremolo() {

	lea	rax, OFFSET FLAT:??_7Tremolo@@6B@
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 626  :     tremolo->~Tremolo();

	mov	rcx, QWORD PTR [rbx+336]
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp

; 11   : Tremolo::~Tremolo() {

	mov	QWORD PTR [rcx], rax
	mov	rcx, QWORD PTR [rcx+24]
	call	??1LFO@@QEAA@XZ				; LFO::~LFO
	mov	rcx, rbx
; File E:\FoxSuite\misefx\MisEfx\MisEfx.cpp

; 627  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	??1AudioEffect@@UEAA@XZ			; AudioEffect::~AudioEffect
??1MisEfx@@UEAA@XZ ENDP					; MisEfx::~MisEfx
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_GFreeverb@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GFreeverb@@QEAAPEAXI@Z PROC				; Freeverb::`scalar deleting destructor', COMDAT
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??1Freeverb@@QEAA@XZ			; Freeverb::~Freeverb
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GFreeverb@@QEAAPEAXI@Z ENDP				; Freeverb::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_GHPFButterworth@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 8
__flags$dead$ = 16
??_GHPFButterworth@@QEAAPEAXI@Z PROC			; HPFButterworth::`scalar deleting destructor', COMDAT
	lea	rax, OFFSET FLAT:??_7HPFButterworth@@6B@
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??_GHPFButterworth@@QEAAPEAXI@Z ENDP			; HPFButterworth::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Tremolo.cpp
;	COMDAT ??_GTremolo@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GTremolo@@QEAAPEAXI@Z PROC				; Tremolo::`scalar deleting destructor', COMDAT
$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H

; 11   : Tremolo::~Tremolo() {

	lea	rax, OFFSET FLAT:??_7Tremolo@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	mov	rcx, QWORD PTR [rcx+24]
	call	??1LFO@@QEAA@XZ				; LFO::~LFO
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GTremolo@@QEAAPEAXI@Z ENDP				; Tremolo::`scalar deleting destructor'
_TEXT	ENDS
END
