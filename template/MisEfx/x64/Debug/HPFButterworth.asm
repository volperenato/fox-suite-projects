; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_7HPFButterworth@@6B@				; HPFButterworth::`vftable'
PUBLIC	??_R2HPFButterworth@@8				; HPFButterworth::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@HPFButterworth@@8			; HPFButterworth::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4HPFButterworth@@6B@			; HPFButterworth::`RTTI Complete Object Locator'
PUBLIC	??_R3HPFButterworth@@8				; HPFButterworth::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVHPFButterworth@@@8			; HPFButterworth `RTTI Type Descriptor'
EXTRN	__imp_sqrt:PROC
EXTRN	__imp_tan:PROC
;	COMDAT ??_R0?AVHPFButterworth@@@8
data$rs	SEGMENT
??_R0?AVHPFButterworth@@@8 DQ FLAT:??_7type_info@@6B@	; HPFButterworth `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVHPFButterworth@@', 00H
data$rs	ENDS
;	COMDAT ??_R3HPFButterworth@@8
rdata$r	SEGMENT
??_R3HPFButterworth@@8 DD 00H				; HPFButterworth::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2HPFButterworth@@8
rdata$r	ENDS
;	COMDAT ??_R4HPFButterworth@@6B@
rdata$r	SEGMENT
??_R4HPFButterworth@@6B@ DD 01H				; HPFButterworth::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVHPFButterworth@@@8
	DD	imagerel ??_R3HPFButterworth@@8
	DD	imagerel ??_R4HPFButterworth@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@HPFButterworth@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@HPFButterworth@@8 DD imagerel ??_R0?AVHPFButterworth@@@8 ; HPFButterworth::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3HPFButterworth@@8
rdata$r	ENDS
;	COMDAT ??_R2HPFButterworth@@8
rdata$r	SEGMENT
??_R2HPFButterworth@@8 DD imagerel ??_R1A@?0A@EA@HPFButterworth@@8 ; HPFButterworth::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7HPFButterworth@@6B@
CONST	SEGMENT
??_7HPFButterworth@@6B@ DQ FLAT:??_R4HPFButterworth@@6B@ ; HPFButterworth::`vftable'
	DQ	FLAT:?processAudio@HPFButterworth@@UEAAMM@Z
PUBLIC	?processAudio@HPFButterworth@@UEAAMM@Z		; HPFButterworth::processAudio
PUBLIC	?updateBuffers@HPFButterworth@@QEAAXMM@Z	; HPFButterworth::updateBuffers
PUBLIC	?updateGains@HPFButterworth@@QEAAXXZ		; HPFButterworth::updateGains
PUBLIC	?setCutoffFrequency@HPFButterworth@@QEAAXM@Z	; HPFButterworth::setCutoffFrequency
PUBLIC	?setSampleRate@HPFButterworth@@QEAAXH@Z		; HPFButterworth::setSampleRate
PUBLIC	?init@HPFButterworth@@QEAAXH@Z			; HPFButterworth::init
PUBLIC	??1HPFButterworth@@QEAA@XZ			; HPFButterworth::~HPFButterworth
PUBLIC	??0HPFButterworth@@QEAA@XZ			; HPFButterworth::HPFButterworth
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@HPFButterworth@@UEAAMM@Z DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$?processAudio@HPFButterworth@@UEAAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateGains@HPFButterworth@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+263
	DD	imagerel $unwind$?updateGains@HPFButterworth@@QEAAXXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateGains@HPFButterworth@@QEAAXXZ DD 0a3d01H
	DD	02a83dH
	DD	039834H
	DD	04882fH
	DD	05782aH
	DD	03004b208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@HPFButterworth@@UEAAMM@Z DD 032e01H
	DD	0682eH
	DD	02204H
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ??0HPFButterworth@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0HPFButterworth@@QEAA@XZ PROC				; HPFButterworth::HPFButterworth, COMDAT

; 6    : HPFButterworth::HPFButterworth() {

	lea	rax, OFFSET FLAT:??_7HPFButterworth@@6B@
	mov	QWORD PTR [rcx], rax

; 7    : 	hpf_a0 = 0.0;

	xor	eax, eax
	mov	QWORD PTR [rcx+16], rax

; 8    : 	hpf_a1 = 0.0;
; 9    : 	hpf_a2 = 0.0;

	mov	QWORD PTR [rcx+24], rax

; 10   : 	hpf_b1 = 0.0;
; 11   : 	hpf_b2 = 0.0;

	mov	QWORD PTR [rcx+32], rax

; 12   : 	hpf_cutoffFreq = 0.0;

	mov	DWORD PTR [rcx+8], eax

; 13   : 	hpf_xn_1 = 0.0;
; 14   : 	hpf_xn_2 = 0.0;

	mov	QWORD PTR [rcx+40], rax

; 15   : 	hpf_yn_1 = 0.0;
; 16   : 	hpf_yn_2 = 0.0;

	mov	DWORD PTR [rcx+48], eax

; 17   : }

	mov	rax, rcx
	ret	0
??0HPFButterworth@@QEAA@XZ ENDP				; HPFButterworth::HPFButterworth
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ??1HPFButterworth@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1HPFButterworth@@QEAA@XZ PROC				; HPFButterworth::~HPFButterworth, COMDAT

; 19   : HPFButterworth::~HPFButterworth() {}

	lea	rax, OFFSET FLAT:??_7HPFButterworth@@6B@
	mov	QWORD PTR [rcx], rax
	ret	0
??1HPFButterworth@@QEAA@XZ ENDP				; HPFButterworth::~HPFButterworth
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?init@HPFButterworth@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
sampleRate$ = 16
?init@HPFButterworth@@QEAAXH@Z PROC			; HPFButterworth::init, COMDAT

; 23   : 	// set internal sample rate
; 24   : 	hpf_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], edx

; 25   : }

	ret	0
?init@HPFButterworth@@QEAAXH@Z ENDP			; HPFButterworth::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?setSampleRate@HPFButterworth@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
sampleRate$ = 16
?setSampleRate@HPFButterworth@@QEAAXH@Z PROC		; HPFButterworth::setSampleRate, COMDAT

; 29   : 	// allocate internal sample rate
; 30   : 	hpf_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], edx

; 31   : 
; 32   : 	// update hpf gains
; 33   : 	updateGains();

	jmp	?updateGains@HPFButterworth@@QEAAXXZ	; HPFButterworth::updateGains
?setSampleRate@HPFButterworth@@QEAAXH@Z ENDP		; HPFButterworth::setSampleRate
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?setCutoffFrequency@HPFButterworth@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
cutoffFreq$ = 16
?setCutoffFrequency@HPFButterworth@@QEAAXM@Z PROC	; HPFButterworth::setCutoffFrequency, COMDAT

; 39   : 	// allocate cutoff frequency value
; 40   : 	hpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm1

; 41   : 
; 42   : 	// update hpf gains
; 43   : 	updateGains();

	jmp	?updateGains@HPFButterworth@@QEAAXXZ	; HPFButterworth::updateGains
?setCutoffFrequency@HPFButterworth@@QEAAXM@Z ENDP	; HPFButterworth::setCutoffFrequency
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?updateGains@HPFButterworth@@QEAAXXZ
_TEXT	SEGMENT
this$ = 112
?updateGains@HPFButterworth@@QEAAXXZ PROC		; HPFButterworth::updateGains, COMDAT

; 47   : {

$LN4:
	mov	rax, rsp
	push	rbx
	sub	rsp, 96					; 00000060H
	movss	xmm0, DWORD PTR [rcx+8]
	xorps	xmm1, xmm1

; 48   : 	// define hpf fb and ff gains
; 49   : 	float C = tan(( M_PI * hpf_cutoffFreq) / (float)hpf_sampleRate );

	cvtsi2ss xmm1, DWORD PTR [rcx+12]
	mov	rbx, rcx
	cvtps2pd xmm0, xmm0
	cvtps2pd xmm2, xmm1
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	movaps	XMMWORD PTR [rax-24], xmm7
	movaps	XMMWORD PTR [rax-40], xmm8
	movaps	XMMWORD PTR [rax-56], xmm9
	divsd	xmm0, xmm2
	movaps	XMMWORD PTR [rax-72], xmm10
	call	QWORD PTR __imp_tan
	xorps	xmm7, xmm7
	cvtsd2ss xmm7, xmm0

; 50   : 	hpf_a0 = 1.0 / (1.0 + sqrt(2.0) * C + C * C);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	cvtps2pd xmm9, xmm7
	mulss	xmm7, xmm7
	cvtps2pd xmm10, xmm7
	call	QWORD PTR __imp_sqrt
	movsd	xmm8, QWORD PTR __real@3ff0000000000000

; 51   : 	hpf_a1 = -2.0 * hpf_a0;
; 52   : 	hpf_a2 = hpf_a0;
; 53   : 	hpf_b1 = 2.0 * hpf_a0 * (C * C - 1.0);

	subss	xmm7, DWORD PTR __real@3f800000
	mulsd	xmm0, xmm9
	movaps	xmm1, xmm8
	addsd	xmm0, xmm8
	addsd	xmm0, xmm10
	divsd	xmm1, xmm0

; 54   : 	hpf_b2 = hpf_a0 * (1.0 - sqrt(2.0) * C + C * C);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	cvtpd2ps xmm2, xmm1
	movaps	xmm1, xmm2
	movss	DWORD PTR [rbx+16], xmm2
	mulss	xmm1, DWORD PTR __real@c0000000
	movss	DWORD PTR [rbx+24], xmm2
	addss	xmm2, xmm2
	movss	DWORD PTR [rbx+20], xmm1
	mulss	xmm2, xmm7
	movss	DWORD PTR [rbx+28], xmm2
	call	QWORD PTR __imp_sqrt

; 55   : }

	movaps	xmm7, XMMWORD PTR [rsp+80]
	mulsd	xmm0, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+48]
	subsd	xmm8, xmm0
	movss	xmm0, DWORD PTR [rbx+16]
	cvtps2pd xmm0, xmm0
	addsd	xmm8, xmm10
	movaps	xmm10, XMMWORD PTR [rsp+32]
	mulsd	xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+64]
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR [rbx+32], xmm0
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
?updateGains@HPFButterworth@@QEAAXXZ ENDP		; HPFButterworth::updateGains
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?updateBuffers@HPFButterworth@@QEAAXMM@Z
_TEXT	SEGMENT
this$ = 8
xn$ = 16
yn$ = 24
?updateBuffers@HPFButterworth@@QEAAXMM@Z PROC		; HPFButterworth::updateBuffers, COMDAT

; 59   : 	hpf_xn_2 = hpf_xn_1;

	mov	eax, DWORD PTR [rcx+36]
	mov	DWORD PTR [rcx+40], eax

; 60   : 	hpf_yn_2 = hpf_yn_1;

	mov	eax, DWORD PTR [rcx+44]

; 61   : 	hpf_xn_1 = xn;
; 62   : 	hpf_yn_1 = yn;

	movss	DWORD PTR [rcx+44], xmm2
	mov	DWORD PTR [rcx+48], eax
	movss	DWORD PTR [rcx+36], xmm1

; 63   : }

	ret	0
?updateBuffers@HPFButterworth@@QEAAXMM@Z ENDP		; HPFButterworth::updateBuffers
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\HPFButterworth.cpp
;	COMDAT ?processAudio@HPFButterworth@@UEAAMM@Z
_TEXT	SEGMENT
this$ = 32
xn$ = 40
?processAudio@HPFButterworth@@UEAAMM@Z PROC		; HPFButterworth::processAudio, COMDAT

; 66   : {

$LN6:
	sub	rsp, 24

; 67   : 
; 68   : 	// compute filtered output
; 69   : 	float yn = hpf_a0 * xn + hpf_a1 * hpf_xn_1 + hpf_a2 * hpf_xn_2 - hpf_b1 * hpf_yn_1 - hpf_b2 * hpf_yn_2;

	movss	xmm5, DWORD PTR [rcx+36]
	movaps	xmm0, xmm1
	movss	xmm3, DWORD PTR [rcx+44]
	movaps	xmm4, xmm5
	mulss	xmm4, DWORD PTR [rcx+20]
	movaps	xmm2, xmm3
	mulss	xmm0, DWORD PTR [rcx+16]
	mulss	xmm2, DWORD PTR [rcx+28]
	addss	xmm4, xmm0
	movaps	XMMWORD PTR [rsp], xmm6
	movaps	xmm6, xmm1
	movss	xmm1, DWORD PTR [rcx+24]
	mulss	xmm1, DWORD PTR [rcx+40]

; 61   : 	hpf_xn_1 = xn;

	movss	DWORD PTR [rcx+36], xmm6

; 75   : }

	movaps	xmm6, XMMWORD PTR [rsp]
	addss	xmm4, xmm1

; 59   : 	hpf_xn_2 = hpf_xn_1;

	movss	DWORD PTR [rcx+40], xmm5

; 67   : 
; 68   : 	// compute filtered output
; 69   : 	float yn = hpf_a0 * xn + hpf_a1 * hpf_xn_1 + hpf_a2 * hpf_xn_2 - hpf_b1 * hpf_yn_1 - hpf_b2 * hpf_yn_2;

	movss	xmm1, DWORD PTR [rcx+32]
	mulss	xmm1, DWORD PTR [rcx+48]

; 60   : 	hpf_yn_2 = hpf_yn_1;

	movss	DWORD PTR [rcx+48], xmm3

; 67   : 
; 68   : 	// compute filtered output
; 69   : 	float yn = hpf_a0 * xn + hpf_a1 * hpf_xn_1 + hpf_a2 * hpf_xn_2 - hpf_b1 * hpf_yn_1 - hpf_b2 * hpf_yn_2;

	subss	xmm4, xmm2
	subss	xmm4, xmm1

; 62   : 	hpf_yn_1 = yn;

	movss	DWORD PTR [rcx+44], xmm4

; 70   : 
; 71   : 	// update buffers
; 72   : 	updateBuffers(xn, yn);
; 73   : 
; 74   : 	return yn;

	movaps	xmm0, xmm4

; 75   : }

	add	rsp, 24
	ret	0
?processAudio@HPFButterworth@@UEAAMM@Z ENDP		; HPFButterworth::processAudio
_TEXT	ENDS
END
