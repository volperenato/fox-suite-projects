; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R4Delay@@6B@					; Delay::`RTTI Complete Object Locator'
PUBLIC	??_7Delay@@6B@					; Delay::`vftable'
EXTRN	__imp_malloc:PROC
EXTRN	__imp_memset:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_log10:PROC
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7Delay@@6B@
CONST	SEGMENT
??_7Delay@@6B@ DQ FLAT:??_R4Delay@@6B@			; Delay::`vftable'
	DQ	FLAT:?init@Delay@@UEAAXMH@Z
	DQ	FLAT:?setSampleRate@Delay@@UEAAXH@Z
	DQ	FLAT:?processAudio@Delay@@UEAAMM@Z
CONST	ENDS
;	COMDAT ??_R4Delay@@6B@
rdata$r	SEGMENT
??_R4Delay@@6B@ DD 01H					; Delay::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDelay@@@8
	DD	imagerel ??_R3Delay@@8
	DD	imagerel ??_R4Delay@@6B@
PUBLIC	?processAudio@Delay@@UEAAMM@Z			; Delay::processAudio
PUBLIC	?linearInterp@Delay@@QEAAMMMMMM@Z		; Delay::linearInterp
PUBLIC	?setMakeUpGaindB@Delay@@QEAAXM@Z		; Delay::setMakeUpGaindB
PUBLIC	?setDelayInmsec@Delay@@QEAAXM@Z			; Delay::setDelayInmsec
PUBLIC	?reset@Delay@@QEAAXXZ				; Delay::reset
PUBLIC	?updateParameters@Delay@@QEAAXXZ		; Delay::updateParameters
PUBLIC	?initDelayLine@Delay@@QEAAXXZ			; Delay::initDelayLine
PUBLIC	?readFromDelayLine@Delay@@QEAAMXZ		; Delay::readFromDelayLine
PUBLIC	?writeToDelayLine@Delay@@QEAAXM@Z		; Delay::writeToDelayLine
PUBLIC	?updateIndices@Delay@@QEAAXXZ			; Delay::updateIndices
PUBLIC	?setSampleRate@Delay@@UEAAXH@Z			; Delay::setSampleRate
PUBLIC	?init@Delay@@UEAAXMH@Z				; Delay::init
PUBLIC	??1Delay@@QEAA@XZ				; Delay::~Delay
PUBLIC	??0Delay@@QEAA@XZ				; Delay::Delay
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@Delay@@UEAAMM@Z DD imagerel $LN10
	DD	imagerel $LN10+76
	DD	imagerel $unwind$?processAudio@Delay@@UEAAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@Delay@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+39
	DD	imagerel $unwind$?reset@Delay@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateParameters@Delay@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$?updateParameters@Delay@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initDelayLine@Delay@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$?initDelayLine@Delay@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSampleRate@Delay@@UEAAXH@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?setSampleRate@Delay@@UEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Delay@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$??1Delay@@QEAA@XZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Delay@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSampleRate@Delay@@UEAAXH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initDelayLine@Delay@@QEAAXXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateParameters@Delay@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@Delay@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@Delay@@UEAAMM@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ??0Delay@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Delay@@QEAA@XZ PROC					; Delay::Delay, COMDAT

; 7    : {

	lea	rax, OFFSET FLAT:??_7Delay@@6B@

; 8    : 	dly_buffer				= NULL;
; 9    : 	dly_makeUpGaindB		= 0.0;
; 10   : 	dly_makeUpGain			= 1.0;

	mov	DWORD PTR [rcx+52], 1065353216		; 3f800000H
	mov	QWORD PTR [rcx], rax
	xor	eax, eax
	mov	QWORD PTR [rcx+40], rax
	mov	DWORD PTR [rcx+48], eax

; 11   : 	dly_delayInmsec			= 0.0;
; 12   : 	dly_delayInSamples		= 0.0;

	mov	QWORD PTR [rcx+20], rax

; 13   : 	dly_readIndex			= 0;

	mov	QWORD PTR [rcx+28], rax

; 14   : 	dly_writeIndex			= 0;
; 15   : 	dly_lineLengthInSamples = 0;

	mov	QWORD PTR [rcx+12], rax

; 16   : 	dly_lineLengthInmsec	= 0.0;
; 17   : }

	mov	rax, rcx
	ret	0
??0Delay@@QEAA@XZ ENDP					; Delay::Delay
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ??1Delay@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Delay@@QEAA@XZ PROC					; Delay::~Delay, COMDAT

; 21   : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7Delay@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 22   : 	if (dly_buffer)

	mov	rcx, QWORD PTR [rcx+40]
	test	rcx, rcx
	je	SHORT $LN2@Delay

; 23   : 		delete dly_buffer;

	mov	edx, 4
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@Delay:

; 24   : 	dly_buffer = NULL;

	and	QWORD PTR [rbx+40], 0

; 25   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1Delay@@QEAA@XZ ENDP					; Delay::~Delay
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?init@Delay@@UEAAXMH@Z
_TEXT	SEGMENT
this$ = 8
maxDelayInmsec$ = 16
sampleRate$ = 24
?init@Delay@@UEAAXMH@Z PROC				; Delay::init, COMDAT

; 29   : 	// set delay line length in milliseconds
; 30   : 	dly_lineLengthInmsec = maxDelayInmsec;

	cvttss2si r9d, xmm1

; 31   : 
; 32   : 	// allocate sample rate
; 33   : 	dly_sampleRate = sampleRate;
; 34   : 
; 35   : 	// set delay line length in samples
; 36   : 	dly_lineLengthInSamples = dly_lineLengthInmsec * dly_sampleRate / 1000;

	mov	eax, 274877907				; 10624dd3H
	mov	DWORD PTR [rcx+8], r8d
	mov	edx, r9d
	mov	DWORD PTR [rcx+16], r9d
	imul	edx, r8d
	movd	xmm0, r9d

; 37   : 
; 38   : 	// set delay msec
; 39   : 	dly_delayInmsec = dly_lineLengthInmsec;

	cvtdq2ps xmm0, xmm0
	imul	edx
	movss	DWORD PTR [rcx+24], xmm0
	sar	edx, 6
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	mov	DWORD PTR [rcx+12], edx
	movd	xmm1, edx

; 40   : 
; 41   : 	// set delay in samples
; 42   : 	dly_delayInSamples = dly_lineLengthInSamples;

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+20], xmm1

; 43   : 
; 44   : 	// initialize delay line
; 45   : 	initDelayLine();

	jmp	?initDelayLine@Delay@@QEAAXXZ		; Delay::initDelayLine
?init@Delay@@UEAAXMH@Z ENDP				; Delay::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?setSampleRate@Delay@@UEAAXH@Z
_TEXT	SEGMENT
this$ = 48
sampleRate$ = 56
?setSampleRate@Delay@@UEAAXH@Z PROC			; Delay::setSampleRate, COMDAT

; 111  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 112  : 	// set sample rate internal to this class
; 113  : 	dly_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+8], edx
	mov	rbx, rcx

; 104  : 	delete dly_buffer;

	mov	rcx, QWORD PTR [rcx+40]
	mov	edx, 4
	call	??3@YAXPEAX_K@Z				; operator delete

; 105  : 	dly_buffer = NULL;

	xor	eax, eax

; 114  : 
; 115  : 	// reset delay line
; 116  : 	reset();
; 117  : 
; 118  : 	// initialize the delay line from scratches
; 119  : 	initDelayLine();

	mov	rcx, rbx

; 105  : 	dly_buffer = NULL;

	mov	QWORD PTR [rbx+40], rax

; 106  : 	dly_readIndex = 0;

	mov	QWORD PTR [rbx+28], rax

; 114  : 
; 115  : 	// reset delay line
; 116  : 	reset();
; 117  : 
; 118  : 	// initialize the delay line from scratches
; 119  : 	initDelayLine();

	call	?initDelayLine@Delay@@QEAAXXZ		; Delay::initDelayLine

; 120  : 
; 121  : 	// update delay parameters
; 122  : 	updateParameters();

	mov	rcx, rbx

; 123  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 120  : 
; 121  : 	// update delay parameters
; 122  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?setSampleRate@Delay@@UEAAXH@Z ENDP			; Delay::setSampleRate
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?updateIndices@Delay@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?updateIndices@Delay@@QEAAXXZ PROC			; Delay::updateIndices, COMDAT

; 158  : 	// Increase reading index
; 159  : 	dly_readIndex++;

	inc	DWORD PTR [rcx+28]

; 160  : 
; 161  : 	// check if reading index is out of delay line length
; 162  : 	if (dly_readIndex >= dly_lineLengthInSamples)

	xor	r8d, r8d
	mov	eax, DWORD PTR [rcx+28]
	cmp	eax, DWORD PTR [rcx+12]
	cmovge	eax, r8d

; 163  : 		dly_readIndex = 0;
; 164  : 
; 165  : 	// Increase writing index
; 166  : 	dly_writeIndex++;

	inc	DWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+28], eax

; 167  : 
; 168  : 	// check if writing index is out of delay line length
; 169  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	mov	eax, DWORD PTR [rcx+32]
	cmp	eax, DWORD PTR [rcx+12]
	cmovge	eax, r8d
	mov	DWORD PTR [rcx+32], eax

; 170  : 		dly_writeIndex = 0;
; 171  : }

	ret	0
?updateIndices@Delay@@QEAAXXZ ENDP			; Delay::updateIndices
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?writeToDelayLine@Delay@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
xn$ = 16
?writeToDelayLine@Delay@@QEAAXM@Z PROC			; Delay::writeToDelayLine, COMDAT

; 175  : 	// write the sample 'x' to current writing position of delay buffer
; 176  : 	dly_buffer[dly_writeIndex] = xn;

	movsxd	rdx, DWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rcx+40]
	movss	DWORD PTR [rax+rdx*4], xmm1

; 177  : }

	ret	0
?writeToDelayLine@Delay@@QEAAXM@Z ENDP			; Delay::writeToDelayLine
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?readFromDelayLine@Delay@@QEAAMXZ
_TEXT	SEGMENT
this$ = 8
?readFromDelayLine@Delay@@QEAAMXZ PROC			; Delay::readFromDelayLine, COMDAT

; 181  : 	// read the current sample from delay line buffer
; 182  : 	float yn = dly_buffer[dly_readIndex];

	movsxd	rdx, DWORD PTR [rcx+28]
	mov	r8, QWORD PTR [rcx+40]
	mov	rax, rdx

; 183  : 
; 184  : 	// compute previous index and wrap if needed
; 185  : 	int readIndex_1 = dly_readIndex - 1;

	sub	edx, 1

; 186  : 	if (readIndex_1 < 0)

	jns	SHORT $LN2@readFromDe

; 187  : 		readIndex_1 = dly_lineLengthInSamples - 1;

	mov	edx, DWORD PTR [rcx+12]
	dec	edx
$LN2@readFromDe:

; 188  : 
; 189  : 	// read previous sample from delay line
; 190  : 	float yn_1 = dly_buffer[readIndex_1];
; 191  : 
; 192  : 	// compute the fractional part of the delay in samples
; 193  : 	float frac = dly_delayInSamples - (int)dly_delayInSamples;

	movss	xmm2, DWORD PTR [rcx+20]

; 211  : 	float result = dx * y2 + (1 - dx) * y1;

	movss	xmm1, DWORD PTR __real@3f800000

; 188  : 
; 189  : 	// read previous sample from delay line
; 190  : 	float yn_1 = dly_buffer[readIndex_1];
; 191  : 
; 192  : 	// compute the fractional part of the delay in samples
; 193  : 	float frac = dly_delayInSamples - (int)dly_delayInSamples;

	cvttss2si ecx, xmm2
	movd	xmm0, ecx
	cvtdq2ps xmm0, xmm0
	movsxd	rcx, edx
	subss	xmm2, xmm0

; 211  : 	float result = dx * y2 + (1 - dx) * y1;

	subss	xmm1, xmm2
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [r8+rcx*4]
	mulss	xmm1, DWORD PTR [r8+rax*4]
	addss	xmm0, xmm1

; 194  : 
; 195  : 	// compute the interpolated delay value
; 196  : 	float interp = linearInterp(0, 1, yn, yn_1, frac);
; 197  : 	
; 198  : 	return interp;
; 199  : }

	ret	0
?readFromDelayLine@Delay@@QEAAMXZ ENDP			; Delay::readFromDelayLine
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?initDelayLine@Delay@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?initDelayLine@Delay@@QEAAXXZ PROC			; Delay::initDelayLine, COMDAT

; 70   : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 71   : 	// define delay line length in bytes
; 72   : 	int lineLengthInBytes = dly_lineLengthInSamples * sizeof(float);

	mov	eax, DWORD PTR [rcx+12]
	mov	rdi, rcx
	shl	eax, 2

; 73   : 
; 74   : 	// allocate memory for the delay line
; 75   : 	dly_buffer = (float*)malloc(lineLengthInBytes);

	movsxd	rbx, eax
	mov	rcx, rbx
	call	QWORD PTR __imp_malloc

; 76   : 
; 77   : 	// set the allocated memory at zero
; 78   : 	memset(dly_buffer, 0, lineLengthInBytes);

	mov	r8, rbx
	xor	edx, edx
	mov	rcx, rax
	mov	QWORD PTR [rdi+40], rax

; 79   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 76   : 
; 77   : 	// set the allocated memory at zero
; 78   : 	memset(dly_buffer, 0, lineLengthInBytes);

	rex_jmp	QWORD PTR __imp_memset
?initDelayLine@Delay@@QEAAXXZ ENDP			; Delay::initDelayLine
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?updateParameters@Delay@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?updateParameters@Delay@@QEAAXXZ PROC			; Delay::updateParameters, COMDAT

; 83   : {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 84   : 	// convert makeup gain in linear value
; 85   : 	dly_makeUpGain = pow(10.0, dly_makeUpGaindB / 20.0);

	movss	xmm0, DWORD PTR [rcx+48]
	mov	rbx, rcx
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	cvtps2pd xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@4024000000000000
	call	QWORD PTR __imp_pow
	movd	xmm2, DWORD PTR [rbx+8]
	xorps	xmm1, xmm1

; 86   : 
; 87   : 	// define delay size in samples
; 88   : 	dly_delayInSamples = dly_delayInmsec * (float)dly_sampleRate / 1000;

	cvtdq2ps xmm2, xmm2
	cvtsd2ss xmm1, xmm0
	mulss	xmm2, DWORD PTR [rbx+24]
	movss	DWORD PTR [rbx+52], xmm1
	mulss	xmm2, DWORD PTR __real@3a83126f

; 89   : 
; 90   : 	// protection against a 0 samples delay
; 91   : 	if (dly_delayInSamples == 0)

	ucomiss	xmm2, DWORD PTR __real@00000000
	movss	DWORD PTR [rbx+20], xmm2
	jne	SHORT $LN2@updatePara

; 92   : 		dly_delayInSamples = 1;

	movss	xmm2, DWORD PTR __real@3f800000
	mov	DWORD PTR [rbx+20], 1065353216		; 3f800000H
$LN2@updatePara:

; 93   : 
; 94   : 	// compute read index as the write index minus the delay length
; 95   : 	dly_readIndex = dly_writeIndex - dly_delayInSamples;

	movd	xmm0, DWORD PTR [rbx+32]
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm2
	cvttss2si ecx, xmm0
	mov	DWORD PTR [rbx+28], ecx

; 96   : 
; 97   : 	// check if the read index is negative. In that case wrap it by adding the delay line length
; 98   : 	if (dly_readIndex < 0)

	test	ecx, ecx
	jns	SHORT $LN3@updatePara

; 99   : 		dly_readIndex += dly_lineLengthInSamples;

	add	ecx, DWORD PTR [rbx+12]
	mov	DWORD PTR [rbx+28], ecx
$LN3@updatePara:

; 100  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?updateParameters@Delay@@QEAAXXZ ENDP			; Delay::updateParameters
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?reset@Delay@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?reset@Delay@@QEAAXXZ PROC				; Delay::reset, COMDAT

; 103  : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 104  : 	delete dly_buffer;

	mov	edx, 4
	mov	rcx, QWORD PTR [rcx+40]
	call	??3@YAXPEAX_K@Z				; operator delete

; 105  : 	dly_buffer = NULL;

	xor	eax, eax
	mov	QWORD PTR [rbx+40], rax

; 106  : 	dly_readIndex = 0;

	mov	QWORD PTR [rbx+28], rax

; 107  : 	dly_writeIndex = 0;
; 108  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?reset@Delay@@QEAAXXZ ENDP				; Delay::reset
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?setDelayInmsec@Delay@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
delayInmsec$ = 16
?setDelayInmsec@Delay@@QEAAXM@Z PROC			; Delay::setDelayInmsec, COMDAT

; 126  : {

	movd	xmm0, DWORD PTR [rcx+16]

; 127  : 	// Set delay line length in milliseconds
; 128  : 	dly_delayInmsec = delayInmsec;
; 129  : 
; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@setDelayIn

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN2@setDelayIn:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?setDelayInmsec@Delay@@QEAAXM@Z ENDP			; Delay::setDelayInmsec
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?setMakeUpGaindB@Delay@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
gaindB$dead$ = 16
?setMakeUpGaindB@Delay@@QEAAXM@Z PROC			; Delay::setMakeUpGaindB, COMDAT

; 139  : 	// set make up gain [dB]
; 140  : 	dly_makeUpGaindB = gaindB;

	mov	DWORD PTR [rcx+48], -1052770304		; c1400000H

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?setMakeUpGaindB@Delay@@QEAAXM@Z ENDP			; Delay::setMakeUpGaindB
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?linearInterp@Delay@@QEAAMMMMMM@Z
_TEXT	SEGMENT
this$dead$ = 8
x1$dead$ = 16
x2$dead$ = 24
y1$ = 32
y2$ = 40
x$ = 48
?linearInterp@Delay@@QEAAMMMMMM@Z PROC			; Delay::linearInterp, COMDAT

; 203  : 	float denom = x2 - x1;
; 204  : 	if (denom == 0)
; 205  : 		return y1; // should not ever happen
; 206  : 
; 207  : 	// calculate decimal position of x
; 208  : 	float dx = (x - x1) / (x2 - x1);
; 209  : 
; 210  : 	// use weighted sum method of interpolating
; 211  : 	float result = dx * y2 + (1 - dx) * y1;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR y2$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm0, xmm3
	addss	xmm0, xmm1

; 212  : 
; 213  : 	return result;
; 214  : }

	ret	0
?linearInterp@Delay@@QEAAMMMMMM@Z ENDP			; Delay::linearInterp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
;	COMDAT ?processAudio@Delay@@UEAAMM@Z
_TEXT	SEGMENT
this$ = 48
xn$ = 56
?processAudio@Delay@@UEAAMM@Z PROC			; Delay::processAudio, COMDAT

; 217  : {

$LN10:
	sub	rsp, 40					; 00000028H
	movaps	xmm3, xmm1
	mov	r9, rcx

; 218  : 	// read delay sample
; 219  : 	float yn = readFromDelayLine();

	call	?readFromDelayLine@Delay@@QEAAMXZ	; Delay::readFromDelayLine

; 176  : 	dly_buffer[dly_writeIndex] = xn;

	movsxd	rdx, DWORD PTR [r9+32]
	mov	rax, QWORD PTR [r9+40]
	movss	DWORD PTR [rax+rdx*4], xmm3

; 162  : 	if (dly_readIndex >= dly_lineLengthInSamples)

	xor	edx, edx
	inc	DWORD PTR [r9+28]
	mov	ecx, DWORD PTR [r9+12]
	cmp	DWORD PTR [r9+28], ecx
	jl	SHORT $LN6@processAud

; 163  : 		dly_readIndex = 0;

	mov	DWORD PTR [r9+28], edx
$LN6@processAud:

; 164  : 
; 165  : 	// Increase writing index
; 166  : 	dly_writeIndex++;

	inc	DWORD PTR [r9+32]

; 167  : 
; 168  : 	// check if writing index is out of delay line length
; 169  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	mov	eax, DWORD PTR [r9+32]
	cmp	eax, ecx

; 220  : 
; 221  : 	// allocate value to delay line
; 222  : 	writeToDelayLine(xn);
; 223  : 
; 224  : 	// Update read/write indices
; 225  : 	updateIndices();
; 226  : 
; 227  : 	return yn * dly_makeUpGain;

	mulss	xmm0, DWORD PTR [r9+52]

; 169  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	cmovge	eax, edx
	mov	DWORD PTR [r9+32], eax

; 228  : }

	add	rsp, 40					; 00000028H
	ret	0
?processAudio@Delay@@UEAAMM@Z ENDP			; Delay::processAudio
_TEXT	ENDS
END
