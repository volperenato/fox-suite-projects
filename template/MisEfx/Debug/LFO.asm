; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	E:\FoxSuite\misefx\MisEfx\Debug\LFO.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG27236 DB	'invalid argument', 00H
	ORG $+3
$SG27237 DB	'%s', 00H
	ORG $+1
$SG27238 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xmemory', 00H
$SG27239 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG27240 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG27241 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??0LFO@@QAE@XZ					; LFO::LFO
PUBLIC	??1LFO@@QAE@XZ					; LFO::~LFO
PUBLIC	?createWavetables@LFO@@QAEXXZ			; LFO::createWavetables
PUBLIC	?init@LFO@@UAEXW4OscillatorType@@MH@Z		; LFO::init
PUBLIC	?setLFOfrequency@LFO@@QAEXM@Z			; LFO::setLFOfrequency
PUBLIC	?setLFOWaveform@LFO@@QAEXW4OscillatorType@@@Z	; LFO::setLFOWaveform
PUBLIC	?setLFOAmplitude@LFO@@QAEXM@Z			; LFO::setLFOAmplitude
PUBLIC	?setLFOunipolar@LFO@@QAEX_N@Z			; LFO::setLFOunipolar
PUBLIC	?getLFOFrequency@LFO@@QBEMXZ			; LFO::getLFOFrequency
PUBLIC	?setSampleRate@LFO@@UAEXH@Z			; LFO::setSampleRate
PUBLIC	?linearInterp@LFO@@QAEMMMMMM@Z			; LFO::linearInterp
PUBLIC	?processAudio@LFO@@UAEMXZ			; LFO::processAudio
PUBLIC	?computeIncrement@LFO@@AAEXXZ			; LFO::computeIncrement
PUBLIC	?increaseLFOCounter@LFO@@AAEXXZ			; LFO::increaseLFOCounter
PUBLIC	??_7LFO@@6B@					; LFO::`vftable'
PUBLIC	??_R4LFO@@6B@					; LFO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLFO@@@8					; LFO `RTTI Type Descriptor'
PUBLIC	??_R3LFO@@8					; LFO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2LFO@@8					; LFO::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LFO@@8				; LFO::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4010000000000000
PUBLIC	__real@45000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	_sin:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@LFO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LFO@@8 DD FLAT:??_R0?AVLFO@@@8		; LFO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LFO@@8
rdata$r	ENDS
;	COMDAT ??_R2LFO@@8
rdata$r	SEGMENT
??_R2LFO@@8 DD	FLAT:??_R1A@?0A@EA@LFO@@8		; LFO::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3LFO@@8
rdata$r	SEGMENT
??_R3LFO@@8 DD	00H					; LFO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2LFO@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLFO@@@8
data$rs	SEGMENT
??_R0?AVLFO@@@8 DD FLAT:??_7type_info@@6B@		; LFO `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLFO@@', 00H
data$rs	ENDS
;	COMDAT ??_R4LFO@@6B@
rdata$r	SEGMENT
??_R4LFO@@6B@ DD 00H					; LFO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLFO@@@8
	DD	FLAT:??_R3LFO@@8
rdata$r	ENDS
;	COMDAT ??_7LFO@@6B@
CONST	SEGMENT
??_7LFO@@6B@ DD	FLAT:??_R4LFO@@6B@			; LFO::`vftable'
	DD	FLAT:?init@LFO@@UAEXW4OscillatorType@@MH@Z
	DD	FLAT:?setSampleRate@LFO@@UAEXH@Z
	DD	FLAT:?processAudio@LFO@@UAEMXZ
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?increaseLFOCounter@LFO@@AAEXXZ PROC			; LFO::increaseLFOCounter
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	lfo_counter += lfo_inc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 80   : 	if (lfo_counter >= WAVETABLE_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@45000000
	jb	SHORT $LN2@increaseLF

; 81   : 		lfo_counter -= WAVETABLE_SIZE;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, DWORD PTR __real@45000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN2@increaseLF:

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?increaseLFOCounter@LFO@@AAEXXZ ENDP			; LFO::increaseLFOCounter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?computeIncrement@LFO@@AAEXXZ PROC			; LFO::computeIncrement
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45000000
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+8]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 75   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?computeIncrement@LFO@@AAEXXZ ENDP			; LFO::computeIncrement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
tv258 = -32						; size = 4
tv74 = -28						; size = 4
tv72 = -24						; size = 4
_readIndexNext$ = -20					; size = 4
_frac$ = -16						; size = 4
_readIndex$ = -12					; size = 4
_yn$ = -8						; size = 4
_this$ = -4						; size = 4
?processAudio@LFO@@UAEMXZ PROC				; LFO::processAudio
; _this$ = ecx

; 107  : {		

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	// Read the LFO value to be returned
; 109  : 	float yn;
; 110  : 	int readIndex = (int)lfo_counter;

	mov	eax, DWORD PTR _this$[ebp]
	cvttss2si ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _readIndex$[ebp], ecx

; 111  : 	float frac = lfo_counter - readIndex;

	cvtsi2ss xmm0, DWORD PTR _readIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 112  : 	int readIndexNext = (readIndex + 1 >= WAVETABLE_SIZE) ? 0 : readIndex + 1;

	mov	eax, DWORD PTR _readIndex$[ebp]
	add	eax, 1
	cmp	eax, 2048				; 00000800H
	jl	SHORT $LN11@processAud
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN12@processAud
$LN11@processAud:
	mov	ecx, DWORD PTR _readIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR tv72[ebp], ecx
$LN12@processAud:
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _readIndexNext$[ebp], edx

; 113  : 
; 114  : 	switch (lfo_waveform) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 3
	ja	$LN8@processAud
	mov	edx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN13@processAud[edx*4]
$LN4@processAud:

; 115  : 	case OscillatorType::Saw:
; 116  : 		yn = linearInterp(0, 1, lfo_saw[readIndex], lfo_saw[readIndexNext], frac);		

	push	ecx
	movss	xmm0, DWORD PTR _frac$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _readIndexNext$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _readIndex$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearInterp@LFO@@QAEMMMMMM@Z		; LFO::linearInterp
	fstp	DWORD PTR _yn$[ebp]

; 117  : 		break;	

	jmp	$LN2@processAud
$LN5@processAud:

; 118  : 	case OscillatorType::Sine:
; 119  : 		yn = linearInterp(0, 1, lfo_sine[readIndex], lfo_sine[readIndexNext], frac);

	push	ecx
	movss	xmm0, DWORD PTR _frac$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _readIndexNext$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _readIndex$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearInterp@LFO@@QAEMMMMMM@Z		; LFO::linearInterp
	fstp	DWORD PTR _yn$[ebp]

; 120  : 		break;	

	jmp	$LN2@processAud
$LN6@processAud:

; 121  : 	case OscillatorType::Triangular:
; 122  : 		yn = linearInterp(0, 1, lfo_triangular[readIndex], lfo_triangular[readIndexNext], frac);

	push	ecx
	movss	xmm0, DWORD PTR _frac$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _readIndexNext$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _readIndex$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearInterp@LFO@@QAEMMMMMM@Z		; LFO::linearInterp
	fstp	DWORD PTR _yn$[ebp]

; 123  : 		break;	

	jmp	SHORT $LN2@processAud
$LN7@processAud:

; 124  : 	case OscillatorType::Pulse:
; 125  : 		yn = linearInterp(0, 1, lfo_pulse[readIndex], lfo_pulse[readIndexNext], frac);		

	push	ecx
	movss	xmm0, DWORD PTR _frac$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _readIndexNext$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _readIndex$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearInterp@LFO@@QAEMMMMMM@Z		; LFO::linearInterp
	fstp	DWORD PTR _yn$[ebp]

; 126  : 		break;

	jmp	SHORT $LN2@processAud
$LN8@processAud:

; 127  : 	default:
; 128  : 		yn = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _yn$[ebp], xmm0
$LN2@processAud:

; 129  : 	}
; 130  : 
; 131  : 	// Increase lfo counter
; 132  : 	increaseLFOCounter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?increaseLFOCounter@LFO@@AAEXXZ		; LFO::increaseLFOCounter

; 133  : 
; 134  : 	// unipolar lfo
; 135  : 	if (lfo_unipolar) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN9@processAud

; 136  : 		yn /= 2.0;

	cvtss2sd xmm0, DWORD PTR _yn$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _yn$[ebp], xmm0

; 137  : 		yn += 0.5;

	cvtss2sd xmm0, DWORD PTR _yn$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _yn$[ebp], xmm0
$LN9@processAud:

; 138  : 	}
; 139  : 	// Return LFO value
; 140  : 	return yn * lfo_amplitude;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yn$[ebp]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR tv258[ebp], xmm0
	fld	DWORD PTR tv258[ebp]

; 141  : 
; 142  : }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@processAud:
	DD	$LN4@processAud
	DD	$LN5@processAud
	DD	$LN6@processAud
	DD	$LN7@processAud
?processAudio@LFO@@UAEMXZ ENDP				; LFO::processAudio
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_result$ = -16						; size = 4
_dx$ = -12						; size = 4
_denom$ = -8						; size = 4
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_y1$ = 16						; size = 4
_y2$ = 20						; size = 4
_x$ = 24						; size = 4
?linearInterp@LFO@@QAEMMMMMM@Z PROC			; LFO::linearInterp
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	float denom = x2 - x1;

	movss	xmm0, DWORD PTR _x2$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _denom$[ebp], xmm0

; 93   : 	if (denom == 0)

	movss	xmm0, DWORD PTR _denom$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@linearInte

; 94   : 		return y1; // should not ever happen

	fld	DWORD PTR _y1$[ebp]
	jmp	SHORT $LN1@linearInte
$LN2@linearInte:

; 95   : 
; 96   : 	// calculate decimal position of x
; 97   : 	float dx = (x - x1) / (x2 - x1);

	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	movss	xmm1, DWORD PTR _x2$[ebp]
	subss	xmm1, DWORD PTR _x1$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 98   : 
; 99   : 	// use weighted sum method of interpolating
; 100  : 	float result = dx * y2 + (1 - dx) * y1;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _y1$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp], xmm0

; 101  : 
; 102  : 	return result;

	fld	DWORD PTR _result$[ebp]
$LN1@linearInte:

; 103  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?linearInterp@LFO@@QAEMMMMMM@Z ENDP			; LFO::linearInterp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sampleRate$ = 8					; size = 4
?setSampleRate@LFO@@UAEXH@Z PROC			; LFO::setSampleRate
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	lfo_sampleRate = sampleRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 87   : 	computeIncrement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeIncrement@LFO@@AAEXXZ		; LFO::computeIncrement

; 88   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setSampleRate@LFO@@UAEXH@Z ENDP			; LFO::setSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLFOFrequency@LFO@@QBEMXZ PROC			; LFO::getLFOFrequency
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	return lfo_frequency;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]

; 70   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLFOFrequency@LFO@@QBEMXZ ENDP			; LFO::getLFOFrequency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_isUnipolar$ = 8					; size = 1
?setLFOunipolar@LFO@@QAEX_N@Z PROC			; LFO::setLFOunipolar
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	lfo_unipolar = isUnipolar;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _isUnipolar$[ebp]
	mov	BYTE PTR [eax+44], cl

; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setLFOunipolar@LFO@@QAEX_N@Z ENDP			; LFO::setLFOunipolar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_amplitude$ = 8						; size = 4
?setLFOAmplitude@LFO@@QAEXM@Z PROC			; LFO::setLFOAmplitude
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	lfo_amplitude = amplitude;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _amplitude$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setLFOAmplitude@LFO@@QAEXM@Z ENDP			; LFO::setLFOAmplitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_waveform$ = 8						; size = 4
?setLFOWaveform@LFO@@QAEXW4OscillatorType@@@Z PROC	; LFO::setLFOWaveform
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	lfo_waveform = waveform;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _waveform$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setLFOWaveform@LFO@@QAEXW4OscillatorType@@@Z ENDP	; LFO::setLFOWaveform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_frequency$ = 8						; size = 4
?setLFOfrequency@LFO@@QAEXM@Z PROC			; LFO::setLFOfrequency
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	lfo_frequency = frequency;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _frequency$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 49   : 	computeIncrement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeIncrement@LFO@@AAEXXZ		; LFO::computeIncrement

; 50   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setLFOfrequency@LFO@@QAEXM@Z ENDP			; LFO::setLFOfrequency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_waveform$ = 8						; size = 4
_frequency$ = 12					; size = 4
_sampleRate$ = 16					; size = 4
?init@LFO@@UAEXW4OscillatorType@@MH@Z PROC		; LFO::init
; _this$ = ecx

; 37   : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	lfo_counter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+20], xmm0

; 39   : 	lfo_amplitude = 1.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+12], xmm0

; 40   : 	lfo_waveform = waveform;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _waveform$[ebp]
	mov	DWORD PTR [edx+16], eax

; 41   : 	lfo_frequency = frequency;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _frequency$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 42   : 	lfo_sampleRate = sampleRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _sampleRate$[ebp]
	mov	DWORD PTR [edx+8], eax

; 43   : 	computeIncrement();	

	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeIncrement@LFO@@AAEXXZ		; LFO::computeIncrement

; 44   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@LFO@@UAEXW4OscillatorType@@MH@Z ENDP		; LFO::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
tv227 = -20						; size = 4
_i$1 = -16						; size = 4
_halfWave$ = -12					; size = 4
_step$ = -8						; size = 4
_this$ = -4						; size = 4
?createWavetables@LFO@@QAEXXZ PROC			; LFO::createWavetables
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	// allocate wavetables memory
; 147  : 	lfo_saw = lfo_sine = lfo_triangular = lfo_pulse = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 148  : 	lfo_saw = (float*)malloc(WAVETABLE_SIZE * sizeof(float));

	mov	esi, esp
	push	8192					; 00002000H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 149  : 	lfo_sine = (float*)malloc(WAVETABLE_SIZE * sizeof(float));

	mov	esi, esp
	push	8192					; 00002000H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], eax

; 150  : 	lfo_triangular = (float*)malloc(WAVETABLE_SIZE * sizeof(float));

	mov	esi, esp
	push	8192					; 00002000H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 151  : 	lfo_pulse = (float*)malloc(WAVETABLE_SIZE * sizeof(float));

	mov	esi, esp
	push	8192					; 00002000H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax

; 152  : 	memset(lfo_saw, 0, WAVETABLE_SIZE * sizeof(float));

	push	8192					; 00002000H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 153  : 	memset(lfo_sine, 0, WAVETABLE_SIZE * sizeof(float));

	push	8192					; 00002000H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 154  : 	memset(lfo_triangular, 0, WAVETABLE_SIZE * sizeof(float));

	push	8192					; 00002000H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 155  : 	memset(lfo_pulse, 0, WAVETABLE_SIZE * sizeof(float));

	push	8192					; 00002000H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 156  : 	
; 157  : 	// define wavetables	
; 158  : 	float step;
; 159  : 	int halfWave = WAVETABLE_SIZE / 2;

	mov	DWORD PTR _halfWave$[ebp], 1024		; 00000400H

; 160  : 	for (int i = 0; i < WAVETABLE_SIZE; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@createWave
$LN2@createWave:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@createWave:
	cmp	DWORD PTR _i$1[ebp], 2048		; 00000800H
	jge	$LN3@createWave

; 161  : 
; 162  : 		// define step reached
; 163  : 		step = (float)i / (float)WAVETABLE_SIZE;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	divss	xmm0, DWORD PTR __real@45000000
	movss	DWORD PTR _step$[ebp], xmm0

; 164  : 
; 165  : 		// saw wave
; 166  : 		lfo_saw[i] = 2.0 * step - 1.0;

	cvtss2sd xmm0, DWORD PTR _step$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _i$1[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 167  : 
; 168  : 		// sine wave
; 169  : 		if (i != 0)

	cmp	DWORD PTR _i$1[ebp], 0
	je	SHORT $LN5@createWave

; 170  : 			lfo_sine[i] = sin(step * 2.0 * M_PI);

	cvtss2sd xmm0, DWORD PTR _step$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv227[ebp]
	fld	DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$1[ebp]
	fstp	DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN6@createWave
$LN5@createWave:

; 171  : 		else
; 172  : 			lfo_sine[i] = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$1[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx*4], xmm0
$LN6@createWave:

; 173  : 
; 174  : 		// triangular and pulse waves
; 175  : 		if (i <= halfWave) {

	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _halfWave$[ebp]
	jg	SHORT $LN7@createWave

; 176  : 			lfo_triangular[i] = 4.0 * step - 1.0;

	cvtss2sd xmm0, DWORD PTR _step$[ebp]
	mulsd	xmm0, QWORD PTR __real@4010000000000000
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$1[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 177  : 			lfo_pulse[i] = 1.0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$1[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax*4], xmm0

; 178  : 		}

	jmp	SHORT $LN8@createWave
$LN7@createWave:

; 179  : 		else {
; 180  : 			lfo_triangular[i] = 3.0 - 4.0 * step;

	cvtss2sd xmm0, DWORD PTR _step$[ebp]
	mulsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	xmm1, QWORD PTR __real@4008000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$1[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 181  : 			lfo_pulse[i] = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$1[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax*4], xmm0
$LN8@createWave:

; 182  : 		}		
; 183  : 	}

	jmp	$LN2@createWave
$LN3@createWave:

; 184  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?createWavetables@LFO@@QAEXXZ ENDP			; LFO::createWavetables
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
??1LFO@@QAE@XZ PROC					; LFO::~LFO
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LFO@@6B@

; 29   : 	delete(lfo_sine);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR $T4[ebp], edx
	push	4
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 30   : 	delete(lfo_saw);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T3[ebp], edx
	push	4
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 31   : 	delete(lfo_triangular);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T2[ebp], edx
	push	4
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 32   : 	delete(lfo_pulse);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T1[ebp], edx
	push	4
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 33   : 	lfo_sine = lfo_saw = lfo_triangular = lfo_pulse = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 34   : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1LFO@@QAE@XZ ENDP					; LFO::~LFO
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\LFO.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LFO@@QAE@XZ PROC					; LFO::LFO
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LFO@@6B@

; 10   : 	lfo_counter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+20], xmm0

; 11   : 	lfo_sampleRate = 44100;	

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 44100		; 0000ac44H

; 12   : 	lfo_frequency = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0

; 13   : 	lfo_amplitude = 1.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+12], xmm0

; 14   : 	lfo_inc = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+24], xmm0

; 15   : 	lfo_waveform = OscillatorType::Sine;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 1

; 16   : 	lfo_unipolar = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+44], 0

; 17   : 	createWavetables();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?createWavetables@LFO@@QAEXXZ		; LFO::createWavetables

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0LFO@@QAE@XZ ENDP					; LFO::LFO
_TEXT	ENDS
END
