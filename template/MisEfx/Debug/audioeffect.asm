; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	E:\FoxSuite\misefx\MisEfx\Debug\audioeffect.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG9177	DB	'-oo', 00H
$SG9225	DB	'Huge!', 00H
$SG9252	DB	00H
	ORG $+1
$SG9227	DB	'Huge!', 00H
	ORG $+2
$SG9248	DB	'Huge!', 00H
	ORG $+2
$SG9251	DB	'-', 00H
CONST	ENDS
PUBLIC	?vst_strncpy@@YAPADPADPBDI@Z			; vst_strncpy
PUBLIC	?vst_strncat@@YAPADPADPBDI@Z			; vst_strncat
PUBLIC	??0AudioEffect@@QAE@P6AHPAUAEffect@@HHHPAXM@ZHH@Z ; AudioEffect::AudioEffect
PUBLIC	??1AudioEffect@@UAE@XZ				; AudioEffect::~AudioEffect
PUBLIC	?dispatcher@AudioEffect@@UAEHHHHPAXM@Z		; AudioEffect::dispatcher
PUBLIC	?open@AudioEffect@@UAEXXZ			; AudioEffect::open
PUBLIC	?close@AudioEffect@@UAEXXZ			; AudioEffect::close
PUBLIC	?suspend@AudioEffect@@UAEXXZ			; AudioEffect::suspend
PUBLIC	?resume@AudioEffect@@UAEXXZ			; AudioEffect::resume
PUBLIC	?setSampleRate@AudioEffect@@UAEXM@Z		; AudioEffect::setSampleRate
PUBLIC	?setBlockSize@AudioEffect@@UAEXH@Z		; AudioEffect::setBlockSize
PUBLIC	?processDoubleReplacing@AudioEffect@@UAEXPAPAN0H@Z ; AudioEffect::processDoubleReplacing
PUBLIC	?setParameter@AudioEffect@@UAEXHM@Z		; AudioEffect::setParameter
PUBLIC	?getParameter@AudioEffect@@UAEMH@Z		; AudioEffect::getParameter
PUBLIC	?setParameterAutomated@AudioEffect@@UAEXHM@Z	; AudioEffect::setParameterAutomated
PUBLIC	?getProgram@AudioEffect@@UAEHXZ			; AudioEffect::getProgram
PUBLIC	?setProgram@AudioEffect@@UAEXH@Z		; AudioEffect::setProgram
PUBLIC	?setProgramName@AudioEffect@@UAEXPAD@Z		; AudioEffect::setProgramName
PUBLIC	?getProgramName@AudioEffect@@UAEXPAD@Z		; AudioEffect::getProgramName
PUBLIC	?getParameterLabel@AudioEffect@@UAEXHPAD@Z	; AudioEffect::getParameterLabel
PUBLIC	?getParameterDisplay@AudioEffect@@UAEXHPAD@Z	; AudioEffect::getParameterDisplay
PUBLIC	?getParameterName@AudioEffect@@UAEXHPAD@Z	; AudioEffect::getParameterName
PUBLIC	?getChunk@AudioEffect@@UAEHPAPAX_N@Z		; AudioEffect::getChunk
PUBLIC	?setChunk@AudioEffect@@UAEHPAXH_N@Z		; AudioEffect::setChunk
PUBLIC	?setUniqueID@AudioEffect@@UAEXH@Z		; AudioEffect::setUniqueID
PUBLIC	?setNumInputs@AudioEffect@@UAEXH@Z		; AudioEffect::setNumInputs
PUBLIC	?setNumOutputs@AudioEffect@@UAEXH@Z		; AudioEffect::setNumOutputs
PUBLIC	?canProcessReplacing@AudioEffect@@UAEX_N@Z	; AudioEffect::canProcessReplacing
PUBLIC	?canDoubleReplacing@AudioEffect@@UAEX_N@Z	; AudioEffect::canDoubleReplacing
PUBLIC	?programsAreChunks@AudioEffect@@UAEX_N@Z	; AudioEffect::programsAreChunks
PUBLIC	?setInitialDelay@AudioEffect@@UAEXH@Z		; AudioEffect::setInitialDelay
PUBLIC	?setEditor@AudioEffect@@QAEXPAVAEffEditor@@@Z	; AudioEffect::setEditor
PUBLIC	?getEditor@AudioEffect@@UAEPAVAEffEditor@@XZ	; AudioEffect::getEditor
PUBLIC	?getAeffect@AudioEffect@@UAEPAUAEffect@@XZ	; AudioEffect::getAeffect
PUBLIC	?getSampleRate@AudioEffect@@UAEMXZ		; AudioEffect::getSampleRate
PUBLIC	?getBlockSize@AudioEffect@@UAEHXZ		; AudioEffect::getBlockSize
PUBLIC	?getMasterVersion@AudioEffect@@UAEHXZ		; AudioEffect::getMasterVersion
PUBLIC	?getCurrentUniqueId@AudioEffect@@UAEHXZ		; AudioEffect::getCurrentUniqueId
PUBLIC	?masterIdle@AudioEffect@@UAEXXZ			; AudioEffect::masterIdle
PUBLIC	?dB2string@AudioEffect@@UAEXMPADH@Z		; AudioEffect::dB2string
PUBLIC	?Hz2string@AudioEffect@@UAEXMPADH@Z		; AudioEffect::Hz2string
PUBLIC	?ms2string@AudioEffect@@UAEXMPADH@Z		; AudioEffect::ms2string
PUBLIC	?float2string@AudioEffect@@UAEXMPADH@Z		; AudioEffect::float2string
PUBLIC	?int2string@AudioEffect@@UAEXHPADH@Z		; AudioEffect::int2string
PUBLIC	?__processDeprecated@AudioEffect@@UAEXPAPAM0H@Z	; AudioEffect::__processDeprecated
PUBLIC	?__getVuDeprecated@AudioEffect@@UAEMXZ		; AudioEffect::__getVuDeprecated
PUBLIC	?__hasVuDeprecated@AudioEffect@@UAEX_N@Z	; AudioEffect::__hasVuDeprecated
PUBLIC	?__hasClipDeprecated@AudioEffect@@UAEX_N@Z	; AudioEffect::__hasClipDeprecated
PUBLIC	?__canMonoDeprecated@AudioEffect@@UAEX_N@Z	; AudioEffect::__canMonoDeprecated
PUBLIC	?__setRealtimeQualitiesDeprecated@AudioEffect@@UAEXH@Z ; AudioEffect::__setRealtimeQualitiesDeprecated
PUBLIC	?__setOfflineQualitiesDeprecated@AudioEffect@@UAEXH@Z ; AudioEffect::__setOfflineQualitiesDeprecated
PUBLIC	?__isInputConnectedDeprecated@AudioEffect@@UAE_NH@Z ; AudioEffect::__isInputConnectedDeprecated
PUBLIC	?__isOutputConnectedDeprecated@AudioEffect@@UAE_NH@Z ; AudioEffect::__isOutputConnectedDeprecated
PUBLIC	?dispatchEffectClass@AudioEffect@@KAHPAUAEffect@@HHHPAXM@Z ; AudioEffect::dispatchEffectClass
PUBLIC	?getParameterClass@AudioEffect@@KAMPAUAEffect@@H@Z ; AudioEffect::getParameterClass
PUBLIC	?setParameterClass@AudioEffect@@KAXPAUAEffect@@HM@Z ; AudioEffect::setParameterClass
PUBLIC	?__processClassDeprecated@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ; AudioEffect::__processClassDeprecated
PUBLIC	?processClassReplacing@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ; AudioEffect::processClassReplacing
PUBLIC	?processClassDoubleReplacing@AudioEffect@@KAXPAUAEffect@@PAPAN1H@Z ; AudioEffect::processClassDoubleReplacing
PUBLIC	??_GAudioEffect@@UAEPAXI@Z			; AudioEffect::`scalar deleting destructor'
PUBLIC	??_7AudioEffect@@6B@				; AudioEffect::`vftable'
PUBLIC	??_R4AudioEffect@@6B@				; AudioEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAudioEffect@@@8				; AudioEffect `RTTI Type Descriptor'
PUBLIC	??_R3AudioEffect@@8				; AudioEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AudioEffect@@8				; AudioEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AudioEffect@@8			; AudioEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@416312cfe0000000
PUBLIC	__real@4197d783fc000000
PUBLIC	__real@472c4400
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	__imp__strncat:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	??_EAudioEffect@@UAEPAXI@Z:PROC			; AudioEffect::`vector deleting destructor'
EXTRN	_fmod:PROC
EXTRN	_log10:PROC
EXTRN	_pow:PROC
EXTRN	__imp__floor:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@472c4400
CONST	SEGMENT
__real@472c4400 DD 0472c4400r			; 44100
CONST	ENDS
;	COMDAT __real@4197d783fc000000
CONST	SEGMENT
__real@4197d783fc000000 DQ 04197d783fc000000r	; 1e+08
CONST	ENDS
;	COMDAT __real@416312cfe0000000
CONST	SEGMENT
__real@416312cfe0000000 DQ 0416312cfe0000000r	; 1e+07
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@AudioEffect@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AudioEffect@@8 DD FLAT:??_R0?AVAudioEffect@@@8 ; AudioEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AudioEffect@@8
rdata$r	ENDS
;	COMDAT ??_R2AudioEffect@@8
rdata$r	SEGMENT
??_R2AudioEffect@@8 DD FLAT:??_R1A@?0A@EA@AudioEffect@@8 ; AudioEffect::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AudioEffect@@8
rdata$r	SEGMENT
??_R3AudioEffect@@8 DD 00H				; AudioEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AudioEffect@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAudioEffect@@@8
data$rs	SEGMENT
??_R0?AVAudioEffect@@@8 DD FLAT:??_7type_info@@6B@	; AudioEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAudioEffect@@', 00H
data$rs	ENDS
;	COMDAT ??_R4AudioEffect@@6B@
rdata$r	SEGMENT
??_R4AudioEffect@@6B@ DD 00H				; AudioEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAudioEffect@@@8
	DD	FLAT:??_R3AudioEffect@@8
rdata$r	ENDS
;	COMDAT ??_7AudioEffect@@6B@
CONST	SEGMENT
??_7AudioEffect@@6B@ DD FLAT:??_R4AudioEffect@@6B@	; AudioEffect::`vftable'
	DD	FLAT:??_EAudioEffect@@UAEPAXI@Z
	DD	FLAT:?dispatcher@AudioEffect@@UAEHHHHPAXM@Z
	DD	FLAT:?open@AudioEffect@@UAEXXZ
	DD	FLAT:?close@AudioEffect@@UAEXXZ
	DD	FLAT:?suspend@AudioEffect@@UAEXXZ
	DD	FLAT:?resume@AudioEffect@@UAEXXZ
	DD	FLAT:?setSampleRate@AudioEffect@@UAEXM@Z
	DD	FLAT:?setBlockSize@AudioEffect@@UAEXH@Z
	DD	FLAT:__purecall
	DD	FLAT:?processDoubleReplacing@AudioEffect@@UAEXPAPAN0H@Z
	DD	FLAT:?setParameter@AudioEffect@@UAEXHM@Z
	DD	FLAT:?getParameter@AudioEffect@@UAEMH@Z
	DD	FLAT:?setParameterAutomated@AudioEffect@@UAEXHM@Z
	DD	FLAT:?getProgram@AudioEffect@@UAEHXZ
	DD	FLAT:?setProgram@AudioEffect@@UAEXH@Z
	DD	FLAT:?setProgramName@AudioEffect@@UAEXPAD@Z
	DD	FLAT:?getProgramName@AudioEffect@@UAEXPAD@Z
	DD	FLAT:?getParameterLabel@AudioEffect@@UAEXHPAD@Z
	DD	FLAT:?getParameterDisplay@AudioEffect@@UAEXHPAD@Z
	DD	FLAT:?getParameterName@AudioEffect@@UAEXHPAD@Z
	DD	FLAT:?getChunk@AudioEffect@@UAEHPAPAX_N@Z
	DD	FLAT:?setChunk@AudioEffect@@UAEHPAXH_N@Z
	DD	FLAT:?setUniqueID@AudioEffect@@UAEXH@Z
	DD	FLAT:?setNumInputs@AudioEffect@@UAEXH@Z
	DD	FLAT:?setNumOutputs@AudioEffect@@UAEXH@Z
	DD	FLAT:?canProcessReplacing@AudioEffect@@UAEX_N@Z
	DD	FLAT:?canDoubleReplacing@AudioEffect@@UAEX_N@Z
	DD	FLAT:?programsAreChunks@AudioEffect@@UAEX_N@Z
	DD	FLAT:?setInitialDelay@AudioEffect@@UAEXH@Z
	DD	FLAT:?getEditor@AudioEffect@@UAEPAVAEffEditor@@XZ
	DD	FLAT:?getAeffect@AudioEffect@@UAEPAUAEffect@@XZ
	DD	FLAT:?getSampleRate@AudioEffect@@UAEMXZ
	DD	FLAT:?getBlockSize@AudioEffect@@UAEHXZ
	DD	FLAT:?getMasterVersion@AudioEffect@@UAEHXZ
	DD	FLAT:?getCurrentUniqueId@AudioEffect@@UAEHXZ
	DD	FLAT:?masterIdle@AudioEffect@@UAEXXZ
	DD	FLAT:?dB2string@AudioEffect@@UAEXMPADH@Z
	DD	FLAT:?Hz2string@AudioEffect@@UAEXMPADH@Z
	DD	FLAT:?ms2string@AudioEffect@@UAEXMPADH@Z
	DD	FLAT:?float2string@AudioEffect@@UAEXMPADH@Z
	DD	FLAT:?int2string@AudioEffect@@UAEXHPADH@Z
	DD	FLAT:?__processDeprecated@AudioEffect@@UAEXPAPAM0H@Z
	DD	FLAT:?__getVuDeprecated@AudioEffect@@UAEMXZ
	DD	FLAT:?__hasVuDeprecated@AudioEffect@@UAEX_N@Z
	DD	FLAT:?__hasClipDeprecated@AudioEffect@@UAEX_N@Z
	DD	FLAT:?__canMonoDeprecated@AudioEffect@@UAEX_N@Z
	DD	FLAT:?__setRealtimeQualitiesDeprecated@AudioEffect@@UAEXH@Z
	DD	FLAT:?__setOfflineQualitiesDeprecated@AudioEffect@@UAEXH@Z
	DD	FLAT:?__isInputConnectedDeprecated@AudioEffect@@UAE_NH@Z
	DD	FLAT:?__isOutputConnectedDeprecated@AudioEffect@@UAE_NH@Z
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GAudioEffect@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAudioEffect@@UAEPAXI@Z PROC				; AudioEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AudioEffect@@UAE@XZ			; AudioEffect::~AudioEffect
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	176					; 000000b0H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAudioEffect@@UAEPAXI@Z ENDP				; AudioEffect::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_inputs$ = 12						; size = 4
_outputs$ = 16						; size = 4
_sampleFrames$ = 20					; size = 4
?processClassDoubleReplacing@AudioEffect@@KAXPAUAEffect@@PAPAN1H@Z PROC ; AudioEffect::processClassDoubleReplacing

; 66   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 67   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 68   : 	ae->processDoubleReplacing (inputs, outputs, sampleFrames);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleFrames$[ebp]
	push	edx
	mov	eax, DWORD PTR _outputs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 69   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?processClassDoubleReplacing@AudioEffect@@KAXPAUAEffect@@PAPAN1H@Z ENDP ; AudioEffect::processClassDoubleReplacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_inputs$ = 12						; size = 4
_outputs$ = 16						; size = 4
_sampleFrames$ = 20					; size = 4
?processClassReplacing@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z PROC ; AudioEffect::processClassReplacing

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 59   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 60   : 	ae->processReplacing (inputs, outputs, sampleFrames);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleFrames$[ebp]
	push	edx
	mov	eax, DWORD PTR _outputs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?processClassReplacing@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ENDP ; AudioEffect::processClassReplacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_inputs$ = 12						; size = 4
_outputs$ = 16						; size = 4
_sampleFrames$ = 20					; size = 4
?__processClassDeprecated@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z PROC ; AudioEffect::__processClassDeprecated

; 51   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 52   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 53   : 	ae->DECLARE_VST_DEPRECATED (process) (inputs, outputs, sampleFrames);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleFrames$[ebp]
	push	edx
	mov	eax, DWORD PTR _outputs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax+164]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__processClassDeprecated@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ENDP ; AudioEffect::__processClassDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_index$ = 12						; size = 4
_value$ = 16						; size = 4
?setParameterClass@AudioEffect@@KAXPAUAEffect@@HM@Z PROC ; AudioEffect::setParameterClass

; 44   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 45   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 46   : 	ae->setParameter (index, value);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 47   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setParameterClass@AudioEffect@@KAXPAUAEffect@@HM@Z ENDP ; AudioEffect::setParameterClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_index$ = 12						; size = 4
?getParameterClass@AudioEffect@@KAMPAUAEffect@@H@Z PROC	; AudioEffect::getParameterClass

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 38   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 39   : 	return ae->getParameter (index);

	mov	esi, esp
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 40   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getParameterClass@AudioEffect@@KAMPAUAEffect@@H@Z ENDP	; AudioEffect::getParameterClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv80 = -12						; size = 4
$T1 = -8						; size = 4
_ae$ = -4						; size = 4
_e$ = 8							; size = 4
_opCode$ = 12						; size = 4
_index$ = 16						; size = 4
_value$ = 20						; size = 4
_ptr$ = 24						; size = 4
_opt$ = 28						; size = 4
?dispatchEffectClass@AudioEffect@@KAHPAUAEffect@@HHHPAXM@Z PROC ; AudioEffect::dispatchEffectClass

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   : 	AudioEffect* ae = (AudioEffect*)(e->object);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _ae$[ebp], ecx

; 24   : 
; 25   : 	if (opCode == effClose)

	cmp	DWORD PTR _opCode$[ebp], 1
	jne	SHORT $LN2@dispatchEf

; 26   : 	{
; 27   : 		ae->dispatcher (opCode, index, value, ptr, opt);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opCode$[ebp]
	push	edx
	mov	eax, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : 		delete ae;

	mov	ecx, DWORD PTR _ae$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@dispatchEf
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@dispatchEf
$LN4@dispatchEf:
	mov	DWORD PTR tv80[ebp], 0
$LN5@dispatchEf:

; 29   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@dispatchEf
$LN2@dispatchEf:

; 30   : 	}
; 31   : 
; 32   : 	return ae->dispatcher (opCode, index, value, ptr, opt);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _opCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ae$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@dispatchEf:

; 33   : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dispatchEffectClass@AudioEffect@@KAHPAUAEffect@@HHHPAXM@Z ENDP ; AudioEffect::dispatchEffectClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv76 = -9						; size = 1
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
_output$ = 8						; size = 4
?__isOutputConnectedDeprecated@AudioEffect@@UAE_NH@Z PROC ; AudioEffect::__isOutputConnectedDeprecated
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	VstInt32 ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 247  : 	if (audioMaster)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@isOutputCo

; 248  : 		ret = (VstInt32)audioMaster (&cEffect, DECLARE_VST_DEPRECATED (audioMasterPinConnected), output, 1, 0, 0);

	mov	esi, esp
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
$LN2@isOutputCo:

; 249  : 	return ret ? false : true;		// return value is 0 for true

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN4@isOutputCo
	mov	BYTE PTR tv76[ebp], 0
	jmp	SHORT $LN5@isOutputCo
$LN4@isOutputCo:
	mov	BYTE PTR tv76[ebp], 1
$LN5@isOutputCo:
	mov	al, BYTE PTR tv76[ebp]

; 250  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__isOutputConnectedDeprecated@AudioEffect@@UAE_NH@Z ENDP ; AudioEffect::__isOutputConnectedDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv76 = -9						; size = 1
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
_input$ = 8						; size = 4
?__isInputConnectedDeprecated@AudioEffect@@UAE_NH@Z PROC ; AudioEffect::__isInputConnectedDeprecated
; _this$ = ecx

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	VstInt32 ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 238  : 	if (audioMaster)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@isInputCon

; 239  : 		ret = (VstInt32)audioMaster (&cEffect, DECLARE_VST_DEPRECATED (audioMasterPinConnected), input, 0, 0, 0);

	mov	esi, esp
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
$LN2@isInputCon:

; 240  : 	return ret ? false : true;		// return value is 0 for true

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN4@isInputCon
	mov	BYTE PTR tv76[ebp], 0
	jmp	SHORT $LN5@isInputCon
$LN4@isInputCon:
	mov	BYTE PTR tv76[ebp], 1
$LN5@isInputCon:
	mov	al, BYTE PTR tv76[ebp]

; 241  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__isInputConnectedDeprecated@AudioEffect@@UAE_NH@Z ENDP ; AudioEffect::__isInputConnectedDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_qualities$ = 8						; size = 4
?__setOfflineQualitiesDeprecated@AudioEffect@@UAEXH@Z PROC ; AudioEffect::__setOfflineQualitiesDeprecated
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 	cEffect.DECLARE_VST_DEPRECATED (offQualities) = qualities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qualities$[ebp]
	mov	DWORD PTR [eax+88], ecx

; 354  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?__setOfflineQualitiesDeprecated@AudioEffect@@UAEXH@Z ENDP ; AudioEffect::__setOfflineQualitiesDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_qualities$ = 8						; size = 4
?__setRealtimeQualitiesDeprecated@AudioEffect@@UAEXH@Z PROC ; AudioEffect::__setRealtimeQualitiesDeprecated
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 	cEffect.DECLARE_VST_DEPRECATED (realQualities) = qualities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qualities$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 348  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?__setRealtimeQualitiesDeprecated@AudioEffect@@UAEXH@Z ENDP ; AudioEffect::__setRealtimeQualitiesDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?__canMonoDeprecated@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::__canMonoDeprecated
; _this$ = ecx

; 293  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@canMonoDep

; 295  : 		cEffect.flags |= DECLARE_VST_DEPRECATED (effFlagsCanMono);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@canMonoDep
$LN2@canMonoDep:

; 296  : 	else
; 297  : 		cEffect.flags &= ~DECLARE_VST_DEPRECATED (effFlagsCanMono);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@canMonoDep:

; 298  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?__canMonoDeprecated@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::__canMonoDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?__hasClipDeprecated@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::__hasClipDeprecated
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@hasClipDep

; 286  : 		cEffect.flags |= DECLARE_VST_DEPRECATED (effFlagsHasClip);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@hasClipDep
$LN2@hasClipDep:

; 287  : 	else
; 288  : 		cEffect.flags &= ~DECLARE_VST_DEPRECATED (effFlagsHasClip);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@hasClipDep:

; 289  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?__hasClipDeprecated@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::__hasClipDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?__hasVuDeprecated@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::__hasVuDeprecated
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@hasVuDepre

; 277  : 		cEffect.flags |= DECLARE_VST_DEPRECATED (effFlagsHasVu);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@hasVuDepre
$LN2@hasVuDepre:

; 278  : 	else
; 279  : 		cEffect.flags &= ~DECLARE_VST_DEPRECATED (effFlagsHasVu);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@hasVuDepre:

; 280  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?__hasVuDeprecated@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::__hasVuDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?__getVuDeprecated@AudioEffect@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?__getVuDeprecated@AudioEffect@@UAEMXZ PROC		; AudioEffect::__getVuDeprecated, COMDAT
; _this$ = ecx

; 143  : 	virtual float DECLARE_VST_DEPRECATED (getVu) () { return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?__getVuDeprecated@AudioEffect@@UAEMXZ ENDP		; AudioEffect::__getVuDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?__processDeprecated@AudioEffect@@UAEXPAPAM0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inputs$ = 8						; size = 4
_outputs$ = 12						; size = 4
_sampleFrames$ = 16					; size = 4
?__processDeprecated@AudioEffect@@UAEXPAPAM0H@Z PROC	; AudioEffect::__processDeprecated, COMDAT
; _this$ = ecx

; 142  : 	virtual void DECLARE_VST_DEPRECATED (process) (float** inputs, float** outputs, VstInt32 sampleFrames) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?__processDeprecated@AudioEffect@@UAEXPAPAM0H@Z ENDP	; AudioEffect::__processDeprecated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_temp$1 = -24						; size = 2
_digit$2 = -16						; size = 4
_div$3 = -12						; size = 4
_state$ = -5						; size = 1
_this$ = -4						; size = 4
_value$ = 8						; size = 4
_text$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?int2string@AudioEffect@@UAEXHPADH@Z PROC		; AudioEffect::int2string
; _this$ = ecx

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 491  : 	if (value >= 100000000)

	cmp	DWORD PTR _value$[ebp], 100000000	; 05f5e100H
	jl	SHORT $LN5@int2string

; 492  : 	{
; 493  : 		vst_strncpy (text, "Huge!", maxLen);

	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	push	OFFSET $SG9248
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH

; 494  : 		return;

	jmp	$LN1@int2string
$LN5@int2string:

; 495  : 	}
; 496  : 
; 497  : 	if (value < 0)

	cmp	DWORD PTR _value$[ebp], 0
	jge	SHORT $LN6@int2string

; 498  : 	{
; 499  : 		vst_strncpy (text, "-", maxLen);

	mov	edx, DWORD PTR _maxLen$[ebp]
	push	edx
	push	OFFSET $SG9251
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH

; 500  : 		value = -value;

	mov	ecx, DWORD PTR _value$[ebp]
	neg	ecx
	mov	DWORD PTR _value$[ebp], ecx

; 501  : 	}

	jmp	SHORT $LN7@int2string
$LN6@int2string:

; 502  : 	else
; 503  : 		vst_strncpy (text, "", maxLen);

	mov	edx, DWORD PTR _maxLen$[ebp]
	push	edx
	push	OFFSET $SG9252
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH
$LN7@int2string:

; 504  : 
; 505  : 	bool state = false;

	mov	BYTE PTR _state$[ebp], 0

; 506  : 	for (VstInt32 div = 100000000; div >= 1; div /= 10)

	mov	DWORD PTR _div$3[ebp], 100000000	; 05f5e100H
	jmp	SHORT $LN4@int2string
$LN2@int2string:
	mov	eax, DWORD PTR _div$3[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _div$3[ebp], eax
$LN4@int2string:
	cmp	DWORD PTR _div$3[ebp], 1
	jl	SHORT $LN1@int2string

; 507  : 	{
; 508  : 		VstInt32 digit = value / div;

	mov	eax, DWORD PTR _value$[ebp]
	cdq
	idiv	DWORD PTR _div$3[ebp]
	mov	DWORD PTR _digit$2[ebp], eax

; 509  : 		value -= digit * div;

	mov	edx, DWORD PTR _digit$2[ebp]
	imul	edx, DWORD PTR _div$3[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, edx
	mov	DWORD PTR _value$[ebp], eax

; 510  : 		if (state || digit > 0)

	movzx	ecx, BYTE PTR _state$[ebp]
	test	ecx, ecx
	jne	SHORT $LN9@int2string
	cmp	DWORD PTR _digit$2[ebp], 0
	jle	SHORT $LN8@int2string
$LN9@int2string:

; 511  : 		{
; 512  : 			char temp[2] = {static_cast<char>('0' + (char)digit), '\0'};

	movsx	edx, BYTE PTR _digit$2[ebp]
	add	edx, 48					; 00000030H
	mov	BYTE PTR _temp$1[ebp], dl
	mov	BYTE PTR _temp$1[ebp+1], 0

; 513  : 			vst_strncat (text, temp, maxLen);

	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	?vst_strncat@@YAPADPADPBDI@Z		; vst_strncat
	add	esp, 12					; 0000000cH

; 514  : 			state = true;

	mov	BYTE PTR _state$[ebp], 1
$LN8@int2string:

; 515  : 		}
; 516  : 	}

	jmp	SHORT $LN2@int2string
$LN1@int2string:

; 517  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@int2string
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN13@int2string:
	DD	1
	DD	$LN12@int2string
$LN12@int2string:
	DD	-24					; ffffffe8H
	DD	2
	DD	$LN11@int2string
$LN11@int2string:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?int2string@AudioEffect@@UAEXHPADH@Z ENDP		; AudioEffect::int2string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv230 = -112						; size = 8
_ten$ = -104						; size = 8
_m10$ = -96						; size = 8
_mantissa$ = -88					; size = 8
_i10$ = -80						; size = 8
_integ$ = -72						; size = 8
_v$ = -64						; size = 8
_s$ = -56						; size = 4
_string$ = -48						; size = 32
_neg$ = -12						; size = 4
_c$ = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
_text$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?float2string@AudioEffect@@UAEXMPADH@Z PROC		; AudioEffect::float2string
; _this$ = ecx

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 	VstInt32 c = 0, neg = 0;

	mov	DWORD PTR _c$[ebp], 0
	mov	DWORD PTR _neg$[ebp], 0

; 418  : 	char string[32];
; 419  : 	char* s;
; 420  : 	double v, integ, i10, mantissa, m10, ten = 10.;

	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR _ten$[ebp], xmm0

; 421  : 	
; 422  : 	v = (double)value;

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	movsd	QWORD PTR _v$[ebp], xmm0

; 423  : 	if (v < 0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _v$[ebp]
	jbe	SHORT $LN6@float2stri

; 424  : 	{
; 425  : 		neg = 1;

	mov	DWORD PTR _neg$[ebp], 1

; 426  : 		value = -value;

	movss	xmm0, DWORD PTR _value$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _value$[ebp], xmm0

; 427  : 		v = -v;

	movsd	xmm0, QWORD PTR _v$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _v$[ebp], xmm0

; 428  : 		c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 429  : 		if (v > 9999999.)

	movsd	xmm0, QWORD PTR _v$[ebp]
	comisd	xmm0, QWORD PTR __real@416312cfe0000000
	jbe	SHORT $LN8@float2stri

; 430  : 		{
; 431  : 			vst_strncpy (string, "Huge!", 31);

	push	31					; 0000001fH
	push	OFFSET $SG9225
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH

; 432  : 			return;

	jmp	$LN1@float2stri
$LN8@float2stri:

; 433  : 		}
; 434  : 	}

	jmp	SHORT $LN9@float2stri
$LN6@float2stri:

; 435  : 	else if (v > 99999999.)

	movsd	xmm0, QWORD PTR _v$[ebp]
	comisd	xmm0, QWORD PTR __real@4197d783fc000000
	jbe	SHORT $LN9@float2stri

; 436  : 	{
; 437  : 		vst_strncpy (string, "Huge!", 31);

	push	31					; 0000001fH
	push	OFFSET $SG9227
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH

; 438  : 		return;

	jmp	$LN1@float2stri
$LN9@float2stri:

; 439  : 	}
; 440  : 
; 441  : 	s = string + 31;

	lea	eax, DWORD PTR _string$[ebp+31]
	mov	DWORD PTR _s$[ebp], eax

; 442  : 	*s-- = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 1
	mov	DWORD PTR _s$[ebp], edx

; 443  : 	*s-- = '.';

	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx

; 444  : 	c++;

	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx

; 445  : 	
; 446  : 	integ = floor (v);

	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__floor
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _integ$[ebp]

; 447  : 	i10 = fmod (integ, ten);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _integ$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _i10$[ebp]

; 448  : 	*s-- = (char)((VstInt32)i10 + '0');

	cvttsd2si eax, QWORD PTR _i10$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 1
	mov	DWORD PTR _s$[ebp], edx

; 449  : 	integ /= ten;

	movsd	xmm0, QWORD PTR _integ$[ebp]
	divsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR _integ$[ebp], xmm0

; 450  : 	c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN2@float2stri:

; 451  : 	while (integ >= 1. && c < 8)

	movsd	xmm0, QWORD PTR _integ$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jb	SHORT $LN3@float2stri
	cmp	DWORD PTR _c$[ebp], 8
	jge	SHORT $LN3@float2stri

; 452  : 	{
; 453  : 		i10 = fmod (integ, ten);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _integ$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _i10$[ebp]

; 454  : 		*s-- = (char)((VstInt32)i10 + '0');

	cvttsd2si ecx, QWORD PTR _i10$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$[ebp], eax

; 455  : 		integ /= ten;

	movsd	xmm0, QWORD PTR _integ$[ebp]
	divsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR _integ$[ebp], xmm0

; 456  : 		c++;

	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 457  : 	}

	jmp	SHORT $LN2@float2stri
$LN3@float2stri:

; 458  : 	if (neg)

	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN10@float2stri

; 459  : 		*s-- = '-';

	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 45			; 0000002dH
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$[ebp], eax
$LN10@float2stri:

; 460  : 	vst_strncpy (text, s + 1, maxLen);

	mov	ecx, DWORD PTR _maxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH

; 461  : 	if (c >= 8)

	cmp	DWORD PTR _c$[ebp], 8
	jl	SHORT $LN11@float2stri

; 462  : 		return;

	jmp	$LN1@float2stri
$LN11@float2stri:

; 463  : 
; 464  : 	s = string + 31;

	lea	ecx, DWORD PTR _string$[ebp+31]
	mov	DWORD PTR _s$[ebp], ecx

; 465  : 	*s-- = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$[ebp], eax

; 466  : 	mantissa = fmod (v, 1.);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _mantissa$[ebp]

; 467  : 	mantissa *= pow (ten, (double)(8 - c));

	mov	ecx, 8
	sub	ecx, DWORD PTR _c$[ebp]
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv230[ebp]
	movsd	xmm0, QWORD PTR tv230[ebp]
	mulsd	xmm0, QWORD PTR _mantissa$[ebp]
	movsd	QWORD PTR _mantissa$[ebp], xmm0
$LN4@float2stri:

; 468  : 	while (c < 8)

	cmp	DWORD PTR _c$[ebp], 8
	jge	SHORT $LN5@float2stri

; 469  : 	{
; 470  : 		if (mantissa <= 0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _mantissa$[ebp]
	jb	SHORT $LN12@float2stri

; 471  : 			*s-- = '0';

	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 48			; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN13@float2stri
$LN12@float2stri:

; 472  : 		else
; 473  : 		{
; 474  : 			m10 = fmod (mantissa, ten);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _ten$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _mantissa$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fmod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _m10$[ebp]

; 475  : 			*s-- = (char)((VstInt32)m10 + '0');

	cvttsd2si ecx, QWORD PTR _m10$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$[ebp], eax

; 476  : 			mantissa /= 10.;

	movsd	xmm0, QWORD PTR _mantissa$[ebp]
	divsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR _mantissa$[ebp], xmm0
$LN13@float2stri:

; 477  : 		}
; 478  : 		c++;

	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 479  : 	}

	jmp	SHORT $LN4@float2stri
$LN5@float2stri:

; 480  : 	vst_strncat (text, s + 1, maxLen);

	mov	edx, DWORD PTR _maxLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	?vst_strncat@@YAPADPADPBDI@Z		; vst_strncat
	add	esp, 12					; 0000000cH
$LN1@float2stri:

; 481  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@float2stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN17@float2stri:
	DD	1
	DD	$LN16@float2stri
$LN16@float2stri:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN15@float2stri
$LN15@float2stri:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?float2string@AudioEffect@@UAEXMPADH@Z ENDP		; AudioEffect::float2string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv90 = -20						; size = 8
tv132 = -12						; size = 8
_this$ = -4						; size = 4
_samples$ = 8						; size = 4
_text$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?ms2string@AudioEffect@@UAEXMPADH@Z PROC		; AudioEffect::ms2string
; _this$ = ecx

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 406  : 	float2string ((float)(samples * 1000. / getSampleRate ()), text, maxLen);

	mov	esi, esp
	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	cvtss2sd xmm0, DWORD PTR _samples$[ebp]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+124]
	movsd	QWORD PTR tv132[ebp], xmm0
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv90[ebp]
	movsd	xmm0, QWORD PTR tv132[ebp]
	divsd	xmm0, QWORD PTR tv90[ebp]
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 407  : }

	pop	edi
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ms2string@AudioEffect@@UAEXMPADH@Z ENDP		; AudioEffect::ms2string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_sampleRate$ = -8					; size = 4
_this$ = -4						; size = 4
_samples$ = 8						; size = 4
_text$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?Hz2string@AudioEffect@@UAEXMPADH@Z PROC		; AudioEffect::Hz2string
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 391  : 	float sampleRate = getSampleRate ();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _sampleRate$[ebp]

; 392  : 	if (!samples)

	movss	xmm0, DWORD PTR _samples$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Hz2string

; 393  : 		float2string (0, text, maxLen);

	mov	esi, esp
	mov	ecx, DWORD PTR _maxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@Hz2string
$LN2@Hz2string:

; 394  : 	else
; 395  : 		float2string (sampleRate / samples, text, maxLen);

	mov	esi, esp
	mov	ecx, DWORD PTR _maxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _sampleRate$[ebp]
	divss	xmm0, DWORD PTR _samples$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Hz2string:

; 396  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Hz2string@AudioEffect@@UAEXMPADH@Z ENDP		; AudioEffect::Hz2string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv88 = -12						; size = 8
_this$ = -4						; size = 4
_value$ = 8						; size = 4
_text$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?dB2string@AudioEffect@@UAEXMPADH@Z PROC		; AudioEffect::dB2string
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	if (value <= 0)

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _value$[ebp]
	jb	SHORT $LN2@dB2string

; 378  : 		vst_strncpy (text, "-oo", maxLen);

	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	push	OFFSET $SG9177
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	?vst_strncpy@@YAPADPADPBDI@Z		; vst_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@dB2string
$LN2@dB2string:

; 379  : 	else
; 380  : 		float2string ((float)(20. * log10 (value)), text, maxLen);

	mov	esi, esp
	mov	edx, DWORD PTR _maxLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log10
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR tv88[ebp]
	mulsd	xmm0, QWORD PTR __real@4034000000000000
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@dB2string:

; 381  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?dB2string@AudioEffect@@UAEXMPADH@Z ENDP		; AudioEffect::dB2string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?masterIdle@AudioEffect@@UAEXXZ PROC			; AudioEffect::masterIdle
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	if (audioMaster)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@masterIdle

; 231  : 		audioMaster (&cEffect, audioMasterIdle, 0, 0, 0, 0);

	mov	esi, esp
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@masterIdle:

; 232  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?masterIdle@AudioEffect@@UAEXXZ ENDP			; AudioEffect::masterIdle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_id$ = -8						; size = 4
_this$ = -4						; size = 4
?getCurrentUniqueId@AudioEffect@@UAEHXZ PROC		; AudioEffect::getCurrentUniqueId
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	VstInt32 id = 0;

	mov	DWORD PTR _id$[ebp], 0

; 219  : 	if (audioMaster)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@getCurrent

; 220  : 		id = (VstInt32)audioMaster (&cEffect, audioMasterCurrentId, 0, 0, 0, 0);

	mov	esi, esp
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _id$[ebp], eax
$LN2@getCurrent:

; 221  : 	return id;

	mov	eax, DWORD PTR _id$[ebp]

; 222  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentUniqueId@AudioEffect@@UAEHXZ ENDP		; AudioEffect::getCurrentUniqueId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_version$ = -8						; size = 4
_this$ = -4						; size = 4
?getMasterVersion@AudioEffect@@UAEHXZ PROC		; AudioEffect::getMasterVersion
; _this$ = ecx

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 	VstInt32 version = 1;

	mov	DWORD PTR _version$[ebp], 1

; 203  : 	if (audioMaster)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@getMasterV

; 204  : 	{
; 205  : 		version = (VstInt32)audioMaster (&cEffect, audioMasterVersion, 0, 0, 0, 0);

	mov	esi, esp
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _version$[ebp], eax

; 206  : 		if (!version)	// old

	cmp	DWORD PTR _version$[ebp], 0
	jne	SHORT $LN3@getMasterV

; 207  : 			version = 1;

	mov	DWORD PTR _version$[ebp], 1
$LN3@getMasterV:

; 208  : 	}
; 209  : 	return version;

	mov	eax, DWORD PTR _version$[ebp]

; 210  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getMasterVersion@AudioEffect@@UAEHXZ ENDP		; AudioEffect::getMasterVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getBlockSize@AudioEffect@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBlockSize@AudioEffect@@UAEHXZ PROC			; AudioEffect::getBlockSize, COMDAT
; _this$ = ecx

; 115  : 	virtual VstInt32 getBlockSize () { return blockSize; }		///< Returns the current Maximum block size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?getBlockSize@AudioEffect@@UAEHXZ ENDP			; AudioEffect::getBlockSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getSampleRate@AudioEffect@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSampleRate@AudioEffect@@UAEMXZ PROC			; AudioEffect::getSampleRate, COMDAT
; _this$ = ecx

; 114  : 	virtual float getSampleRate ()   { return sampleRate; }		///< Returns the current sample rate

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getSampleRate@AudioEffect@@UAEMXZ ENDP			; AudioEffect::getSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getAeffect@AudioEffect@@UAEPAUAEffect@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAeffect@AudioEffect@@UAEPAUAEffect@@XZ PROC		; AudioEffect::getAeffect, COMDAT
; _this$ = ecx

; 113  : 	virtual AEffect* getAeffect ()   { return &cEffect; }		///< Returns the #AEffect structure

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	esp, ebp
	pop	ebp
	ret	0
?getAeffect@AudioEffect@@UAEPAUAEffect@@XZ ENDP		; AudioEffect::getAeffect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getEditor@AudioEffect@@UAEPAVAEffEditor@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEditor@AudioEffect@@UAEPAVAEffEditor@@XZ PROC	; AudioEffect::getEditor, COMDAT
; _this$ = ecx

; 106  : 	virtual AEffEditor* getEditor () { return editor; }	///< Returns the attached editor

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?getEditor@AudioEffect@@UAEPAVAEffEditor@@XZ ENDP	; AudioEffect::getEditor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_editor$ = 8						; size = 4
?setEditor@AudioEffect@@QAEXPAVAEffEditor@@@Z PROC	; AudioEffect::setEditor
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 	this->editor = editor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _editor$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 142  : 	if (editor) 

	cmp	DWORD PTR _editor$[ebp], 0
	je	SHORT $LN2@setEditor

; 143  : 		cEffect.flags |= effFlagsHasEditor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
	jmp	SHORT $LN1@setEditor
$LN2@setEditor:

; 144  : 	else 
; 145  : 		cEffect.flags &= ~effFlagsHasEditor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN1@setEditor:

; 146  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setEditor@AudioEffect@@QAEXPAVAEffEditor@@@Z ENDP	; AudioEffect::setEditor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_delay$ = 8						; size = 4
?setInitialDelay@AudioEffect@@UAEXH@Z PROC		; AudioEffect::setInitialDelay
; _this$ = ecx

; 363  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 	cEffect.initialDelay = delay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+80], ecx

; 365  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setInitialDelay@AudioEffect@@UAEXH@Z ENDP		; AudioEffect::setInitialDelay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?programsAreChunks@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::programsAreChunks
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@programsAr

; 339  : 		cEffect.flags |= effFlagsProgramChunks;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@programsAr
$LN2@programsAr:

; 340  : 	else
; 341  : 		cEffect.flags &= ~effFlagsProgramChunks;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -33				; ffffffdfH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@programsAr:

; 342  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?programsAreChunks@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::programsAreChunks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?canDoubleReplacing@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::canDoubleReplacing
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@canDoubleR

; 324  : 		cEffect.flags |= effFlagsCanDoubleReplacing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@canDoubleR
$LN2@canDoubleR:

; 325  : 	else
; 326  : 		cEffect.flags &= ~effFlagsCanDoubleReplacing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -4097				; ffffefffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@canDoubleR:

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?canDoubleReplacing@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::canDoubleReplacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?canProcessReplacing@AudioEffect@@UAEX_N@Z PROC		; AudioEffect::canProcessReplacing
; _this$ = ecx

; 307  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 	if (state)

	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	je	SHORT $LN2@canProcess

; 309  : 		cEffect.flags |= effFlagsCanReplacing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
	jmp	SHORT $LN1@canProcess
$LN2@canProcess:

; 310  : 	else
; 311  : 		cEffect.flags &= ~effFlagsCanReplacing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, -17				; ffffffefH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN1@canProcess:

; 312  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?canProcessReplacing@AudioEffect@@UAEX_N@Z ENDP		; AudioEffect::canProcessReplacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setNumOutputs@AudioEffect@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outputs$ = 8						; size = 4
?setNumOutputs@AudioEffect@@UAEXH@Z PROC		; AudioEffect::setNumOutputs, COMDAT
; _this$ = ecx

; 89   : 	virtual void setNumOutputs (VstInt32 outputs) { cEffect.numOutputs = outputs; }	///< Set the number of outputs the plug-in will handle. For a plug-in which could change its IO configuration, this number is the maximun available ouputs.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _outputs$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setNumOutputs@AudioEffect@@UAEXH@Z ENDP		; AudioEffect::setNumOutputs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setNumInputs@AudioEffect@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inputs$ = 8						; size = 4
?setNumInputs@AudioEffect@@UAEXH@Z PROC			; AudioEffect::setNumInputs, COMDAT
; _this$ = ecx

; 88   : 	virtual void setNumInputs (VstInt32 inputs)   { cEffect.numInputs = inputs; }	///< Set the number of inputs the plug-in will handle. For a plug-in which could change its IO configuration, this number is the maximun available inputs.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _inputs$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setNumInputs@AudioEffect@@UAEXH@Z ENDP			; AudioEffect::setNumInputs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setUniqueID@AudioEffect@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iD$ = 8						; size = 4
?setUniqueID@AudioEffect@@UAEXH@Z PROC			; AudioEffect::setUniqueID, COMDAT
; _this$ = ecx

; 87   : 	virtual void setUniqueID (VstInt32 iD)        { cEffect.uniqueID = iD; }		///< Must be called to set the plug-ins unique ID!

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iD$[ebp]
	mov	DWORD PTR [eax+104], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setUniqueID@AudioEffect@@UAEXH@Z ENDP			; AudioEffect::setUniqueID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setChunk@AudioEffect@@UAEHPAXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_byteSize$ = 12						; size = 4
_isPreset$ = 16						; size = 1
?setChunk@AudioEffect@@UAEHPAXH_N@Z PROC		; AudioEffect::setChunk, COMDAT
; _this$ = ecx

; 80   : 	virtual VstInt32 setChunk (void* data, VstInt32 byteSize, bool isPreset = false) { return 0; }	///< Host restores plug-in state

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setChunk@AudioEffect@@UAEHPAXH_N@Z ENDP		; AudioEffect::setChunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getChunk@AudioEffect@@UAEHPAPAX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_isPreset$ = 12						; size = 1
?getChunk@AudioEffect@@UAEHPAPAX_N@Z PROC		; AudioEffect::getChunk, COMDAT
; _this$ = ecx

; 79   : 	virtual VstInt32 getChunk (void** data, bool isPreset = false) { return 0; } ///< Host stores plug-in state. Returns the size in bytes of the chunk (plug-in allocates the data array)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?getChunk@AudioEffect@@UAEHPAPAX_N@Z ENDP		; AudioEffect::getChunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getParameterName@AudioEffect@@UAEXHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_text$ = 12						; size = 4
?getParameterName@AudioEffect@@UAEXHPAD@Z PROC		; AudioEffect::getParameterName, COMDAT
; _this$ = ecx

; 77   : 	virtual void getParameterName (VstInt32 index, char* text)    { *text = 0; }    ///< Stuff \e text with the name ("Time", "Gain", "RoomType", etc...) of parameter \e index. Limited to #kVstMaxParamStrLen.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _text$[ebp]
	mov	BYTE PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	8
?getParameterName@AudioEffect@@UAEXHPAD@Z ENDP		; AudioEffect::getParameterName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getParameterDisplay@AudioEffect@@UAEXHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_text$ = 12						; size = 4
?getParameterDisplay@AudioEffect@@UAEXHPAD@Z PROC	; AudioEffect::getParameterDisplay, COMDAT
; _this$ = ecx

; 76   : 	virtual void getParameterDisplay (VstInt32 index, char* text) { *text = 0; }	///< Stuff \e text with a string representation ("0.5", "-3", "PLATE", etc...) of the value of parameter \e index. Limited to #kVstMaxParamStrLen.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _text$[ebp]
	mov	BYTE PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	8
?getParameterDisplay@AudioEffect@@UAEXHPAD@Z ENDP	; AudioEffect::getParameterDisplay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getParameterLabel@AudioEffect@@UAEXHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_label$ = 12						; size = 4
?getParameterLabel@AudioEffect@@UAEXHPAD@Z PROC		; AudioEffect::getParameterLabel, COMDAT
; _this$ = ecx

; 75   : 	virtual void getParameterLabel (VstInt32 index, char* label)  { *label = 0; }	///< Stuff \e label with the units in which parameter \e index is displayed (i.e. "sec", "dB", "type", etc...). Limited to #kVstMaxParamStrLen.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _label$[ebp]
	mov	BYTE PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	8
?getParameterLabel@AudioEffect@@UAEXHPAD@Z ENDP		; AudioEffect::getParameterLabel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getProgramName@AudioEffect@@UAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?getProgramName@AudioEffect@@UAEXPAD@Z PROC		; AudioEffect::getProgramName, COMDAT
; _this$ = ecx

; 73   : 	virtual void getProgramName (char* name) { *name = 0; }	///< Stuff \e name with the name of the current program. Limited to #kVstMaxProgNameLen.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _name$[ebp]
	mov	BYTE PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	4
?getProgramName@AudioEffect@@UAEXPAD@Z ENDP		; AudioEffect::getProgramName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setProgramName@AudioEffect@@UAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?setProgramName@AudioEffect@@UAEXPAD@Z PROC		; AudioEffect::setProgramName, COMDAT
; _this$ = ecx

; 72   : 	virtual void setProgramName (char* name) {}				///< Stuff the name field of the current program with \e name. Limited to #kVstMaxProgNameLen.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setProgramName@AudioEffect@@UAEXPAD@Z ENDP		; AudioEffect::setProgramName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setProgram@AudioEffect@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_program$ = 8						; size = 4
?setProgram@AudioEffect@@UAEXH@Z PROC			; AudioEffect::setProgram, COMDAT
; _this$ = ecx

; 70   : 	virtual void setProgram (VstInt32 program) { curProgram = program; }	///< Set the current program to \e program

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _program$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setProgram@AudioEffect@@UAEXH@Z ENDP			; AudioEffect::setProgram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getProgram@AudioEffect@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProgram@AudioEffect@@UAEHXZ PROC			; AudioEffect::getProgram, COMDAT
; _this$ = ecx

; 69   : 	virtual VstInt32 getProgram () { return curProgram; }					///< Return the index to the current program

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?getProgram@AudioEffect@@UAEHXZ ENDP			; AudioEffect::getProgram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?setParameterAutomated@AudioEffect@@UAEXHM@Z PROC	; AudioEffect::setParameterAutomated
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 266  : 	setParameter (index, value);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  : 	if (audioMaster)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@setParamet

; 268  : 		audioMaster (&cEffect, audioMasterAutomate, index, 0, 0, value);	// value is in opt

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@setParamet:

; 269  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setParameterAutomated@AudioEffect@@UAEXHM@Z ENDP	; AudioEffect::setParameterAutomated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?getParameter@AudioEffect@@UAEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?getParameter@AudioEffect@@UAEMH@Z PROC			; AudioEffect::getParameter, COMDAT
; _this$ = ecx

; 61   : 	virtual float getParameter (VstInt32 index) { return 0; }	///< Return the value of the parameter with \e index

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	4
?getParameter@AudioEffect@@UAEMH@Z ENDP			; AudioEffect::getParameter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setParameter@AudioEffect@@UAEXHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?setParameter@AudioEffect@@UAEXHM@Z PROC		; AudioEffect::setParameter, COMDAT
; _this$ = ecx

; 60   : 	virtual void setParameter (VstInt32 index, float value) {}	///< Called when a parameter changed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?setParameter@AudioEffect@@UAEXHM@Z ENDP		; AudioEffect::setParameter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?processDoubleReplacing@AudioEffect@@UAEXPAPAN0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inputs$ = 8						; size = 4
_outputs$ = 12						; size = 4
_sampleFrames$ = 16					; size = 4
?processDoubleReplacing@AudioEffect@@UAEXPAPAN0H@Z PROC	; AudioEffect::processDoubleReplacing, COMDAT
; _this$ = ecx

; 52   : 	virtual void processDoubleReplacing (double** inputs, double** outputs, VstInt32 sampleFrames) {} ///< Process 64 bit (double precision) floats (always in a resume state) \sa processReplacing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?processDoubleReplacing@AudioEffect@@UAEXPAPAN0H@Z ENDP	; AudioEffect::processDoubleReplacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setBlockSize@AudioEffect@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_blockSize$ = 8						; size = 4
?setBlockSize@AudioEffect@@UAEXH@Z PROC			; AudioEffect::setBlockSize, COMDAT
; _this$ = ecx

; 47   : 	virtual void setBlockSize (VstInt32 blockSize) { this->blockSize = blockSize; }		///< Called when the Maximun block size changes (always in a suspend state). Note that the sampleFrames in Process Calls could be smaller than this block size, but NOT bigger.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setBlockSize@AudioEffect@@UAEXH@Z ENDP			; AudioEffect::setBlockSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?setSampleRate@AudioEffect@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sampleRate$ = 8					; size = 4
?setSampleRate@AudioEffect@@UAEXM@Z PROC		; AudioEffect::setSampleRate, COMDAT
; _this$ = ecx

; 46   : 	virtual void setSampleRate (float sampleRate)  { this->sampleRate = sampleRate; }	///< Called when the sample rate changes (always in a suspend state)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sampleRate$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?setSampleRate@AudioEffect@@UAEXM@Z ENDP		; AudioEffect::setSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?resume@AudioEffect@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?resume@AudioEffect@@UAEXXZ PROC			; AudioEffect::resume, COMDAT
; _this$ = ecx

; 39   : 	virtual void resume () {}	///< Called when plug-in is switched to on

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?resume@AudioEffect@@UAEXXZ ENDP			; AudioEffect::resume
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?suspend@AudioEffect@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?suspend@AudioEffect@@UAEXXZ PROC			; AudioEffect::suspend, COMDAT
; _this$ = ecx

; 38   : 	virtual void suspend () {}	///< Called when plug-in is switched to off

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?suspend@AudioEffect@@UAEXXZ ENDP			; AudioEffect::suspend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?close@AudioEffect@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@AudioEffect@@UAEXXZ PROC				; AudioEffect::close, COMDAT
; _this$ = ecx

; 37   : 	virtual void close () {}	///< Called when plug-in will be released

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?close@AudioEffect@@UAEXXZ ENDP				; AudioEffect::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.h
;	COMDAT ?open@AudioEffect@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?open@AudioEffect@@UAEXXZ PROC				; AudioEffect::open, COMDAT
; _this$ = ecx

; 36   : 	virtual void open () {}		///< Called when plug-in is initialized

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?open@AudioEffect@@UAEXXZ ENDP				; AudioEffect::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv210 = -22						; size = 1
tv202 = -21						; size = 1
tv178 = -20						; size = 4
tv164 = -16						; size = 4
tv64 = -12						; size = 4
_v$ = -8						; size = 4
_this$ = -4						; size = 4
_opcode$ = 8						; size = 4
_index$ = 12						; size = 4
_value$ = 16						; size = 4
_ptr$ = 20						; size = 4
_opt$ = 24						; size = 4
?dispatcher@AudioEffect@@UAEHHHHPAXM@Z PROC		; AudioEffect::dispatcher
; _this$ = ecx

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	VstIntPtr v = 0;

	mov	DWORD PTR _v$[ebp], 0

; 152  : 	
; 153  : 	switch (opcode)

	mov	eax, DWORD PTR _opcode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 24			; 00000018H
	ja	$LN2@dispatcher
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN39@dispatcher[ecx*4]
$LN4@dispatcher:

; 154  : 	{
; 155  : 		case effOpen:				open ();											break;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN5@dispatcher:

; 156  : 		case effClose:				close ();											break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN6@dispatcher:

; 157  : 		case effSetProgram:			if (value < numPrograms) setProgram ((VstInt32)value); break;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jge	SHORT $LN7@dispatcher
	mov	esi, esp
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@dispatcher:
	jmp	$LN2@dispatcher
$LN8@dispatcher:

; 158  : 		case effGetProgram:			v = getProgram ();									break;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v$[ebp], eax
	jmp	$LN2@dispatcher
$LN9@dispatcher:

; 159  : 		case effSetProgramName: 	setProgramName ((char*)ptr);						break;

	mov	esi, esp
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN10@dispatcher:

; 160  : 		case effGetProgramName: 	getProgramName ((char*)ptr);						break;

	mov	esi, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN11@dispatcher:

; 161  : 		case effGetParamLabel:		getParameterLabel (index, (char*)ptr);				break;

	mov	esi, esp
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN12@dispatcher:

; 162  : 		case effGetParamDisplay:	getParameterDisplay (index, (char*)ptr);			break;

	mov	esi, esp
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN13@dispatcher:

; 163  : 		case effGetParamName:		getParameterName (index, (char*)ptr);				break;

	mov	esi, esp
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN14@dispatcher:

; 164  : 
; 165  : 		case effSetSampleRate:		setSampleRate (opt);								break;

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _opt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN15@dispatcher:

; 166  : 		case effSetBlockSize:		setBlockSize ((VstInt32)value);						break;

	mov	esi, esp
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN2@dispatcher
$LN16@dispatcher:

; 167  : 		case effMainsChanged:		if (!value) suspend (); else resume ();				break;

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN17@dispatcher
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN18@dispatcher
$LN17@dispatcher:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@dispatcher:
	jmp	$LN2@dispatcher
$LN19@dispatcher:

; 168  : 	#if !VST_FORCE_DEPRECATED
; 169  : 		case effGetVu:				v = (VstIntPtr)(getVu () * 32767.);					break;
; 170  : 	#endif
; 171  : 
; 172  : 		//---Editor------------
; 173  : 		case effEditGetRect:		if (editor) v = editor->getRect ((ERect**)ptr) ? 1 : 0;	break;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN20@dispatcher
	mov	esi, esp
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@dispatcher
	mov	DWORD PTR tv164[ebp], 1
	jmp	SHORT $LN32@dispatcher
$LN31@dispatcher:
	mov	DWORD PTR tv164[ebp], 0
$LN32@dispatcher:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _v$[ebp], ecx
$LN20@dispatcher:
	jmp	$LN2@dispatcher
$LN21@dispatcher:

; 174  : 		case effEditOpen:			if (editor) v = editor->open (ptr) ? 1 : 0;			break;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN22@dispatcher
	mov	esi, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN33@dispatcher
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN34@dispatcher
$LN33@dispatcher:
	mov	DWORD PTR tv178[ebp], 0
$LN34@dispatcher:
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _v$[ebp], edx
$LN22@dispatcher:
	jmp	$LN2@dispatcher
$LN23@dispatcher:

; 175  : 		case effEditClose:			if (editor) editor->close ();						break;		

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN24@dispatcher
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@dispatcher:
	jmp	$LN2@dispatcher
$LN25@dispatcher:

; 176  : 		case effEditIdle:			if (editor) editor->idle ();						break;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN26@dispatcher
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@dispatcher:
	jmp	SHORT $LN2@dispatcher
$LN27@dispatcher:

; 177  : 		
; 178  : 	#if (TARGET_API_MAC_CARBON && !VST_FORCE_DEPRECATED)
; 179  : 		case effEditDraw:			if (editor) editor->draw ((ERect*)ptr);				break;
; 180  : 		case effEditMouse:			if (editor) v = editor->mouse (index, value);		break;
; 181  : 		case effEditKey:			if (editor) v = editor->key (value);				break;
; 182  : 		case effEditTop:			if (editor) editor->top ();							break;
; 183  : 		case effEditSleep:			if (editor) editor->sleep ();						break;
; 184  : 	#endif
; 185  : 		
; 186  : 		case DECLARE_VST_DEPRECATED (effIdentify):	v = CCONST ('N', 'v', 'E', 'f');	break;

	mov	DWORD PTR _v$[ebp], 1316373862		; 4e764566H
	jmp	SHORT $LN2@dispatcher
$LN28@dispatcher:

; 187  : 
; 188  : 		//---Persistence-------
; 189  : 		case effGetChunk:			v = getChunk ((void**)ptr, index ? true : false);	break;

	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN35@dispatcher
	mov	BYTE PTR tv202[ebp], 1
	jmp	SHORT $LN36@dispatcher
$LN35@dispatcher:
	mov	BYTE PTR tv202[ebp], 0
$LN36@dispatcher:
	mov	esi, esp
	movzx	ecx, BYTE PTR tv202[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN2@dispatcher
$LN29@dispatcher:

; 190  : 		case effSetChunk:			v = setChunk (ptr, (VstInt32)value, index ? true : false);	break;

	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN37@dispatcher
	mov	BYTE PTR tv210[ebp], 1
	jmp	SHORT $LN38@dispatcher
$LN37@dispatcher:
	mov	BYTE PTR tv210[ebp], 0
$LN38@dispatcher:
	mov	esi, esp
	movzx	ecx, BYTE PTR tv210[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v$[ebp], eax
$LN2@dispatcher:

; 191  : 	}
; 192  : 	return v;

	mov	eax, DWORD PTR _v$[ebp]

; 193  : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN39@dispatcher:
	DD	$LN4@dispatcher
	DD	$LN5@dispatcher
	DD	$LN6@dispatcher
	DD	$LN8@dispatcher
	DD	$LN9@dispatcher
	DD	$LN10@dispatcher
	DD	$LN11@dispatcher
	DD	$LN12@dispatcher
	DD	$LN13@dispatcher
	DD	$LN2@dispatcher
	DD	$LN14@dispatcher
	DD	$LN15@dispatcher
	DD	$LN16@dispatcher
	DD	$LN19@dispatcher
	DD	$LN21@dispatcher
	DD	$LN23@dispatcher
	DD	$LN2@dispatcher
	DD	$LN2@dispatcher
	DD	$LN2@dispatcher
	DD	$LN25@dispatcher
	DD	$LN2@dispatcher
	DD	$LN2@dispatcher
	DD	$LN27@dispatcher
	DD	$LN28@dispatcher
	DD	$LN29@dispatcher
?dispatcher@AudioEffect@@UAEHHHHPAXM@Z ENDP		; AudioEffect::dispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
tv74 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1AudioEffect@@UAE@XZ PROC				; AudioEffect::~AudioEffect
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AudioEffect@@6B@

; 134  : 	if (editor)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@AudioEffec

; 135  : 		delete editor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@AudioEffec
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN3@AudioEffec
$LN4@AudioEffec:
	mov	DWORD PTR tv74[ebp], 0
$LN3@AudioEffec:

; 136  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AudioEffect@@UAE@XZ ENDP				; AudioEffect::~AudioEffect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\public.sdk\source\vst2.x\audioeffect.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_audioMaster$ = 8					; size = 4
_numPrograms$ = 12					; size = 4
_numParams$ = 16					; size = 4
??0AudioEffect@@QAE@P6AHPAUAEffect@@HHHPAXM@ZHH@Z PROC	; AudioEffect::AudioEffect
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AudioEffect@@6B@

; 100  : : audioMaster (audioMaster)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _audioMaster$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 101  : , editor (0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 102  : , sampleRate (44100.f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@472c4400
	movss	DWORD PTR [ecx+12], xmm0

; 103  : , blockSize (1024)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 1024		; 00000400H

; 104  : , numPrograms (numPrograms)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numPrograms$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 105  : , numParams (numParams)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _numParams$[ebp]
	mov	DWORD PTR [edx+24], eax

; 106  : , curProgram (0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 108  : 	memset (&cEffect, 0, sizeof (cEffect));

	push	144					; 00000090H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 109  : 
; 110  : 	cEffect.magic = kEffectMagic;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1450406992		; 56737450H

; 111  : 	cEffect.dispatcher = dispatchEffectClass;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET ?dispatchEffectClass@AudioEffect@@KAHPAUAEffect@@HHHPAXM@Z ; AudioEffect::dispatchEffectClass

; 112  : 	cEffect.DECLARE_VST_DEPRECATED (process) = DECLARE_VST_DEPRECATED (processClass);

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], OFFSET ?__processClassDeprecated@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ; AudioEffect::__processClassDeprecated

; 113  : 	cEffect.setParameter = setParameterClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], OFFSET ?setParameterClass@AudioEffect@@KAXPAUAEffect@@HM@Z ; AudioEffect::setParameterClass

; 114  : 	cEffect.getParameter = getParameterClass;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], OFFSET ?getParameterClass@AudioEffect@@KAMPAUAEffect@@H@Z ; AudioEffect::getParameterClass

; 115  : 	cEffect.numPrograms  = numPrograms;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _numPrograms$[ebp]
	mov	DWORD PTR [edx+52], eax

; 116  : 	cEffect.numParams    = numParams;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _numParams$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 117  : 	cEffect.numInputs  = 1;		// mono input

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 1

; 118  : 	cEffect.numOutputs = 2;		// stereo output

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 2

; 119  : 	cEffect.DECLARE_VST_DEPRECATED (ioRatio) = 1.f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+92], xmm0

; 120  : 	cEffect.object = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 121  : 	cEffect.uniqueID = CCONST ('N', 'o', 'E', 'f');

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 1315915110		; 4e6f4566H

; 122  : 	cEffect.version  = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 1

; 123  : 	cEffect.processReplacing = processClassReplacing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], OFFSET ?processClassReplacing@AudioEffect@@KAXPAUAEffect@@PAPAM1H@Z ; AudioEffect::processClassReplacing

; 124  : 
; 125  : #if VST_2_4_EXTENSIONS
; 126  : 	canProcessReplacing (); // mandatory in VST 2.4!

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?canProcessReplacing@AudioEffect@@UAEX_N@Z ; AudioEffect::canProcessReplacing

; 127  : 	cEffect.processDoubleReplacing = processClassDoubleReplacing;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], OFFSET ?processClassDoubleReplacing@AudioEffect@@KAXPAUAEffect@@PAPAN1H@Z ; AudioEffect::processClassDoubleReplacing

; 128  : #endif
; 129  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0AudioEffect@@QAE@P6AHPAUAEffect@@HHHPAXM@ZHH@Z ENDP	; AudioEffect::AudioEffect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
;	COMDAT ?vst_strncat@@YAPADPADPBDI@Z
_TEXT	SEGMENT
_result$ = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?vst_strncat@@YAPADPADPBDI@Z PROC			; vst_strncat, COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 306  : 	char* result = strncat (dst, src, maxLen);

	mov	esi, esp
	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	DWORD PTR __imp__strncat
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 307  : 	dst[maxLen] = 0;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, DWORD PTR _maxLen$[ebp]
	mov	BYTE PTR [eax], 0

; 308  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 309  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?vst_strncat@@YAPADPADPBDI@Z ENDP			; vst_strncat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\vst-2.4-sdk\vstsdk2.4\pluginterfaces\vst2.x\aeffect.h
;	COMDAT ?vst_strncpy@@YAPADPADPBDI@Z
_TEXT	SEGMENT
_result$ = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_maxLen$ = 16						; size = 4
?vst_strncpy@@YAPADPADPBDI@Z PROC			; vst_strncpy, COMDAT

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 296  : 	char* result = strncpy (dst, src, maxLen);

	mov	esi, esp
	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 297  : 	dst[maxLen] = 0;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, DWORD PTR _maxLen$[ebp]
	mov	BYTE PTR [eax], 0

; 298  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 299  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?vst_strncpy@@YAPADPADPBDI@Z ENDP			; vst_strncpy
_TEXT	ENDS
END
