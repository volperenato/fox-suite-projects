; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	E:\FoxSuite\misefx\MisEfx\Debug\Freeverb.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_GAllPassFilter@@QAEPAXI@Z			; AllPassFilter::`scalar deleting destructor'
PUBLIC	??_EAllPassFilter@@QAEPAXI@Z			; AllPassFilter::`vector deleting destructor'
PUBLIC	??_GCombFilter@@QAEPAXI@Z			; CombFilter::`scalar deleting destructor'
PUBLIC	??_GLPCombFilter@@QAEPAXI@Z			; LPCombFilter::`scalar deleting destructor'
PUBLIC	??_ELPCombFilter@@QAEPAXI@Z			; LPCombFilter::`vector deleting destructor'
PUBLIC	??0Freeverb@@QAE@XZ				; Freeverb::Freeverb
PUBLIC	??1Freeverb@@QAE@XZ				; Freeverb::~Freeverb
PUBLIC	?init@Freeverb@@QAEXHMMMMMM@Z			; Freeverb::init
PUBLIC	?mapValueIntoRange@Freeverb@@QAEMMMM@Z		; Freeverb::mapValueIntoRange
PUBLIC	?mapValueOutsideRange@Freeverb@@QAEMMMM@Z	; Freeverb::mapValueOutsideRange
PUBLIC	?setCombFiltersDelay@Freeverb@@QAEXXZ		; Freeverb::setCombFiltersDelay
PUBLIC	?setAllPassFiltersDelay@Freeverb@@QAEXXZ	; Freeverb::setAllPassFiltersDelay
PUBLIC	?updateReverbParameters@Freeverb@@QAEXXZ	; Freeverb::updateReverbParameters
PUBLIC	?processAudio@Freeverb@@QAEXPAM0@Z		; Freeverb::processAudio
PUBLIC	?setSampleRate@Freeverb@@QAEXH@Z		; Freeverb::setSampleRate
PUBLIC	?setReverbWet@Freeverb@@QAEXM@Z			; Freeverb::setReverbWet
PUBLIC	?setReverbSmearing@Freeverb@@QAEXM@Z		; Freeverb::setReverbSmearing
PUBLIC	?setReverbDecayInSeconds@Freeverb@@QAEXM@Z	; Freeverb::setReverbDecayInSeconds
PUBLIC	?setReverbDampingFrequency@Freeverb@@QAEXM@Z	; Freeverb::setReverbDampingFrequency
PUBLIC	?setReverbPreDelayInMilliseconds@Freeverb@@QAEXM@Z ; Freeverb::setReverbPreDelayInMilliseconds
PUBLIC	?setReverbSpread@Freeverb@@QAEXM@Z		; Freeverb::setReverbSpread
PUBLIC	?getReverbWet@Freeverb@@QAEMXZ			; Freeverb::getReverbWet
PUBLIC	?getReverbSmearing@Freeverb@@QAEMXZ		; Freeverb::getReverbSmearing
PUBLIC	?getReverbDecayInSeconds@Freeverb@@QAEMXZ	; Freeverb::getReverbDecayInSeconds
PUBLIC	?getReverbDampingFrequency@Freeverb@@QAEMXZ	; Freeverb::getReverbDampingFrequency
PUBLIC	?getReverbPreDelayInMilliseconds@Freeverb@@QAEMXZ ; Freeverb::getReverbPreDelayInMilliseconds
PUBLIC	?getReverbSpread@Freeverb@@QAEMXZ		; Freeverb::getReverbSpread
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fef0a3d70a3d70a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40133333
PUBLIC	__real@40966666
PUBLIC	__real@40f75c29
PUBLIC	__real@41200000
PUBLIC	__real@4149c28f
PUBLIC	__real@41ca7ae1
PUBLIC	__real@41d7851f
PUBLIC	__real@41e7ae14
PUBLIC	__real@41f60000
PUBLIC	__real@4200f5c3
PUBLIC	__real@42073d71
PUBLIC	__real@420d3d71
PUBLIC	__real@4212cccd
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@43960000
PUBLIC	__real@bf800000
PUBLIC	__real@c1400000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	?setDelayInmsec@Delay@@QAEXM@Z:PROC		; Delay::setDelayInmsec
EXTRN	?setMakeUpGaindB@Delay@@QAEXM@Z:PROC		; Delay::setMakeUpGaindB
EXTRN	??0AllPassFilter@@QAE@XZ:PROC			; AllPassFilter::AllPassFilter
EXTRN	??1AllPassFilter@@QAE@XZ:PROC			; AllPassFilter::~AllPassFilter
EXTRN	?setFeedback@AllPassFilter@@QAEXM@Z:PROC	; AllPassFilter::setFeedback
EXTRN	??0CombFilter@@QAE@XZ:PROC			; CombFilter::CombFilter
EXTRN	??1CombFilter@@QAE@XZ:PROC			; CombFilter::~CombFilter
EXTRN	?setFeedback@CombFilter@@QAEXM@Z:PROC		; CombFilter::setFeedback
EXTRN	?setFeedbackFromDecay@CombFilter@@QAEXM@Z:PROC	; CombFilter::setFeedbackFromDecay
EXTRN	?setFeedbackToNegative@CombFilter@@QAEXXZ:PROC	; CombFilter::setFeedbackToNegative
EXTRN	??0LPCombFilter@@QAE@XZ:PROC			; LPCombFilter::LPCombFilter
EXTRN	??1LPCombFilter@@QAE@XZ:PROC			; LPCombFilter::~LPCombFilter
EXTRN	?setCutoffFrequency@LPCombFilter@@QAEXM@Z:PROC	; LPCombFilter::setCutoffFrequency
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@4212cccd
CONST	SEGMENT
__real@4212cccd DD 04212cccdr			; 36.7
CONST	ENDS
;	COMDAT __real@420d3d71
CONST	SEGMENT
__real@420d3d71 DD 0420d3d71r			; 35.31
CONST	ENDS
;	COMDAT __real@42073d71
CONST	SEGMENT
__real@42073d71 DD 042073d71r			; 33.81
CONST	ENDS
;	COMDAT __real@4200f5c3
CONST	SEGMENT
__real@4200f5c3 DD 04200f5c3r			; 32.24
CONST	ENDS
;	COMDAT __real@41f60000
CONST	SEGMENT
__real@41f60000 DD 041f60000r			; 30.75
CONST	ENDS
;	COMDAT __real@41e7ae14
CONST	SEGMENT
__real@41e7ae14 DD 041e7ae14r			; 28.96
CONST	ENDS
;	COMDAT __real@41d7851f
CONST	SEGMENT
__real@41d7851f DD 041d7851fr			; 26.94
CONST	ENDS
;	COMDAT __real@41ca7ae1
CONST	SEGMENT
__real@41ca7ae1 DD 041ca7ae1r			; 25.31
CONST	ENDS
;	COMDAT __real@4149c28f
CONST	SEGMENT
__real@4149c28f DD 04149c28fr			; 12.61
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40f75c29
CONST	SEGMENT
__real@40f75c29 DD 040f75c29r			; 7.73
CONST	ENDS
;	COMDAT __real@40966666
CONST	SEGMENT
__real@40966666 DD 040966666r			; 4.7
CONST	ENDS
;	COMDAT __real@40133333
CONST	SEGMENT
__real@40133333 DD 040133333r			; 2.3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fef0a3d70a3d70a
CONST	SEGMENT
__real@3fef0a3d70a3d70a DQ 03fef0a3d70a3d70ar	; 0.97
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??0Freeverb@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0Freeverb@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Freeverb@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Freeverb@@QAE@XZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ELPCombFilter@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EAllPassFilter@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbSpread@Freeverb@@QAEMXZ PROC			; Freeverb::getReverbSpread
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  :     return freeverb_spread;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]

; 243  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbSpread@Freeverb@@QAEMXZ ENDP			; Freeverb::getReverbSpread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbPreDelayInMilliseconds@Freeverb@@QAEMXZ PROC	; Freeverb::getReverbPreDelayInMilliseconds
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  :     return freeverb_preDelayMilliSeconds;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbPreDelayInMilliseconds@Freeverb@@QAEMXZ ENDP	; Freeverb::getReverbPreDelayInMilliseconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbDampingFrequency@Freeverb@@QAEMXZ PROC	; Freeverb::getReverbDampingFrequency
; _this$ = ecx

; 233  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     return freeverb_dampingFrequency;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]

; 235  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbDampingFrequency@Freeverb@@QAEMXZ ENDP	; Freeverb::getReverbDampingFrequency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbDecayInSeconds@Freeverb@@QAEMXZ PROC		; Freeverb::getReverbDecayInSeconds
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 230  :     return freeverb_decaySeconds;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]

; 231  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbDecayInSeconds@Freeverb@@QAEMXZ ENDP		; Freeverb::getReverbDecayInSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbSmearing@Freeverb@@QAEMXZ PROC		; Freeverb::getReverbSmearing
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  :     return freeverb_smearing;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]

; 227  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbSmearing@Freeverb@@QAEMXZ ENDP		; Freeverb::getReverbSmearing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReverbWet@Freeverb@@QAEMXZ PROC			; Freeverb::getReverbWet
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 222  :     return freeverb_wet;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]

; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReverbWet@Freeverb@@QAEMXZ ENDP			; Freeverb::getReverbWet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_spread$ = 8						; size = 4
?setReverbSpread@Freeverb@@QAEXM@Z PROC			; Freeverb::setReverbSpread
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 214  :     freeverb_spread = spread;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _spread$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 215  :     updateReverbParameters();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateReverbParameters@Freeverb@@QAEXXZ ; Freeverb::updateReverbParameters

; 216  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbSpread@Freeverb@@QAEXM@Z ENDP			; Freeverb::setReverbSpread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_predelay$ = 8						; size = 4
?setReverbPreDelayInMilliseconds@Freeverb@@QAEXM@Z PROC	; Freeverb::setReverbPreDelayInMilliseconds
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 208  :     freeverb_preDelayMilliSeconds = predelay;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _predelay$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 209  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 210  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbPreDelayInMilliseconds@Freeverb@@QAEXM@Z ENDP	; Freeverb::setReverbPreDelayInMilliseconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_damping$ = 8						; size = 4
?setReverbDampingFrequency@Freeverb@@QAEXM@Z PROC	; Freeverb::setReverbDampingFrequency
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 199  :     freeverb_dampingFrequency = damping;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _damping$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 200  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@setReverbD
$LN2@setReverbD:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@setReverbD:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@setReverbD

; 201  :         combFiltersL[i].setCutoffFrequency(freeverb_dampingFrequency);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+40]
	call	?setCutoffFrequency@LPCombFilter@@QAEXM@Z ; LPCombFilter::setCutoffFrequency

; 202  :         combFiltersR[i].setCutoffFrequency(freeverb_dampingFrequency);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	call	?setCutoffFrequency@LPCombFilter@@QAEXM@Z ; LPCombFilter::setCutoffFrequency

; 203  :     }

	jmp	SHORT $LN2@setReverbD
$LN3@setReverbD:

; 204  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbDampingFrequency@Freeverb@@QAEXM@Z ENDP	; Freeverb::setReverbDampingFrequency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_decay$ = 8						; size = 4
?setReverbDecayInSeconds@Freeverb@@QAEXM@Z PROC		; Freeverb::setReverbDecayInSeconds
; _this$ = ecx

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 190  :     freeverb_decaySeconds = decay;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _decay$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 191  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@setReverbD
$LN2@setReverbD:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@setReverbD:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@setReverbD

; 192  :         combFiltersL[i].setFeedbackFromDecay(freeverb_decaySeconds);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+40]
	call	?setFeedbackFromDecay@CombFilter@@QAEXM@Z ; CombFilter::setFeedbackFromDecay

; 193  :         combFiltersR[i].setFeedbackFromDecay(freeverb_decaySeconds);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	call	?setFeedbackFromDecay@CombFilter@@QAEXM@Z ; CombFilter::setFeedbackFromDecay

; 194  :     }

	jmp	SHORT $LN2@setReverbD
$LN3@setReverbD:

; 195  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbDecayInSeconds@Freeverb@@QAEXM@Z ENDP		; Freeverb::setReverbDecayInSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_smearing$ = 8						; size = 4
?setReverbSmearing@Freeverb@@QAEXM@Z PROC		; Freeverb::setReverbSmearing
; _this$ = ecx

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 176  :     freeverb_smearing = smearing * MAX_SMEARING_VALUE;

	cvtss2sd xmm0, DWORD PTR _smearing$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fef0a3d70a3d70a
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 177  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@setReverbS
$LN2@setReverbS:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@setReverbS:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN3@setReverbS

; 178  :         apFiltersL_input[i].setFeedback(freeverb_smearing);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+112]
	call	?setFeedback@AllPassFilter@@QAEXM@Z	; AllPassFilter::setFeedback

; 179  :         apFiltersR_input[i].setFeedback(freeverb_smearing);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+116]
	call	?setFeedback@AllPassFilter@@QAEXM@Z	; AllPassFilter::setFeedback

; 180  :     }

	jmp	SHORT $LN2@setReverbS
$LN3@setReverbS:

; 181  : 
; 182  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@setReverbS
$LN5@setReverbS:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@setReverbS:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN6@setReverbS

; 183  :         apFiltersL_output[i].setFeedback(freeverb_smearing);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+120]
	call	?setFeedback@AllPassFilter@@QAEXM@Z	; AllPassFilter::setFeedback

; 184  :         apFiltersR_output[i].setFeedback(freeverb_smearing);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+124]
	call	?setFeedback@AllPassFilter@@QAEXM@Z	; AllPassFilter::setFeedback

; 185  :     }

	jmp	SHORT $LN5@setReverbS
$LN6@setReverbS:

; 186  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbSmearing@Freeverb@@QAEXM@Z ENDP		; Freeverb::setReverbSmearing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wet$ = 8						; size = 4
?setReverbWet@Freeverb@@QAEXM@Z PROC			; Freeverb::setReverbWet
; _this$ = ecx

; 169  : {   

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  :     freeverb_wet = wet;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _wet$[ebp]
	movss	DWORD PTR [eax], xmm0

; 171  :     updateReverbParameters();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateReverbParameters@Freeverb@@QAEXXZ ; Freeverb::updateReverbParameters

; 172  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setReverbWet@Freeverb@@QAEXM@Z ENDP			; Freeverb::setReverbWet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_sampleRate$ = 8					; size = 4
?setSampleRate@Freeverb@@QAEXH@Z PROC			; Freeverb::setSampleRate
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 147  :     // Call setSampleRate methods on all needed delay lines
; 148  :     preDelayModule->setSampleRate(sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  : 
; 150  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@setSampleR
$LN2@setSampleR:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@setSampleR:
	cmp	DWORD PTR _i$3[ebp], 8
	jge	SHORT $LN3@setSampleR

; 151  :         combFiltersL[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleRate$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  :         combFiltersR[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+44]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 153  :     }

	jmp	SHORT $LN2@setSampleR
$LN3@setSampleR:

; 154  : 
; 155  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@setSampleR
$LN5@setSampleR:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@setSampleR:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN6@setSampleR

; 156  :         apFiltersL_input[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	push	ecx
	imul	edx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	imul	eax, DWORD PTR _i$2[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+112]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  :         apFiltersR_input[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	push	ecx
	imul	edx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	imul	eax, DWORD PTR _i$2[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+116]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 158  :     }

	jmp	SHORT $LN5@setSampleR
$LN6@setSampleR:

; 159  : 
; 160  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@setSampleR
$LN8@setSampleR:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN10@setSampleR:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN1@setSampleR

; 161  :         apFiltersL_output[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleRate$[ebp]
	push	edx
	imul	eax, DWORD PTR _i$1[ebp], 52
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edi+120]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  :         apFiltersR_output[i].setSampleRate(sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	imul	edx, DWORD PTR _i$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+124]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 163  :     }

	jmp	SHORT $LN8@setSampleR
$LN1@setSampleR:

; 164  : }

	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setSampleRate@Freeverb@@QAEXH@Z ENDP			; Freeverb::setSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
tv344 = -52						; size = 4
tv330 = -48						; size = 4
_j$1 = -44						; size = 4
_j$2 = -40						; size = 4
_j$3 = -36						; size = 4
_input_mono$ = -32					; size = 4
_inputR$ = -28						; size = 4
_inputL$ = -24						; size = 4
_outputR$ = -20						; size = 4
_outputL$ = -16						; size = 4
_inR$ = -12						; size = 4
_inL$ = -8						; size = 4
_this$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?processAudio@Freeverb@@QAEXPAM0@Z PROC			; Freeverb::processAudio
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 309  :     float inL = in[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _inL$[ebp], xmm0

; 310  :     float inR = in[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _inR$[ebp], xmm0

; 311  : 
; 312  :     // Init output values
; 313  :     float outputL = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _outputL$[ebp], xmm0

; 314  :     float outputR = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _outputR$[ebp], xmm0

; 315  : 
; 316  :     // Init input values
; 317  :     float inputL = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _inputL$[ebp], xmm0

; 318  :     float inputR = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _inputR$[ebp], xmm0

; 319  : 
; 320  :     // Compute mono input from Left and Right inputs
; 321  :     float input_mono = (inL + inR) / 2.0;

	movss	xmm0, DWORD PTR _inL$[ebp]
	addss	xmm0, DWORD PTR _inR$[ebp]
	cvtss2sd xmm0, xmm0
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _input_mono$[ebp], xmm0

; 322  : 
; 323  :     // Pre-delay processing 
; 324  :     inputL = preDelayModule->processAudio(input_mono);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _input_mono$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _inputL$[ebp]

; 325  :     inputR = preDelayModule->processAudio(input_mono);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _input_mono$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _inputR$[ebp]

; 326  : 
; 327  :     // Input AllPass Filters series processing
; 328  :     for (int j = 0; j < NUM_ALLPASS_FILTERS_IN; j++) {

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN4@processAud
$LN2@processAud:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN4@processAud:
	cmp	DWORD PTR _j$3[ebp], 3
	jge	SHORT $LN3@processAud

; 329  :         inputL = apFiltersL_input[j].processAudio(inputL);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _inputL$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	edx, DWORD PTR _j$3[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	imul	eax, DWORD PTR _j$3[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+112]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _inputL$[ebp]

; 330  :         inputR = apFiltersR_input[j].processAudio(inputR);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _inputR$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _j$3[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	imul	edx, DWORD PTR _j$3[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+116]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _inputR$[ebp]

; 331  :     }

	jmp	SHORT $LN2@processAud
$LN3@processAud:

; 332  : 
; 333  :     // Comb Filters parallel processing
; 334  :     for (int j = 0; j < NUM_COMB_FILTERS; j++) {

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN7@processAud
$LN5@processAud:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN7@processAud:
	cmp	DWORD PTR _j$2[ebp], 8
	jge	$LN6@processAud

; 335  :         outputL += combFiltersL[j].processAudio(inputL);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _inputL$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _j$2[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _j$2[ebp]
	shl	edx, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR tv330[ebp]
	addss	xmm0, DWORD PTR _outputL$[ebp]
	movss	DWORD PTR _outputL$[ebp], xmm0

; 336  :         outputR += combFiltersR[j].processAudio(inputR);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _inputR$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _j$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR _j$2[ebp]
	shl	ecx, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edi+44]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv344[ebp]
	movss	xmm0, DWORD PTR tv344[ebp]
	addss	xmm0, DWORD PTR _outputR$[ebp]
	movss	DWORD PTR _outputR$[ebp], xmm0

; 337  :     }

	jmp	$LN5@processAud
$LN6@processAud:

; 338  : 
; 339  :     // Output AllPass Filters series processing
; 340  :     for (int j = 0; j < NUM_ALLPASS_FILTERS_OUT; j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN10@processAud
$LN8@processAud:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN10@processAud:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	SHORT $LN9@processAud

; 341  :         outputL = apFiltersL_output[j].processAudio(outputL);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _outputL$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _j$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	imul	edx, DWORD PTR _j$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+120]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _outputL$[ebp]

; 342  :         outputR = apFiltersR_output[j].processAudio(outputR);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _outputR$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _j$1[ebp], 52
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	imul	ecx, DWORD PTR _j$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edi+124]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _outputR$[ebp]

; 343  :     }    

	jmp	SHORT $LN8@processAud
$LN9@processAud:

; 344  : 
; 345  :     // Stereo spread processing + output allocation
; 346  :     out[0] = wet1 * outputL + wet2 * outputR + dry * inL;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _outputL$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _outputR$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR _inL$[ebp]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 347  :     out[1] = wet1 * outputR + wet2 * outputL + dry * inR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _outputR$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _outputL$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR _inR$[ebp]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 348  : }

	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?processAudio@Freeverb@@QAEXPAM0@Z ENDP			; Freeverb::processAudio
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_width$ = -8						; size = 4
_this$ = -4						; size = 4
?updateReverbParameters@Freeverb@@QAEXXZ PROC		; Freeverb::updateReverbParameters
; _this$ = ecx

; 296  : void Freeverb::updateReverbParameters() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  :     float width = mapValueIntoRange(freeverb_spread, -1.0, 1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?mapValueIntoRange@Freeverb@@QAEMMMM@Z	; Freeverb::mapValueIntoRange
	fstp	DWORD PTR _width$[ebp]

; 298  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx]
	cvtss2sd xmm1, DWORD PTR _width$[ebp]
	divsd	xmm1, QWORD PTR __real@4000000000000000
	addsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 299  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	cvtss2sd xmm0, xmm0
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 300  :     dry = (1.0 - freeverb_wet);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 301  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?updateReverbParameters@Freeverb@@QAEXXZ ENDP		; Freeverb::updateReverbParameters
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
?setAllPassFiltersDelay@Freeverb@@QAEXXZ PROC		; Freeverb::setAllPassFiltersDelay
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 279  :     //float delay_tmp;
; 280  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@setAllPass
$LN2@setAllPass:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@setAllPass:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN3@setAllPass

; 281  :         allPassDlymsRight_input[i] = allPassDlymsLeft_input[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx*4+140]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+128], xmm0

; 282  :         apFiltersL_input[i].setDelayInmsec(allPassDlymsLeft_input[i]);

	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+140]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+112]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 283  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+128]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+116]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 284  :     }

	jmp	$LN2@setAllPass
$LN3@setAllPass:

; 285  : 
; 286  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@setAllPass
$LN5@setAllPass:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@setAllPass:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN6@setAllPass

; 287  :         allPassDlymsRight_output[i] = allPassDlymsLeft_output[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx*4+164]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+152], xmm0

; 288  :         apFiltersL_output[i].setDelayInmsec(allPassDlymsLeft_output[i]);

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+164]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+120]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 289  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+152]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+124]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 290  :     }

	jmp	$LN5@setAllPass
$LN6@setAllPass:

; 291  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setAllPassFiltersDelay@Freeverb@@QAEXXZ ENDP		; Freeverb::setAllPassFiltersDelay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?setCombFiltersDelay@Freeverb@@QAEXXZ PROC		; Freeverb::setCombFiltersDelay
; _this$ = ecx

; 265  : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 266  :     //float delay_tmp;
; 267  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@setCombFil
$LN2@setCombFil:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@setCombFil:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@setCombFil

; 268  :         combFilterDlymsRight[i] = combFilterDlymsLeft[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx*4+80]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+48], xmm0

; 269  :         combFiltersL[i].setDelayInmsec(combFilterDlymsLeft[i]);

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+80]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+40]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 270  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	call	?setDelayInmsec@Delay@@QAEXM@Z		; Delay::setDelayInmsec

; 271  :     }

	jmp	SHORT $LN2@setCombFil
$LN3@setCombFil:

; 272  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setCombFiltersDelay@Freeverb@@QAEXXZ ENDP		; Freeverb::setCombFiltersDelay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
_minValue$ = 12						; size = 4
_maxValue$ = 16						; size = 4
?mapValueOutsideRange@Freeverb@@QAEMMMM@Z PROC		; Freeverb::mapValueOutsideRange
; _this$ = ecx

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 258  :     return (value - minValue) / (maxValue - minValue);

	movss	xmm0, DWORD PTR _value$[ebp]
	subss	xmm0, DWORD PTR _minValue$[ebp]
	movss	xmm1, DWORD PTR _maxValue$[ebp]
	subss	xmm1, DWORD PTR _minValue$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 259  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?mapValueOutsideRange@Freeverb@@QAEMMMM@Z ENDP		; Freeverb::mapValueOutsideRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
_minvalue$ = 12						; size = 4
_maxValue$ = 16						; size = 4
?mapValueIntoRange@Freeverb@@QAEMMMM@Z PROC		; Freeverb::mapValueIntoRange
; _this$ = ecx

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 250  :     return minvalue + value * (maxValue - minvalue);

	movss	xmm0, DWORD PTR _maxValue$[ebp]
	subss	xmm0, DWORD PTR _minvalue$[ebp]
	mulss	xmm0, DWORD PTR _value$[ebp]
	addss	xmm0, DWORD PTR _minvalue$[ebp]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]

; 251  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?mapValueIntoRange@Freeverb@@QAEMMMM@Z ENDP		; Freeverb::mapValueIntoRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_sampleRate$ = 8					; size = 4
_rwet$ = 12						; size = 4
_rdecay$ = 16						; size = 4
_rdamping$ = 20						; size = 4
_rsmearing$ = 24					; size = 4
_rspread$ = 28						; size = 4
_rpredelay$ = 32					; size = 4
?init@Freeverb@@QAEXHMMMMMM@Z PROC			; Freeverb::init
; _this$ = ecx

; 94   : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 95   :     /*.......................................*/
; 96   :     // init pre-delay
; 97   :     preDelayModule->init(MAX_PREDELAY_VALUE_IN_MS, sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@43960000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 98   :     preDelayModule->setFeedback(0.0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?setFeedback@CombFilter@@QAEXM@Z	; CombFilter::setFeedback

; 99   : 
; 100  :     // init comb filters
; 101  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@init
$LN2@init:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN4@init:
	cmp	DWORD PTR _i$3[ebp], 8
	jge	$LN3@init

; 102  :         combFiltersL[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 103  :         combFiltersL[i].setMakeUpGaindB(-12.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@c1400000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+40]
	call	?setMakeUpGaindB@Delay@@QAEXM@Z		; Delay::setMakeUpGaindB

; 104  : 
; 105  :         combFiltersR[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 6
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+44]
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  :         combFiltersR[i].setMakeUpGaindB(-12.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@c1400000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	call	?setMakeUpGaindB@Delay@@QAEXM@Z		; Delay::setMakeUpGaindB

; 107  : 
; 108  :         // set a negative feedback for comb filters successive to first
; 109  :         if (i > 0) {

	cmp	DWORD PTR _i$3[ebp], 0
	jle	SHORT $LN11@init

; 110  :             combFiltersL[i].setFeedbackToNegative();

	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+40]
	call	?setFeedbackToNegative@CombFilter@@QAEXXZ ; CombFilter::setFeedbackToNegative

; 111  :             combFiltersR[i].setFeedbackToNegative();

	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	call	?setFeedbackToNegative@CombFilter@@QAEXXZ ; CombFilter::setFeedbackToNegative
$LN11@init:

; 112  :         }
; 113  :     }

	jmp	$LN2@init
$LN3@init:

; 114  : 
; 115  :     // set comb filters delays
; 116  :     setCombFiltersDelay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?setCombFiltersDelay@Freeverb@@QAEXXZ	; Freeverb::setCombFiltersDelay

; 117  :     
; 118  :     // init all pass lines      
; 119  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@init
$LN5@init:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@init:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN6@init

; 120  :         apFiltersL_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	imul	edx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	imul	eax, DWORD PTR _i$2[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+112]
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 121  :         apFiltersR_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	imul	edx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	imul	eax, DWORD PTR _i$2[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edi+116]
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 122  :     }

	jmp	$LN5@init
$LN6@init:

; 123  : 
; 124  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@init
$LN8@init:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN10@init:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN9@init

; 125  :         apFiltersL_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	edx, DWORD PTR _sampleRate$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$1[ebp], 52
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edi+120]
	mov	eax, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 126  :         apFiltersR_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	esi, esp
	mov	eax, DWORD PTR _sampleRate$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	imul	edx, DWORD PTR _i$1[ebp], 52
	mov	edi, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [edi+124]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, edx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  :     }

	jmp	SHORT $LN8@init
$LN9@init:

; 128  : 
; 129  :     // set all pass filters delays
; 130  :     setAllPassFiltersDelay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAllPassFiltersDelay@Freeverb@@QAEXXZ ; Freeverb::setAllPassFiltersDelay

; 131  : 
; 132  :     /*.......................................*/
; 133  :     // initialize reverb plug-in parameters
; 134  :     setReverbWet(rwet);

	push	ecx
	movss	xmm0, DWORD PTR _rwet$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbWet@Freeverb@@QAEXM@Z		; Freeverb::setReverbWet

; 135  :     setReverbDecayInSeconds(rdecay);

	push	ecx
	movss	xmm0, DWORD PTR _rdecay$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbDecayInSeconds@Freeverb@@QAEXM@Z ; Freeverb::setReverbDecayInSeconds

; 136  :     setReverbDampingFrequency(rdamping);

	push	ecx
	movss	xmm0, DWORD PTR _rdamping$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbDampingFrequency@Freeverb@@QAEXM@Z ; Freeverb::setReverbDampingFrequency

; 137  :     setReverbSmearing(rsmearing);

	push	ecx
	movss	xmm0, DWORD PTR _rsmearing$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbSmearing@Freeverb@@QAEXM@Z	; Freeverb::setReverbSmearing

; 138  :     setReverbSpread(rspread);

	push	ecx
	movss	xmm0, DWORD PTR _rspread$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbSpread@Freeverb@@QAEXM@Z	; Freeverb::setReverbSpread

; 139  :     setReverbPreDelayInMilliseconds(rpredelay);

	push	ecx
	movss	xmm0, DWORD PTR _rpredelay$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setReverbPreDelayInMilliseconds@Freeverb@@QAEXM@Z ; Freeverb::setReverbPreDelayInMilliseconds

; 140  : }

	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?init@Freeverb@@QAEXHMMMMMM@Z ENDP			; Freeverb::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1Freeverb@@QAE@XZ PROC				; Freeverb::~Freeverb
; _this$ = ecx

; 68   : Freeverb::~Freeverb() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 69   :     // Free pre-delay object
; 70   :     preDelayModule->~CombFilter();

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	??_GCombFilter@@QAEPAXI@Z

; 71   : 
; 72   :     // Free CombFilter objects
; 73   :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Freeverb
$LN2@Freeverb:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@Freeverb:
	cmp	DWORD PTR _i$3[ebp], 8
	jge	SHORT $LN3@Freeverb

; 74   :         combFiltersL[i].~LPCombFilter();

	push	0
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+40]
	call	??_GLPCombFilter@@QAEPAXI@Z

; 75   :         combFiltersR[i].~LPCombFilter();

	push	0
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+44]
	call	??_GLPCombFilter@@QAEPAXI@Z

; 76   :     }

	jmp	SHORT $LN2@Freeverb
$LN3@Freeverb:

; 77   : 
; 78   :     // Free AllPass objects
; 79   :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@Freeverb
$LN5@Freeverb:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN7@Freeverb:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN6@Freeverb

; 80   :         apFiltersL_input[i].~AllPassFilter();

	push	0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+112]
	call	??_GAllPassFilter@@QAEPAXI@Z

; 81   :         apFiltersR_input[i].~AllPassFilter();

	push	0
	imul	ecx, DWORD PTR _i$2[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+116]
	call	??_GAllPassFilter@@QAEPAXI@Z

; 82   :     }

	jmp	SHORT $LN5@Freeverb
$LN6@Freeverb:

; 83   : 
; 84   :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@Freeverb
$LN8@Freeverb:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN10@Freeverb:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN11@Freeverb

; 85   :         apFiltersL_output[i].~AllPassFilter();

	push	0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+120]
	call	??_GAllPassFilter@@QAEPAXI@Z

; 86   :         apFiltersR_output[i].~AllPassFilter();

	push	0
	imul	ecx, DWORD PTR _i$1[ebp], 52
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+124]
	call	??_GAllPassFilter@@QAEPAXI@Z

; 87   :     }    

	jmp	SHORT $LN8@Freeverb
$LN11@Freeverb:

; 88   : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Freeverb@@QAE@XZ ENDP				; Freeverb::~Freeverb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Freeverb.cpp
_TEXT	SEGMENT
tv216 = -100						; size = 4
tv199 = -96						; size = 4
tv182 = -92						; size = 4
tv165 = -88						; size = 4
tv148 = -84						; size = 4
tv131 = -80						; size = 4
tv82 = -76						; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
$T6 = -56						; size = 4
$T7 = -52						; size = 4
$T8 = -48						; size = 4
$T9 = -44						; size = 4
$T10 = -40						; size = 4
$T11 = -36						; size = 4
$T12 = -32						; size = 4
$T13 = -28						; size = 4
$T14 = -24						; size = 4
$T15 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Freeverb@@QAE@XZ PROC				; Freeverb::Freeverb
; _this$ = ecx

; 20   : Freeverb::Freeverb() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Freeverb@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   :     freeverb_wet      = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0

; 22   :     freeverb_smearing = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0

; 23   :     freeverb_decaySeconds    = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+8], xmm0

; 24   :     freeverb_dampingFrequency  = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+12], xmm0

; 25   :     freeverb_preDelayMilliSeconds = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+16], xmm0

; 26   :     freeverb_spread   = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+20], xmm0

; 27   : 
; 28   :     /*.......................................*/
; 29   :     // allocate pre-delay module
; 30   :     preDelayModule = new CombFilter();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN3@Freeverb
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0CombFilter@@QAE@XZ			; CombFilter::CombFilter
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN4@Freeverb
$LN3@Freeverb:
	mov	DWORD PTR tv82[ebp], 0
$LN4@Freeverb:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR [ecx+36], edx

; 31   : 
; 32   :     /*.......................................*/
; 33   :     // allocate comb filters
; 34   :     combFiltersL = new LPCombFilter[NUM_COMB_FILTERS];

	push	516					; 00000204H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN5@Freeverb
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR [eax], 8
	push	OFFSET ??1LPCombFilter@@QAE@XZ		; LPCombFilter::~LPCombFilter
	push	OFFSET ??0LPCombFilter@@QAE@XZ		; LPCombFilter::LPCombFilter
	push	8
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T12[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T12[ebp]
	add	edx, 4
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN6@Freeverb
$LN5@Freeverb:
	mov	DWORD PTR tv131[ebp], 0
$LN6@Freeverb:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T13[ebp]
	mov	DWORD PTR [ecx+40], edx

; 35   :     combFiltersR = new LPCombFilter[NUM_COMB_FILTERS];

	push	516					; 00000204H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN7@Freeverb
	mov	eax, DWORD PTR $T10[ebp]
	mov	DWORD PTR [eax], 8
	push	OFFSET ??1LPCombFilter@@QAE@XZ		; LPCombFilter::~LPCombFilter
	push	OFFSET ??0LPCombFilter@@QAE@XZ		; LPCombFilter::LPCombFilter
	push	8
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T10[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T10[ebp]
	add	edx, 4
	mov	DWORD PTR tv148[ebp], edx
	jmp	SHORT $LN8@Freeverb
$LN7@Freeverb:
	mov	DWORD PTR tv148[ebp], 0
$LN8@Freeverb:
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR [ecx+44], edx

; 36   : 
; 37   :     /*.......................................*/
; 38   :     // allocate all pass lines
; 39   :     apFiltersL_input  = new AllPassFilter[NUM_ALLPASS_FILTERS_IN];

	push	160					; 000000a0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@Freeverb
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax], 3
	push	OFFSET ??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	push	OFFSET ??0AllPassFilter@@QAE@XZ		; AllPassFilter::AllPassFilter
	push	3
	push	52					; 00000034H
	mov	ecx, DWORD PTR $T8[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T8[ebp]
	add	edx, 4
	mov	DWORD PTR tv165[ebp], edx
	jmp	SHORT $LN10@Freeverb
$LN9@Freeverb:
	mov	DWORD PTR tv165[ebp], 0
$LN10@Freeverb:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [ecx+112], edx

; 40   :     apFiltersR_input  = new AllPassFilter[NUM_ALLPASS_FILTERS_IN];

	push	160					; 000000a0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN11@Freeverb
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax], 3
	push	OFFSET ??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	push	OFFSET ??0AllPassFilter@@QAE@XZ		; AllPassFilter::AllPassFilter
	push	3
	push	52					; 00000034H
	mov	ecx, DWORD PTR $T6[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T6[ebp]
	add	edx, 4
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN12@Freeverb
$LN11@Freeverb:
	mov	DWORD PTR tv182[ebp], 0
$LN12@Freeverb:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx+116], edx

; 41   :     apFiltersL_output = new AllPassFilter[NUM_ALLPASS_FILTERS_OUT];

	push	160					; 000000a0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN13@Freeverb
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax], 3
	push	OFFSET ??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	push	OFFSET ??0AllPassFilter@@QAE@XZ		; AllPassFilter::AllPassFilter
	push	3
	push	52					; 00000034H
	mov	ecx, DWORD PTR $T4[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T4[ebp]
	add	edx, 4
	mov	DWORD PTR tv199[ebp], edx
	jmp	SHORT $LN14@Freeverb
$LN13@Freeverb:
	mov	DWORD PTR tv199[ebp], 0
$LN14@Freeverb:
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx+120], edx

; 42   :     apFiltersR_output = new AllPassFilter[NUM_ALLPASS_FILTERS_OUT];

	push	160					; 000000a0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN15@Freeverb
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], 3
	push	OFFSET ??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	push	OFFSET ??0AllPassFilter@@QAE@XZ		; AllPassFilter::AllPassFilter
	push	3
	push	52					; 00000034H
	mov	ecx, DWORD PTR $T2[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	mov	edx, DWORD PTR $T2[ebp]
	add	edx, 4
	mov	DWORD PTR tv216[ebp], edx
	jmp	SHORT $LN16@Freeverb
$LN15@Freeverb:
	mov	DWORD PTR tv216[ebp], 0
$LN16@Freeverb:
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+124], edx

; 43   : 
; 44   :     /*.......................................*/
; 45   :     // init CombFilters delay values
; 46   :     combFilterDlymsLeft[0] = 25.31; // 29.7;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41ca7ae1
	movss	DWORD PTR [edx+ecx+80], xmm0

; 47   :     combFilterDlymsLeft[1] = 26.94; // 37.1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41d7851f
	movss	DWORD PTR [ecx+eax+80], xmm0

; 48   :     combFilterDlymsLeft[2] = 28.96; // 41.1;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41e7ae14
	movss	DWORD PTR [eax+edx+80], xmm0

; 49   :     combFilterDlymsLeft[3] = 30.75; // 43.7;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f60000
	movss	DWORD PTR [eax+edx+80], xmm0

; 50   :     combFilterDlymsLeft[4] = 32.24; // 31.3;

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4200f5c3
	movss	DWORD PTR [edx+ecx+80], xmm0

; 51   :     combFilterDlymsLeft[5] = 33.81; // 31.7;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42073d71
	movss	DWORD PTR [edx+ecx+80], xmm0

; 52   :     combFilterDlymsLeft[6] = 35.31; // 37.7;

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@420d3d71
	movss	DWORD PTR [edx+ecx+80], xmm0

; 53   :     combFilterDlymsLeft[7] = 36.70; // 41.7;

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4212cccd
	movss	DWORD PTR [edx+ecx+80], xmm0

; 54   : 
; 55   :     /*.......................................*/
; 56   :     // init AllPass delay values
; 57   :     allPassDlymsLeft_input[0] = 1.1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR [edx+ecx+140], xmm0

; 58   :     allPassDlymsLeft_input[1] = 2.3;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40133333
	movss	DWORD PTR [ecx+eax+140], xmm0

; 59   :     allPassDlymsLeft_input[2] = 4.7;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40966666
	movss	DWORD PTR [eax+edx+140], xmm0

; 60   :     allPassDlymsLeft_output[0] = 7.73; // 1.1;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40f75c29
	movss	DWORD PTR [eax+edx+164], xmm0

; 61   :     allPassDlymsLeft_output[1] = 10.00; // 2.3;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [edx+ecx+164], xmm0

; 62   :     allPassDlymsLeft_output[2] = 12.61; // 4.7;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4149c28f
	movss	DWORD PTR [ecx+eax+164], xmm0

; 63   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0Freeverb@@QAE@XZ$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$1:
	push	516					; 00000204H
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$2:
	push	516					; 00000204H
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$3:
	push	160					; 000000a0H
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$4:
	push	160					; 000000a0H
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$5:
	push	160					; 000000a0H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$??0Freeverb@@QAE@XZ$6:
	push	160					; 000000a0H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0Freeverb@@QAE@XZ:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??0Freeverb@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Freeverb@@QAE@XZ ENDP				; Freeverb::Freeverb
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ELPCombFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ELPCombFilter@@QAEPAXI@Z PROC			; LPCombFilter::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_ELPCombFilter@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN2@vector
	push	OFFSET ??1LPCombFilter@@QAE@XZ		; LPCombFilter::~LPCombFilter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN3@vector
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-4]
	shl	eax, 6
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	push	ecx
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN3@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN5@vector
$LN2@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LPCombFilter@@QAE@XZ			; LPCombFilter::~LPCombFilter
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN4@vector
	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN5@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ELPCombFilter@@QAEPAXI@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??_ELPCombFilter@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_ELPCombFilter@@QAEPAXI@Z ENDP			; LPCombFilter::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GLPCombFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GLPCombFilter@@QAEPAXI@Z PROC			; LPCombFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LPCombFilter@@QAE@XZ			; LPCombFilter::~LPCombFilter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLPCombFilter@@QAEPAXI@Z ENDP			; LPCombFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCombFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCombFilter@@QAEPAXI@Z PROC				; CombFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CombFilter@@QAE@XZ			; CombFilter::~CombFilter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCombFilter@@QAEPAXI@Z ENDP				; CombFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_EAllPassFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EAllPassFilter@@QAEPAXI@Z PROC			; AllPassFilter::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_EAllPassFilter@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN2@vector
	push	OFFSET ??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN3@vector
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx-4], 52
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	push	ecx
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN3@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN5@vector
$LN2@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN4@vector
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN5@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EAllPassFilter@@QAEPAXI@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??_EAllPassFilter@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_EAllPassFilter@@QAEPAXI@Z ENDP			; AllPassFilter::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GAllPassFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAllPassFilter@@QAEPAXI@Z PROC			; AllPassFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AllPassFilter@@QAE@XZ		; AllPassFilter::~AllPassFilter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	52					; 00000034H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAllPassFilter@@QAEPAXI@Z ENDP			; AllPassFilter::`scalar deleting destructor'
_TEXT	ENDS
END
