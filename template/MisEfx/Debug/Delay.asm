; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	E:\FoxSuite\misefx\MisEfx\Debug\Delay.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG27218 DB	'invalid argument', 00H
	ORG $+3
$SG27219 DB	'%s', 00H
	ORG $+1
$SG27220 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xmemory', 00H
$SG27221 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG27222 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG27223 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??0Delay@@QAE@XZ				; Delay::Delay
PUBLIC	??1Delay@@QAE@XZ				; Delay::~Delay
PUBLIC	?init@Delay@@UAEXMH@Z				; Delay::init
PUBLIC	?initInSamples@Delay@@QAEXHH@Z			; Delay::initInSamples
PUBLIC	?initDelayLine@Delay@@QAEXXZ			; Delay::initDelayLine
PUBLIC	?updateParameters@Delay@@QAEXXZ			; Delay::updateParameters
PUBLIC	?reset@Delay@@QAEXXZ				; Delay::reset
PUBLIC	?setSampleRate@Delay@@UAEXH@Z			; Delay::setSampleRate
PUBLIC	?setDelayInmsec@Delay@@QAEXM@Z			; Delay::setDelayInmsec
PUBLIC	?setMakeUpGaindB@Delay@@QAEXM@Z			; Delay::setMakeUpGaindB
PUBLIC	?setMakeUpGainLin@Delay@@QAEXM@Z		; Delay::setMakeUpGainLin
PUBLIC	?updateIndices@Delay@@QAEXXZ			; Delay::updateIndices
PUBLIC	?writeToDelayLine@Delay@@QAEXM@Z		; Delay::writeToDelayLine
PUBLIC	?readFromDelayLine@Delay@@QAEMXZ		; Delay::readFromDelayLine
PUBLIC	?linearInterp@Delay@@QAEMMMMMM@Z		; Delay::linearInterp
PUBLIC	?processAudio@Delay@@UAEMM@Z			; Delay::processAudio
PUBLIC	??_7Delay@@6B@					; Delay::`vftable'
PUBLIC	??_R4Delay@@6B@					; Delay::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDelay@@@8				; Delay `RTTI Type Descriptor'
PUBLIC	??_R3Delay@@8					; Delay::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Delay@@8					; Delay::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Delay@@8				; Delay::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@447a0000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	_log10:PROC
EXTRN	_pow:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@Delay@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Delay@@8 DD FLAT:??_R0?AVDelay@@@8	; Delay::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Delay@@8
rdata$r	ENDS
;	COMDAT ??_R2Delay@@8
rdata$r	SEGMENT
??_R2Delay@@8 DD FLAT:??_R1A@?0A@EA@Delay@@8		; Delay::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Delay@@8
rdata$r	SEGMENT
??_R3Delay@@8 DD 00H					; Delay::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Delay@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDelay@@@8
data$rs	SEGMENT
??_R0?AVDelay@@@8 DD FLAT:??_7type_info@@6B@		; Delay `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDelay@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Delay@@6B@
rdata$r	SEGMENT
??_R4Delay@@6B@ DD 00H					; Delay::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDelay@@@8
	DD	FLAT:??_R3Delay@@8
rdata$r	ENDS
;	COMDAT ??_7Delay@@6B@
CONST	SEGMENT
??_7Delay@@6B@ DD FLAT:??_R4Delay@@6B@			; Delay::`vftable'
	DD	FLAT:?init@Delay@@UAEXMH@Z
	DD	FLAT:?setSampleRate@Delay@@UAEXH@Z
	DD	FLAT:?processAudio@Delay@@UAEMM@Z
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_yn$ = -8						; size = 4
_this$ = -4						; size = 4
_xn$ = 8						; size = 4
?processAudio@Delay@@UAEMM@Z PROC			; Delay::processAudio
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	// read delay sample
; 219  : 	float yn = readFromDelayLine();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFromDelayLine@Delay@@QAEMXZ	; Delay::readFromDelayLine
	fstp	DWORD PTR _yn$[ebp]

; 220  : 
; 221  : 	// allocate value to delay line
; 222  : 	writeToDelayLine(xn);

	push	ecx
	movss	xmm0, DWORD PTR _xn$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeToDelayLine@Delay@@QAEXM@Z	; Delay::writeToDelayLine

; 223  : 
; 224  : 	// Update read/write indices
; 225  : 	updateIndices();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateIndices@Delay@@QAEXXZ		; Delay::updateIndices

; 226  : 
; 227  : 	return yn * dly_makeUpGain;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yn$[ebp]
	mulss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]

; 228  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?processAudio@Delay@@UAEMM@Z ENDP			; Delay::processAudio
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_result$ = -16						; size = 4
_dx$ = -12						; size = 4
_denom$ = -8						; size = 4
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_y1$ = 16						; size = 4
_y2$ = 20						; size = 4
_x$ = 24						; size = 4
?linearInterp@Delay@@QAEMMMMMM@Z PROC			; Delay::linearInterp
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	float denom = x2 - x1;

	movss	xmm0, DWORD PTR _x2$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _denom$[ebp], xmm0

; 204  : 	if (denom == 0)

	movss	xmm0, DWORD PTR _denom$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@linearInte

; 205  : 		return y1; // should not ever happen

	fld	DWORD PTR _y1$[ebp]
	jmp	SHORT $LN1@linearInte
$LN2@linearInte:

; 206  : 
; 207  : 	// calculate decimal position of x
; 208  : 	float dx = (x - x1) / (x2 - x1);

	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	movss	xmm1, DWORD PTR _x2$[ebp]
	subss	xmm1, DWORD PTR _x1$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 209  : 
; 210  : 	// use weighted sum method of interpolating
; 211  : 	float result = dx * y2 + (1 - dx) * y1;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _y1$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _result$[ebp], xmm0

; 212  : 
; 213  : 	return result;

	fld	DWORD PTR _result$[ebp]
$LN1@linearInte:

; 214  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?linearInterp@Delay@@QAEMMMMMM@Z ENDP			; Delay::linearInterp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_interp$ = -24						; size = 4
_frac$ = -20						; size = 4
_yn_1$ = -16						; size = 4
_readIndex_1$ = -12					; size = 4
_yn$ = -8						; size = 4
_this$ = -4						; size = 4
?readFromDelayLine@Delay@@QAEMXZ PROC			; Delay::readFromDelayLine
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 	// read the current sample from delay line buffer
; 182  : 	float yn = dly_buffer[dly_readIndex];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _yn$[ebp], xmm0

; 183  : 
; 184  : 	// compute previous index and wrap if needed
; 185  : 	int readIndex_1 = dly_readIndex - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, 1
	mov	DWORD PTR _readIndex_1$[ebp], edx

; 186  : 	if (readIndex_1 < 0)

	jns	SHORT $LN2@readFromDe

; 187  : 		readIndex_1 = dly_lineLengthInSamples - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR _readIndex_1$[ebp], ecx
$LN2@readFromDe:

; 188  : 
; 189  : 	// read previous sample from delay line
; 190  : 	float yn_1 = dly_buffer[readIndex_1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _readIndex_1$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _yn_1$[ebp], xmm0

; 191  : 
; 192  : 	// compute the fractional part of the delay in samples
; 193  : 	float frac = dly_delayInSamples - (int)dly_delayInSamples;

	mov	edx, DWORD PTR _this$[ebp]
	cvttss2si eax, DWORD PTR [edx+16]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _frac$[ebp], xmm1

; 194  : 
; 195  : 	// compute the interpolated delay value
; 196  : 	float interp = linearInterp(0, 1, yn, yn_1, frac);

	push	ecx
	movss	xmm0, DWORD PTR _frac$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yn_1$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yn$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearInterp@Delay@@QAEMMMMMM@Z	; Delay::linearInterp
	fstp	DWORD PTR _interp$[ebp]

; 197  : 	
; 198  : 	return interp;

	fld	DWORD PTR _interp$[ebp]

; 199  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?readFromDelayLine@Delay@@QAEMXZ ENDP			; Delay::readFromDelayLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xn$ = 8						; size = 4
?writeToDelayLine@Delay@@QAEXM@Z PROC			; Delay::writeToDelayLine
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	// write the sample 'x' to current writing position of delay buffer
; 176  : 	dly_buffer[dly_writeIndex] = xn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	movss	xmm0, DWORD PTR _xn$[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0

; 177  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeToDelayLine@Delay@@QAEXM@Z ENDP			; Delay::writeToDelayLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?updateIndices@Delay@@QAEXXZ PROC			; Delay::updateIndices
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 	// Increase reading index
; 159  : 	dly_readIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 160  : 
; 161  : 	// check if reading index is out of delay line length
; 162  : 	if (dly_readIndex >= dly_lineLengthInSamples)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN2@updateIndi

; 163  : 		dly_readIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN2@updateIndi:

; 164  : 
; 165  : 	// Increase writing index
; 166  : 	dly_writeIndex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 167  : 
; 168  : 	// check if writing index is out of delay line length
; 169  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN1@updateIndi

; 170  : 		dly_writeIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN1@updateIndi:

; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?updateIndices@Delay@@QAEXXZ ENDP			; Delay::updateIndices
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
tv79 = -12						; size = 8
_this$ = -4						; size = 4
_gainLin$ = 8						; size = 4
?setMakeUpGainLin@Delay@@QAEXM@Z PROC			; Delay::setMakeUpGainLin
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	// set make up gain [lin]
; 149  : 	dly_makeUpGain = gainLin;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _gainLin$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 150  : 
; 151  : 	// compute makeup gain in dB
; 152  : 	dly_makeUpGaindB = 20 * log10(dly_makeUpGain);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+40]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log10
	add	esp, 8
	fstp	QWORD PTR tv79[ebp]
	movsd	xmm0, QWORD PTR tv79[ebp]
	mulsd	xmm0, QWORD PTR __real@4034000000000000
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 153  : 
; 154  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMakeUpGainLin@Delay@@QAEXM@Z ENDP			; Delay::setMakeUpGainLin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gaindB$ = 8						; size = 4
?setMakeUpGaindB@Delay@@QAEXM@Z PROC			; Delay::setMakeUpGaindB
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	// set make up gain [dB]
; 140  : 	dly_makeUpGaindB = gaindB;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _gaindB$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateParameters@Delay@@QAEXXZ		; Delay::updateParameters

; 144  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMakeUpGaindB@Delay@@QAEXM@Z ENDP			; Delay::setMakeUpGaindB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_delayInmsec$ = 8					; size = 4
?setDelayInmsec@Delay@@QAEXM@Z PROC			; Delay::setDelayInmsec
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	// Set delay line length in milliseconds
; 128  : 	dly_delayInmsec = delayInmsec;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _delayInmsec$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 129  : 
; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@setDelayIn

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0
$LN2@setDelayIn:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateParameters@Delay@@QAEXXZ		; Delay::updateParameters

; 135  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setDelayInmsec@Delay@@QAEXM@Z ENDP			; Delay::setDelayInmsec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sampleRate$ = 8					; size = 4
?setSampleRate@Delay@@UAEXH@Z PROC			; Delay::setSampleRate
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	// set sample rate internal to this class
; 113  : 	dly_sampleRate = sampleRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sampleRate$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 114  : 
; 115  : 	// reset delay line
; 116  : 	reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@Delay@@QAEXXZ			; Delay::reset

; 117  : 
; 118  : 	// initialize the delay line from scratches
; 119  : 	initDelayLine();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?initDelayLine@Delay@@QAEXXZ		; Delay::initDelayLine

; 120  : 
; 121  : 	// update delay parameters
; 122  : 	updateParameters();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateParameters@Delay@@QAEXXZ		; Delay::updateParameters

; 123  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setSampleRate@Delay@@UAEXH@Z ENDP			; Delay::setSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?reset@Delay@@QAEXXZ PROC				; Delay::reset
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	delete dly_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR $T1[ebp], ecx
	push	4
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 105  : 	dly_buffer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 106  : 	dly_readIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 107  : 	dly_writeIndex = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 108  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@Delay@@QAEXXZ ENDP				; Delay::reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?updateParameters@Delay@@QAEXXZ PROC			; Delay::updateParameters
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	// convert makeup gain in linear value
; 85   : 	dly_makeUpGain = pow(10.0, dly_makeUpGaindB / 20.0);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	divsd	xmm0, QWORD PTR __real@4034000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+40]

; 86   : 
; 87   : 	// define delay size in samples
; 88   : 	dly_delayInSamples = dly_delayInmsec * (float)dly_sampleRate / 1000;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 89   : 
; 90   : 	// protection against a 0 samples delay
; 91   : 	if (dly_delayInSamples == 0)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@updatePara

; 92   : 		dly_delayInSamples = 1;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0
$LN2@updatePara:

; 93   : 
; 94   : 	// compute read index as the write index minus the delay length
; 95   : 	dly_readIndex = dly_writeIndex - dly_delayInSamples;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+16]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 96   : 
; 97   : 	// check if the read index is negative. In that case wrap it by adding the delay line length
; 98   : 	if (dly_readIndex < 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jge	SHORT $LN3@updatePara

; 99   : 		dly_readIndex += dly_lineLengthInSamples;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN3@updatePara:

; 100  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?updateParameters@Delay@@QAEXXZ ENDP			; Delay::updateParameters
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_lineLengthInBytes$ = -8				; size = 4
_this$ = -4						; size = 4
?initDelayLine@Delay@@QAEXXZ PROC			; Delay::initDelayLine
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 	// define delay line length in bytes
; 72   : 	int lineLengthInBytes = dly_lineLengthInSamples * sizeof(float);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	mov	DWORD PTR _lineLengthInBytes$[ebp], ecx

; 73   : 
; 74   : 	// allocate memory for the delay line
; 75   : 	dly_buffer = (float*)malloc(lineLengthInBytes);

	mov	esi, esp
	mov	edx, DWORD PTR _lineLengthInBytes$[ebp]
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 76   : 
; 77   : 	// set the allocated memory at zero
; 78   : 	memset(dly_buffer, 0, lineLengthInBytes);

	mov	edx, DWORD PTR _lineLengthInBytes$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 79   : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?initDelayLine@Delay@@QAEXXZ ENDP			; Delay::initDelayLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_delayLengthInSamples$ = 8				; size = 4
_sampleRate$ = 12					; size = 4
?initInSamples@Delay@@QAEXHH@Z PROC			; Delay::initInSamples
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	// set delay line length in samples
; 51   : 	dly_lineLengthInSamples = delayLengthInSamples;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _delayLengthInSamples$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 52   : 
; 53   : 	// set internal sample rate value
; 54   : 	dly_sampleRate = sampleRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _sampleRate$[ebp]
	mov	DWORD PTR [edx+4], eax

; 55   : 
; 56   : 	// set delay line length in msec
; 57   : 	dly_lineLengthInmsec = dly_lineLengthInSamples * 1000 / dly_sampleRate;

	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+8], 1000
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 58   : 
; 59   : 	// set delay msec
; 60   : 	dly_delayInmsec = dly_lineLengthInmsec;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 61   : 
; 62   : 	// set delay in samples
; 63   : 	dly_delayInSamples = dly_lineLengthInSamples;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 64   : 
; 65   : 	// init delay line buffer
; 66   : 	initDelayLine();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?initDelayLine@Delay@@QAEXXZ		; Delay::initDelayLine

; 67   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?initInSamples@Delay@@QAEXHH@Z ENDP			; Delay::initInSamples
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_maxDelayInmsec$ = 8					; size = 4
_sampleRate$ = 12					; size = 4
?init@Delay@@UAEXMH@Z PROC				; Delay::init
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	// set delay line length in milliseconds
; 30   : 	dly_lineLengthInmsec = maxDelayInmsec;

	cvttss2si eax, DWORD PTR _maxDelayInmsec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 31   : 
; 32   : 	// allocate sample rate
; 33   : 	dly_sampleRate = sampleRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _sampleRate$[ebp]
	mov	DWORD PTR [edx+4], eax

; 34   : 
; 35   : 	// set delay line length in samples
; 36   : 	dly_lineLengthInSamples = dly_lineLengthInmsec * dly_sampleRate / 1000;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 37   : 
; 38   : 	// set delay msec
; 39   : 	dly_delayInmsec = dly_lineLengthInmsec;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 40   : 
; 41   : 	// set delay in samples
; 42   : 	dly_delayInSamples = dly_lineLengthInSamples;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 43   : 
; 44   : 	// initialize delay line
; 45   : 	initDelayLine();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?initDelayLine@Delay@@QAEXXZ		; Delay::initDelayLine

; 46   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init@Delay@@UAEXMH@Z ENDP				; Delay::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1Delay@@QAE@XZ PROC					; Delay::~Delay
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Delay@@6B@

; 22   : 	if (dly_buffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN2@Delay

; 23   : 		delete dly_buffer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T1[ebp], eax
	push	4
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@Delay:

; 24   : 	dly_buffer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0

; 25   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Delay@@QAE@XZ ENDP					; Delay::~Delay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Delay@@QAE@XZ PROC					; Delay::Delay
; _this$ = ecx

; 7    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Delay@@6B@

; 8    : 	dly_buffer				= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 9    : 	dly_makeUpGaindB		= 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+36], xmm0

; 10   : 	dly_makeUpGain			= 1.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+40], xmm0

; 11   : 	dly_delayInmsec			= 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+20], xmm0

; 12   : 	dly_delayInSamples		= 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+16], xmm0

; 13   : 	dly_readIndex			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 14   : 	dly_writeIndex			= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 15   : 	dly_lineLengthInSamples = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 16   : 	dly_lineLengthInmsec	= 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 17   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Delay@@QAE@XZ ENDP					; Delay::Delay
_TEXT	ENDS
END
